
F103 GY-906 I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008684  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ad4  08008798  08008798  00018798  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a26c  0800a26c  000201f0  2**0
                  CONTENTS
  4 .ARM          00000000  0800a26c  0800a26c  000201f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a26c  0800a26c  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a26c  0800a26c  0001a26c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a270  0800a270  0001a270  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800a274  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000558  200001f0  0800a464  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000748  0800a464  00020748  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d8c9  00000000  00000000  00020219  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023ba  00000000  00000000  0002dae2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e48  00000000  00000000  0002fea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d20  00000000  00000000  00030ce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019591  00000000  00000000  00031a08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011006  00000000  00000000  0004af99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008cfaa  00000000  00000000  0005bf9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e8f49  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005010  00000000  00000000  000e8f9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f0 	.word	0x200001f0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800877c 	.word	0x0800877c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f4 	.word	0x200001f4
 800014c:	0800877c 	.word	0x0800877c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2lz>:
 8000b68:	b538      	push	{r3, r4, r5, lr}
 8000b6a:	4605      	mov	r5, r0
 8000b6c:	460c      	mov	r4, r1
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2300      	movs	r3, #0
 8000b72:	4628      	mov	r0, r5
 8000b74:	4621      	mov	r1, r4
 8000b76:	f7ff ff21 	bl	80009bc <__aeabi_dcmplt>
 8000b7a:	b928      	cbnz	r0, 8000b88 <__aeabi_d2lz+0x20>
 8000b7c:	4628      	mov	r0, r5
 8000b7e:	4621      	mov	r1, r4
 8000b80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b84:	f000 b80a 	b.w	8000b9c <__aeabi_d2ulz>
 8000b88:	4628      	mov	r0, r5
 8000b8a:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000b8e:	f000 f805 	bl	8000b9c <__aeabi_d2ulz>
 8000b92:	4240      	negs	r0, r0
 8000b94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b98:	bd38      	pop	{r3, r4, r5, pc}
 8000b9a:	bf00      	nop

08000b9c <__aeabi_d2ulz>:
 8000b9c:	b5d0      	push	{r4, r6, r7, lr}
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <__aeabi_d2ulz+0x34>)
 8000ba2:	4606      	mov	r6, r0
 8000ba4:	460f      	mov	r7, r1
 8000ba6:	f7ff fc97 	bl	80004d8 <__aeabi_dmul>
 8000baa:	f7ff ff6d 	bl	8000a88 <__aeabi_d2uiz>
 8000bae:	4604      	mov	r4, r0
 8000bb0:	f7ff fc18 	bl	80003e4 <__aeabi_ui2d>
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <__aeabi_d2ulz+0x38>)
 8000bb8:	f7ff fc8e 	bl	80004d8 <__aeabi_dmul>
 8000bbc:	4602      	mov	r2, r0
 8000bbe:	460b      	mov	r3, r1
 8000bc0:	4630      	mov	r0, r6
 8000bc2:	4639      	mov	r1, r7
 8000bc4:	f7ff fad0 	bl	8000168 <__aeabi_dsub>
 8000bc8:	f7ff ff5e 	bl	8000a88 <__aeabi_d2uiz>
 8000bcc:	4621      	mov	r1, r4
 8000bce:	bdd0      	pop	{r4, r6, r7, pc}
 8000bd0:	3df00000 	.word	0x3df00000
 8000bd4:	41f00000 	.word	0x41f00000

08000bd8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b088      	sub	sp, #32
 8000bdc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bde:	f107 0310 	add.w	r3, r7, #16
 8000be2:	2200      	movs	r2, #0
 8000be4:	601a      	str	r2, [r3, #0]
 8000be6:	605a      	str	r2, [r3, #4]
 8000be8:	609a      	str	r2, [r3, #8]
 8000bea:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bec:	4b2e      	ldr	r3, [pc, #184]	; (8000ca8 <MX_GPIO_Init+0xd0>)
 8000bee:	699b      	ldr	r3, [r3, #24]
 8000bf0:	4a2d      	ldr	r2, [pc, #180]	; (8000ca8 <MX_GPIO_Init+0xd0>)
 8000bf2:	f043 0310 	orr.w	r3, r3, #16
 8000bf6:	6193      	str	r3, [r2, #24]
 8000bf8:	4b2b      	ldr	r3, [pc, #172]	; (8000ca8 <MX_GPIO_Init+0xd0>)
 8000bfa:	699b      	ldr	r3, [r3, #24]
 8000bfc:	f003 0310 	and.w	r3, r3, #16
 8000c00:	60fb      	str	r3, [r7, #12]
 8000c02:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c04:	4b28      	ldr	r3, [pc, #160]	; (8000ca8 <MX_GPIO_Init+0xd0>)
 8000c06:	699b      	ldr	r3, [r3, #24]
 8000c08:	4a27      	ldr	r2, [pc, #156]	; (8000ca8 <MX_GPIO_Init+0xd0>)
 8000c0a:	f043 0320 	orr.w	r3, r3, #32
 8000c0e:	6193      	str	r3, [r2, #24]
 8000c10:	4b25      	ldr	r3, [pc, #148]	; (8000ca8 <MX_GPIO_Init+0xd0>)
 8000c12:	699b      	ldr	r3, [r3, #24]
 8000c14:	f003 0320 	and.w	r3, r3, #32
 8000c18:	60bb      	str	r3, [r7, #8]
 8000c1a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c1c:	4b22      	ldr	r3, [pc, #136]	; (8000ca8 <MX_GPIO_Init+0xd0>)
 8000c1e:	699b      	ldr	r3, [r3, #24]
 8000c20:	4a21      	ldr	r2, [pc, #132]	; (8000ca8 <MX_GPIO_Init+0xd0>)
 8000c22:	f043 0304 	orr.w	r3, r3, #4
 8000c26:	6193      	str	r3, [r2, #24]
 8000c28:	4b1f      	ldr	r3, [pc, #124]	; (8000ca8 <MX_GPIO_Init+0xd0>)
 8000c2a:	699b      	ldr	r3, [r3, #24]
 8000c2c:	f003 0304 	and.w	r3, r3, #4
 8000c30:	607b      	str	r3, [r7, #4]
 8000c32:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c34:	4b1c      	ldr	r3, [pc, #112]	; (8000ca8 <MX_GPIO_Init+0xd0>)
 8000c36:	699b      	ldr	r3, [r3, #24]
 8000c38:	4a1b      	ldr	r2, [pc, #108]	; (8000ca8 <MX_GPIO_Init+0xd0>)
 8000c3a:	f043 0308 	orr.w	r3, r3, #8
 8000c3e:	6193      	str	r3, [r2, #24]
 8000c40:	4b19      	ldr	r3, [pc, #100]	; (8000ca8 <MX_GPIO_Init+0xd0>)
 8000c42:	699b      	ldr	r3, [r3, #24]
 8000c44:	f003 0308 	and.w	r3, r3, #8
 8000c48:	603b      	str	r3, [r7, #0]
 8000c4a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c52:	4816      	ldr	r0, [pc, #88]	; (8000cac <MX_GPIO_Init+0xd4>)
 8000c54:	f001 f861 	bl	8001d1a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000c58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c5c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c62:	2300      	movs	r3, #0
 8000c64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c66:	2302      	movs	r3, #2
 8000c68:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000c6a:	f107 0310 	add.w	r3, r7, #16
 8000c6e:	4619      	mov	r1, r3
 8000c70:	480e      	ldr	r0, [pc, #56]	; (8000cac <MX_GPIO_Init+0xd4>)
 8000c72:	f000 feb7 	bl	80019e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000c76:	2320      	movs	r3, #32
 8000c78:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c7a:	4b0d      	ldr	r3, [pc, #52]	; (8000cb0 <MX_GPIO_Init+0xd8>)
 8000c7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c82:	f107 0310 	add.w	r3, r7, #16
 8000c86:	4619      	mov	r1, r3
 8000c88:	480a      	ldr	r0, [pc, #40]	; (8000cb4 <MX_GPIO_Init+0xdc>)
 8000c8a:	f000 feab 	bl	80019e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000c8e:	2200      	movs	r2, #0
 8000c90:	2100      	movs	r1, #0
 8000c92:	2017      	movs	r0, #23
 8000c94:	f000 fe6f 	bl	8001976 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000c98:	2017      	movs	r0, #23
 8000c9a:	f000 fe88 	bl	80019ae <HAL_NVIC_EnableIRQ>

}
 8000c9e:	bf00      	nop
 8000ca0:	3720      	adds	r7, #32
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	40021000 	.word	0x40021000
 8000cac:	40011000 	.word	0x40011000
 8000cb0:	10210000 	.word	0x10210000
 8000cb4:	40010800 	.word	0x40010800

08000cb8 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000cbc:	4b12      	ldr	r3, [pc, #72]	; (8000d08 <MX_I2C1_Init+0x50>)
 8000cbe:	4a13      	ldr	r2, [pc, #76]	; (8000d0c <MX_I2C1_Init+0x54>)
 8000cc0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000cc2:	4b11      	ldr	r3, [pc, #68]	; (8000d08 <MX_I2C1_Init+0x50>)
 8000cc4:	4a12      	ldr	r2, [pc, #72]	; (8000d10 <MX_I2C1_Init+0x58>)
 8000cc6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000cc8:	4b0f      	ldr	r3, [pc, #60]	; (8000d08 <MX_I2C1_Init+0x50>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000cce:	4b0e      	ldr	r3, [pc, #56]	; (8000d08 <MX_I2C1_Init+0x50>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cd4:	4b0c      	ldr	r3, [pc, #48]	; (8000d08 <MX_I2C1_Init+0x50>)
 8000cd6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000cda:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cdc:	4b0a      	ldr	r3, [pc, #40]	; (8000d08 <MX_I2C1_Init+0x50>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ce2:	4b09      	ldr	r3, [pc, #36]	; (8000d08 <MX_I2C1_Init+0x50>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ce8:	4b07      	ldr	r3, [pc, #28]	; (8000d08 <MX_I2C1_Init+0x50>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cee:	4b06      	ldr	r3, [pc, #24]	; (8000d08 <MX_I2C1_Init+0x50>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cf4:	4804      	ldr	r0, [pc, #16]	; (8000d08 <MX_I2C1_Init+0x50>)
 8000cf6:	f001 f841 	bl	8001d7c <HAL_I2C_Init>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000d00:	f000 fa4a 	bl	8001198 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d04:	bf00      	nop
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	2000020c 	.word	0x2000020c
 8000d0c:	40005400 	.word	0x40005400
 8000d10:	000186a0 	.word	0x000186a0

08000d14 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000d18:	4b12      	ldr	r3, [pc, #72]	; (8000d64 <MX_I2C2_Init+0x50>)
 8000d1a:	4a13      	ldr	r2, [pc, #76]	; (8000d68 <MX_I2C2_Init+0x54>)
 8000d1c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000d1e:	4b11      	ldr	r3, [pc, #68]	; (8000d64 <MX_I2C2_Init+0x50>)
 8000d20:	4a12      	ldr	r2, [pc, #72]	; (8000d6c <MX_I2C2_Init+0x58>)
 8000d22:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d24:	4b0f      	ldr	r3, [pc, #60]	; (8000d64 <MX_I2C2_Init+0x50>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000d2a:	4b0e      	ldr	r3, [pc, #56]	; (8000d64 <MX_I2C2_Init+0x50>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d30:	4b0c      	ldr	r3, [pc, #48]	; (8000d64 <MX_I2C2_Init+0x50>)
 8000d32:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d36:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d38:	4b0a      	ldr	r3, [pc, #40]	; (8000d64 <MX_I2C2_Init+0x50>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000d3e:	4b09      	ldr	r3, [pc, #36]	; (8000d64 <MX_I2C2_Init+0x50>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d44:	4b07      	ldr	r3, [pc, #28]	; (8000d64 <MX_I2C2_Init+0x50>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d4a:	4b06      	ldr	r3, [pc, #24]	; (8000d64 <MX_I2C2_Init+0x50>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000d50:	4804      	ldr	r0, [pc, #16]	; (8000d64 <MX_I2C2_Init+0x50>)
 8000d52:	f001 f813 	bl	8001d7c <HAL_I2C_Init>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000d5c:	f000 fa1c 	bl	8001198 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000d60:	bf00      	nop
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	20000260 	.word	0x20000260
 8000d68:	40005800 	.word	0x40005800
 8000d6c:	000186a0 	.word	0x000186a0

08000d70 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b08c      	sub	sp, #48	; 0x30
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d78:	f107 031c 	add.w	r3, r7, #28
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	605a      	str	r2, [r3, #4]
 8000d82:	609a      	str	r2, [r3, #8]
 8000d84:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4a32      	ldr	r2, [pc, #200]	; (8000e54 <HAL_I2C_MspInit+0xe4>)
 8000d8c:	4293      	cmp	r3, r2
 8000d8e:	d133      	bne.n	8000df8 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d90:	4b31      	ldr	r3, [pc, #196]	; (8000e58 <HAL_I2C_MspInit+0xe8>)
 8000d92:	699b      	ldr	r3, [r3, #24]
 8000d94:	4a30      	ldr	r2, [pc, #192]	; (8000e58 <HAL_I2C_MspInit+0xe8>)
 8000d96:	f043 0308 	orr.w	r3, r3, #8
 8000d9a:	6193      	str	r3, [r2, #24]
 8000d9c:	4b2e      	ldr	r3, [pc, #184]	; (8000e58 <HAL_I2C_MspInit+0xe8>)
 8000d9e:	699b      	ldr	r3, [r3, #24]
 8000da0:	f003 0308 	and.w	r3, r3, #8
 8000da4:	61bb      	str	r3, [r7, #24]
 8000da6:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000da8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000dac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dae:	2312      	movs	r3, #18
 8000db0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000db2:	2303      	movs	r3, #3
 8000db4:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000db6:	f107 031c 	add.w	r3, r7, #28
 8000dba:	4619      	mov	r1, r3
 8000dbc:	4827      	ldr	r0, [pc, #156]	; (8000e5c <HAL_I2C_MspInit+0xec>)
 8000dbe:	f000 fe11 	bl	80019e4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8000dc2:	4b27      	ldr	r3, [pc, #156]	; (8000e60 <HAL_I2C_MspInit+0xf0>)
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dca:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000dce:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dd2:	f043 0302 	orr.w	r3, r3, #2
 8000dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000dd8:	4a21      	ldr	r2, [pc, #132]	; (8000e60 <HAL_I2C_MspInit+0xf0>)
 8000dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ddc:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000dde:	4b1e      	ldr	r3, [pc, #120]	; (8000e58 <HAL_I2C_MspInit+0xe8>)
 8000de0:	69db      	ldr	r3, [r3, #28]
 8000de2:	4a1d      	ldr	r2, [pc, #116]	; (8000e58 <HAL_I2C_MspInit+0xe8>)
 8000de4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000de8:	61d3      	str	r3, [r2, #28]
 8000dea:	4b1b      	ldr	r3, [pc, #108]	; (8000e58 <HAL_I2C_MspInit+0xe8>)
 8000dec:	69db      	ldr	r3, [r3, #28]
 8000dee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000df2:	617b      	str	r3, [r7, #20]
 8000df4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000df6:	e029      	b.n	8000e4c <HAL_I2C_MspInit+0xdc>
  else if(i2cHandle->Instance==I2C2)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a19      	ldr	r2, [pc, #100]	; (8000e64 <HAL_I2C_MspInit+0xf4>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d124      	bne.n	8000e4c <HAL_I2C_MspInit+0xdc>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e02:	4b15      	ldr	r3, [pc, #84]	; (8000e58 <HAL_I2C_MspInit+0xe8>)
 8000e04:	699b      	ldr	r3, [r3, #24]
 8000e06:	4a14      	ldr	r2, [pc, #80]	; (8000e58 <HAL_I2C_MspInit+0xe8>)
 8000e08:	f043 0308 	orr.w	r3, r3, #8
 8000e0c:	6193      	str	r3, [r2, #24]
 8000e0e:	4b12      	ldr	r3, [pc, #72]	; (8000e58 <HAL_I2C_MspInit+0xe8>)
 8000e10:	699b      	ldr	r3, [r3, #24]
 8000e12:	f003 0308 	and.w	r3, r3, #8
 8000e16:	613b      	str	r3, [r7, #16]
 8000e18:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000e1a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000e1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e20:	2312      	movs	r3, #18
 8000e22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e24:	2303      	movs	r3, #3
 8000e26:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e28:	f107 031c 	add.w	r3, r7, #28
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	480b      	ldr	r0, [pc, #44]	; (8000e5c <HAL_I2C_MspInit+0xec>)
 8000e30:	f000 fdd8 	bl	80019e4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000e34:	4b08      	ldr	r3, [pc, #32]	; (8000e58 <HAL_I2C_MspInit+0xe8>)
 8000e36:	69db      	ldr	r3, [r3, #28]
 8000e38:	4a07      	ldr	r2, [pc, #28]	; (8000e58 <HAL_I2C_MspInit+0xe8>)
 8000e3a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e3e:	61d3      	str	r3, [r2, #28]
 8000e40:	4b05      	ldr	r3, [pc, #20]	; (8000e58 <HAL_I2C_MspInit+0xe8>)
 8000e42:	69db      	ldr	r3, [r3, #28]
 8000e44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e48:	60fb      	str	r3, [r7, #12]
 8000e4a:	68fb      	ldr	r3, [r7, #12]
}
 8000e4c:	bf00      	nop
 8000e4e:	3730      	adds	r7, #48	; 0x30
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	40005400 	.word	0x40005400
 8000e58:	40021000 	.word	0x40021000
 8000e5c:	40010c00 	.word	0x40010c00
 8000e60:	40010000 	.word	0x40010000
 8000e64:	40005800 	.word	0x40005800

08000e68 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000e6c:	f000 fc26 	bl	80016bc <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000e70:	f000 f8f8 	bl	8001064 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000e74:	f7ff feb0 	bl	8000bd8 <MX_GPIO_Init>
	MX_I2C1_Init();
 8000e78:	f7ff ff1e 	bl	8000cb8 <MX_I2C1_Init>
	MX_I2C2_Init();
 8000e7c:	f7ff ff4a 	bl	8000d14 <MX_I2C2_Init>
	MX_TIM3_Init();
 8000e80:	f000 fb64 	bl	800154c <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */

	ssd1306_Init();
 8000e84:	f002 fe1c 	bl	8003ac0 <ssd1306_Init>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000e88:	213c      	movs	r1, #60	; 0x3c
 8000e8a:	4867      	ldr	r0, [pc, #412]	; (8001028 <main+0x1c0>)
 8000e8c:	f002 fc6e 	bl	800376c <HAL_TIM_Encoder_Start>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		button_handler();
 8000e90:	f000 f92e 	bl	80010f0 <button_handler>

		// Take measurements
		if (!mode || single_flag) {
 8000e94:	4b65      	ldr	r3, [pc, #404]	; (800102c <main+0x1c4>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d003      	beq.n	8000ea4 <main+0x3c>
 8000e9c:	4b64      	ldr	r3, [pc, #400]	; (8001030 <main+0x1c8>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d010      	beq.n	8000ec6 <main+0x5e>
			single_flag = 0;
 8000ea4:	4b62      	ldr	r3, [pc, #392]	; (8001030 <main+0x1c8>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	701a      	strb	r2, [r3, #0]
			Ambient = MLX90614_ReadTemp(MLX90614_DEFAULT_SA, MLX90614_TAMB);
 8000eaa:	2106      	movs	r1, #6
 8000eac:	205a      	movs	r0, #90	; 0x5a
 8000eae:	f000 f9ef 	bl	8001290 <MLX90614_ReadTemp>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	4a5f      	ldr	r2, [pc, #380]	; (8001034 <main+0x1cc>)
 8000eb6:	6013      	str	r3, [r2, #0]
			Object = MLX90614_ReadTemp(MLX90614_DEFAULT_SA, MLX90614_TOBJ1);
 8000eb8:	2107      	movs	r1, #7
 8000eba:	205a      	movs	r0, #90	; 0x5a
 8000ebc:	f000 f9e8 	bl	8001290 <MLX90614_ReadTemp>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	4a5d      	ldr	r2, [pc, #372]	; (8001038 <main+0x1d0>)
 8000ec4:	6013      	str	r3, [r2, #0]
		}
		emissivity = MLX90614_ReadReg(MLX90614_DEFAULT_SA, MLX90614_EMISSIVITY, 0) / 65535.0;
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	2124      	movs	r1, #36	; 0x24
 8000eca:	205a      	movs	r0, #90	; 0x5a
 8000ecc:	f000 f998 	bl	8001200 <MLX90614_ReadReg>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f7ff fa96 	bl	8000404 <__aeabi_i2d>
 8000ed8:	a351      	add	r3, pc, #324	; (adr r3, 8001020 <main+0x1b8>)
 8000eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ede:	f7ff fc25 	bl	800072c <__aeabi_ddiv>
 8000ee2:	4602      	mov	r2, r0
 8000ee4:	460b      	mov	r3, r1
 8000ee6:	4610      	mov	r0, r2
 8000ee8:	4619      	mov	r1, r3
 8000eea:	f7ff fded 	bl	8000ac8 <__aeabi_d2f>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	4a52      	ldr	r2, [pc, #328]	; (800103c <main+0x1d4>)
 8000ef2:	6013      	str	r3, [r2, #0]

		// Draw mode
		ssd1306_Fill(Black);
 8000ef4:	2000      	movs	r0, #0
 8000ef6:	f002 fe4d 	bl	8003b94 <ssd1306_Fill>
		if (!mode) {
 8000efa:	4b4c      	ldr	r3, [pc, #304]	; (800102c <main+0x1c4>)
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d10a      	bne.n	8000f18 <main+0xb0>
			ssd1306_SetCursor(29, 0);
 8000f02:	2100      	movs	r1, #0
 8000f04:	201d      	movs	r0, #29
 8000f06:	f002 ff8f 	bl	8003e28 <ssd1306_SetCursor>
			ssd1306_WriteString("CONTINUOUS", Font_7x10, White);
 8000f0a:	4a4d      	ldr	r2, [pc, #308]	; (8001040 <main+0x1d8>)
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	ca06      	ldmia	r2, {r1, r2}
 8000f10:	484c      	ldr	r0, [pc, #304]	; (8001044 <main+0x1dc>)
 8000f12:	f002 ff63 	bl	8003ddc <ssd1306_WriteString>
 8000f16:	e009      	b.n	8000f2c <main+0xc4>
		} else {
			ssd1306_SetCursor(43, 0);
 8000f18:	2100      	movs	r1, #0
 8000f1a:	202b      	movs	r0, #43	; 0x2b
 8000f1c:	f002 ff84 	bl	8003e28 <ssd1306_SetCursor>
			ssd1306_WriteString("SINGLE", Font_7x10, White);
 8000f20:	4a47      	ldr	r2, [pc, #284]	; (8001040 <main+0x1d8>)
 8000f22:	2301      	movs	r3, #1
 8000f24:	ca06      	ldmia	r2, {r1, r2}
 8000f26:	4848      	ldr	r0, [pc, #288]	; (8001048 <main+0x1e0>)
 8000f28:	f002 ff58 	bl	8003ddc <ssd1306_WriteString>
		}

		// Draw Object temp
		ssd1306_SetCursor(5, 13);
 8000f2c:	210d      	movs	r1, #13
 8000f2e:	2005      	movs	r0, #5
 8000f30:	f002 ff7a 	bl	8003e28 <ssd1306_SetCursor>
		ssd1306_WriteString("TO:", Font_11x18, White);
 8000f34:	4a45      	ldr	r2, [pc, #276]	; (800104c <main+0x1e4>)
 8000f36:	2301      	movs	r3, #1
 8000f38:	ca06      	ldmia	r2, {r1, r2}
 8000f3a:	4845      	ldr	r0, [pc, #276]	; (8001050 <main+0x1e8>)
 8000f3c:	f002 ff4e 	bl	8003ddc <ssd1306_WriteString>
		sprintf(buffer, "%.2f", Object);
 8000f40:	4b3d      	ldr	r3, [pc, #244]	; (8001038 <main+0x1d0>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4618      	mov	r0, r3
 8000f46:	f7ff fa6f 	bl	8000428 <__aeabi_f2d>
 8000f4a:	4602      	mov	r2, r0
 8000f4c:	460b      	mov	r3, r1
 8000f4e:	4941      	ldr	r1, [pc, #260]	; (8001054 <main+0x1ec>)
 8000f50:	4841      	ldr	r0, [pc, #260]	; (8001058 <main+0x1f0>)
 8000f52:	f003 fe7f 	bl	8004c54 <siprintf>
		ssd1306_SetCursor(40 + (8 - strlen(buffer)) * 11, 13);
 8000f56:	4840      	ldr	r0, [pc, #256]	; (8001058 <main+0x1f0>)
 8000f58:	f7ff f8fa 	bl	8000150 <strlen>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	461a      	mov	r2, r3
 8000f62:	0092      	lsls	r2, r2, #2
 8000f64:	4413      	add	r3, r2
 8000f66:	461a      	mov	r2, r3
 8000f68:	00d2      	lsls	r2, r2, #3
 8000f6a:	1ad3      	subs	r3, r2, r3
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	00d2      	lsls	r2, r2, #3
 8000f70:	1ad3      	subs	r3, r2, r3
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	3b80      	subs	r3, #128	; 0x80
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	210d      	movs	r1, #13
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f002 ff54 	bl	8003e28 <ssd1306_SetCursor>
		ssd1306_WriteString(buffer, Font_11x18, White);
 8000f80:	4a32      	ldr	r2, [pc, #200]	; (800104c <main+0x1e4>)
 8000f82:	2301      	movs	r3, #1
 8000f84:	ca06      	ldmia	r2, {r1, r2}
 8000f86:	4834      	ldr	r0, [pc, #208]	; (8001058 <main+0x1f0>)
 8000f88:	f002 ff28 	bl	8003ddc <ssd1306_WriteString>

		// Draw Ambient temp
		ssd1306_SetCursor(5, 33);
 8000f8c:	2121      	movs	r1, #33	; 0x21
 8000f8e:	2005      	movs	r0, #5
 8000f90:	f002 ff4a 	bl	8003e28 <ssd1306_SetCursor>
		ssd1306_WriteString("TA:", Font_11x18, White);
 8000f94:	4a2d      	ldr	r2, [pc, #180]	; (800104c <main+0x1e4>)
 8000f96:	2301      	movs	r3, #1
 8000f98:	ca06      	ldmia	r2, {r1, r2}
 8000f9a:	4830      	ldr	r0, [pc, #192]	; (800105c <main+0x1f4>)
 8000f9c:	f002 ff1e 	bl	8003ddc <ssd1306_WriteString>
		sprintf(buffer, "%.2f", Ambient);
 8000fa0:	4b24      	ldr	r3, [pc, #144]	; (8001034 <main+0x1cc>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff fa3f 	bl	8000428 <__aeabi_f2d>
 8000faa:	4602      	mov	r2, r0
 8000fac:	460b      	mov	r3, r1
 8000fae:	4929      	ldr	r1, [pc, #164]	; (8001054 <main+0x1ec>)
 8000fb0:	4829      	ldr	r0, [pc, #164]	; (8001058 <main+0x1f0>)
 8000fb2:	f003 fe4f 	bl	8004c54 <siprintf>
		ssd1306_SetCursor(40 + (8 - strlen(buffer)) * 11, 33);
 8000fb6:	4828      	ldr	r0, [pc, #160]	; (8001058 <main+0x1f0>)
 8000fb8:	f7ff f8ca 	bl	8000150 <strlen>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	0092      	lsls	r2, r2, #2
 8000fc4:	4413      	add	r3, r2
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	00d2      	lsls	r2, r2, #3
 8000fca:	1ad3      	subs	r3, r2, r3
 8000fcc:	461a      	mov	r2, r3
 8000fce:	00d2      	lsls	r2, r2, #3
 8000fd0:	1ad3      	subs	r3, r2, r3
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	3b80      	subs	r3, #128	; 0x80
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	2121      	movs	r1, #33	; 0x21
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f002 ff24 	bl	8003e28 <ssd1306_SetCursor>
		ssd1306_WriteString(buffer, Font_11x18, White);
 8000fe0:	4a1a      	ldr	r2, [pc, #104]	; (800104c <main+0x1e4>)
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	ca06      	ldmia	r2, {r1, r2}
 8000fe6:	481c      	ldr	r0, [pc, #112]	; (8001058 <main+0x1f0>)
 8000fe8:	f002 fef8 	bl	8003ddc <ssd1306_WriteString>

		// Draw Emissivity
		ssd1306_SetCursor(5, 53);
 8000fec:	2135      	movs	r1, #53	; 0x35
 8000fee:	2005      	movs	r0, #5
 8000ff0:	f002 ff1a 	bl	8003e28 <ssd1306_SetCursor>
		sprintf(buffer, "Emissivity: %.2f", emissivity);
 8000ff4:	4b11      	ldr	r3, [pc, #68]	; (800103c <main+0x1d4>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f7ff fa15 	bl	8000428 <__aeabi_f2d>
 8000ffe:	4602      	mov	r2, r0
 8001000:	460b      	mov	r3, r1
 8001002:	4917      	ldr	r1, [pc, #92]	; (8001060 <main+0x1f8>)
 8001004:	4814      	ldr	r0, [pc, #80]	; (8001058 <main+0x1f0>)
 8001006:	f003 fe25 	bl	8004c54 <siprintf>
		ssd1306_WriteString(buffer, Font_7x10, White);
 800100a:	4a0d      	ldr	r2, [pc, #52]	; (8001040 <main+0x1d8>)
 800100c:	2301      	movs	r3, #1
 800100e:	ca06      	ldmia	r2, {r1, r2}
 8001010:	4811      	ldr	r0, [pc, #68]	; (8001058 <main+0x1f0>)
 8001012:	f002 fee3 	bl	8003ddc <ssd1306_WriteString>

		// Finalize screen draw
		ssd1306_UpdateScreen();
 8001016:	f002 fddf 	bl	8003bd8 <ssd1306_UpdateScreen>
		button_handler();
 800101a:	e739      	b.n	8000e90 <main+0x28>
 800101c:	f3af 8000 	nop.w
 8001020:	00000000 	.word	0x00000000
 8001024:	40efffe0 	.word	0x40efffe0
 8001028:	200002e4 	.word	0x200002e4
 800102c:	200002b4 	.word	0x200002b4
 8001030:	200002b5 	.word	0x200002b5
 8001034:	200002b8 	.word	0x200002b8
 8001038:	200002bc 	.word	0x200002bc
 800103c:	200002c0 	.word	0x200002c0
 8001040:	2000000c 	.word	0x2000000c
 8001044:	08008798 	.word	0x08008798
 8001048:	080087a4 	.word	0x080087a4
 800104c:	20000014 	.word	0x20000014
 8001050:	080087ac 	.word	0x080087ac
 8001054:	080087b0 	.word	0x080087b0
 8001058:	200002c4 	.word	0x200002c4
 800105c:	080087b8 	.word	0x080087b8
 8001060:	080087bc 	.word	0x080087bc

08001064 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001064:	b580      	push	{r7, lr}
 8001066:	b090      	sub	sp, #64	; 0x40
 8001068:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800106a:	f107 0318 	add.w	r3, r7, #24
 800106e:	2228      	movs	r2, #40	; 0x28
 8001070:	2100      	movs	r1, #0
 8001072:	4618      	mov	r0, r3
 8001074:	f002 ff74 	bl	8003f60 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001078:	1d3b      	adds	r3, r7, #4
 800107a:	2200      	movs	r2, #0
 800107c:	601a      	str	r2, [r3, #0]
 800107e:	605a      	str	r2, [r3, #4]
 8001080:	609a      	str	r2, [r3, #8]
 8001082:	60da      	str	r2, [r3, #12]
 8001084:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001086:	2301      	movs	r3, #1
 8001088:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800108a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800108e:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001090:	2300      	movs	r3, #0
 8001092:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001094:	2301      	movs	r3, #1
 8001096:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001098:	2302      	movs	r3, #2
 800109a:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800109c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010a0:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80010a2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80010a6:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80010a8:	f107 0318 	add.w	r3, r7, #24
 80010ac:	4618      	mov	r0, r3
 80010ae:	f001 febf 	bl	8002e30 <HAL_RCC_OscConfig>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <SystemClock_Config+0x58>
		Error_Handler();
 80010b8:	f000 f86e 	bl	8001198 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80010bc:	230f      	movs	r3, #15
 80010be:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010c0:	2302      	movs	r3, #2
 80010c2:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010c4:	2300      	movs	r3, #0
 80010c6:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010cc:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010ce:	2300      	movs	r3, #0
 80010d0:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80010d2:	1d3b      	adds	r3, r7, #4
 80010d4:	2102      	movs	r1, #2
 80010d6:	4618      	mov	r0, r3
 80010d8:	f002 f92c 	bl	8003334 <HAL_RCC_ClockConfig>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <SystemClock_Config+0x82>
		Error_Handler();
 80010e2:	f000 f859 	bl	8001198 <Error_Handler>
	}
}
 80010e6:	bf00      	nop
 80010e8:	3740      	adds	r7, #64	; 0x40
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
	...

080010f0 <button_handler>:

/* USER CODE BEGIN 4 */

void button_handler() {
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
	uint8_t button_now = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5);
 80010f6:	2120      	movs	r1, #32
 80010f8:	4817      	ldr	r0, [pc, #92]	; (8001158 <button_handler+0x68>)
 80010fa:	f000 fdf7 	bl	8001cec <HAL_GPIO_ReadPin>
 80010fe:	4603      	mov	r3, r0
 8001100:	71fb      	strb	r3, [r7, #7]
	static uint32_t time_held = 0;
	static uint8_t run_once = 0;

	if (button_now) {
 8001102:	79fb      	ldrb	r3, [r7, #7]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d008      	beq.n	800111a <button_handler+0x2a>
		// button up
		time_held = HAL_GetTick();
 8001108:	f000 fb30 	bl	800176c <HAL_GetTick>
 800110c:	4603      	mov	r3, r0
 800110e:	4a13      	ldr	r2, [pc, #76]	; (800115c <button_handler+0x6c>)
 8001110:	6013      	str	r3, [r2, #0]
		run_once = 1;
 8001112:	4b13      	ldr	r3, [pc, #76]	; (8001160 <button_handler+0x70>)
 8001114:	2201      	movs	r2, #1
 8001116:	701a      	strb	r2, [r3, #0]
		if (HAL_GetTick() - time_held > 500 && run_once) {
			mode = !mode;
			run_once = 0;
		}
	}
}
 8001118:	e019      	b.n	800114e <button_handler+0x5e>
		if (HAL_GetTick() - time_held > 500 && run_once) {
 800111a:	f000 fb27 	bl	800176c <HAL_GetTick>
 800111e:	4602      	mov	r2, r0
 8001120:	4b0e      	ldr	r3, [pc, #56]	; (800115c <button_handler+0x6c>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	1ad3      	subs	r3, r2, r3
 8001126:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800112a:	d910      	bls.n	800114e <button_handler+0x5e>
 800112c:	4b0c      	ldr	r3, [pc, #48]	; (8001160 <button_handler+0x70>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d00c      	beq.n	800114e <button_handler+0x5e>
			mode = !mode;
 8001134:	4b0b      	ldr	r3, [pc, #44]	; (8001164 <button_handler+0x74>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	2b00      	cmp	r3, #0
 800113a:	bf0c      	ite	eq
 800113c:	2301      	moveq	r3, #1
 800113e:	2300      	movne	r3, #0
 8001140:	b2db      	uxtb	r3, r3
 8001142:	461a      	mov	r2, r3
 8001144:	4b07      	ldr	r3, [pc, #28]	; (8001164 <button_handler+0x74>)
 8001146:	701a      	strb	r2, [r3, #0]
			run_once = 0;
 8001148:	4b05      	ldr	r3, [pc, #20]	; (8001160 <button_handler+0x70>)
 800114a:	2200      	movs	r2, #0
 800114c:	701a      	strb	r2, [r3, #0]
}
 800114e:	bf00      	nop
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	40010800 	.word	0x40010800
 800115c:	200002d8 	.word	0x200002d8
 8001160:	200002dc 	.word	0x200002dc
 8001164:	200002b4 	.word	0x200002b4

08001168 <HAL_GPIO_EXTI_Callback>:
		__HAL_TIM_SET_COUNTER(&htim3, 100);
		return;
	}
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	4603      	mov	r3, r0
 8001170:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_5) {
 8001172:	88fb      	ldrh	r3, [r7, #6]
 8001174:	2b20      	cmp	r3, #32
 8001176:	d106      	bne.n	8001186 <HAL_GPIO_EXTI_Callback+0x1e>
		if (mode) {
 8001178:	4b05      	ldr	r3, [pc, #20]	; (8001190 <HAL_GPIO_EXTI_Callback+0x28>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d002      	beq.n	8001186 <HAL_GPIO_EXTI_Callback+0x1e>
			single_flag = 1;
 8001180:	4b04      	ldr	r3, [pc, #16]	; (8001194 <HAL_GPIO_EXTI_Callback+0x2c>)
 8001182:	2201      	movs	r2, #1
 8001184:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8001186:	bf00      	nop
 8001188:	370c      	adds	r7, #12
 800118a:	46bd      	mov	sp, r7
 800118c:	bc80      	pop	{r7}
 800118e:	4770      	bx	lr
 8001190:	200002b4 	.word	0x200002b4
 8001194:	200002b5 	.word	0x200002b5

08001198 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800119c:	b672      	cpsid	i
}
 800119e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80011a0:	e7fe      	b.n	80011a0 <Error_Handler+0x8>
	...

080011a4 <CRC8_Calc>:
		0x5f, 0x58, 0x4d, 0x4a, 0x43, 0x44, 0x19, 0x1e, 0x17, 0x10, 0x05, 0x02, 0x0b, 0x0c, 0x21, 0x26, 0x2f, 0x28, 0x3d, 0x3a, 0x33, 0x34, 0x4e, 0x49, 0x40,
		0x47, 0x52, 0x55, 0x5c, 0x5b, 0x76, 0x71, 0x78, 0x7f, 0x6a, 0x6d, 0x64, 0x63, 0x3e, 0x39, 0x30, 0x37, 0x22, 0x25, 0x2c, 0x2b, 0x06, 0x01, 0x08, 0x0f,
		0x1a, 0x1d, 0x14, 0x13, 0xae, 0xa9, 0xa0, 0xa7, 0xb2, 0xb5, 0xbc, 0xbb, 0x96, 0x91, 0x98, 0x9f, 0x8a, 0x8d, 0x84, 0x83, 0xde, 0xd9, 0xd0, 0xd7, 0xc2,
		0xc5, 0xcc, 0xcb, 0xe6, 0xe1, 0xe8, 0xef, 0xfa, 0xfd, 0xf4, 0xf3 };

uint8_t CRC8_Calc(uint8_t *p, uint8_t len) {
 80011a4:	b480      	push	{r7}
 80011a6:	b085      	sub	sp, #20
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	460b      	mov	r3, r1
 80011ae:	70fb      	strb	r3, [r7, #3]
	uint16_t i;
	uint16_t crc = 0x0;
 80011b0:	2300      	movs	r3, #0
 80011b2:	81fb      	strh	r3, [r7, #14]

	while (len--) {
 80011b4:	e015      	b.n	80011e2 <CRC8_Calc+0x3e>
		i = (crc ^ *p++) & 0xFF;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	1c5a      	adds	r2, r3, #1
 80011ba:	607a      	str	r2, [r7, #4]
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	b29a      	uxth	r2, r3
 80011c0:	89fb      	ldrh	r3, [r7, #14]
 80011c2:	4053      	eors	r3, r2
 80011c4:	b29b      	uxth	r3, r3
 80011c6:	b2db      	uxtb	r3, r3
 80011c8:	81bb      	strh	r3, [r7, #12]
		crc = (crc_table[i] ^ (crc << 8)) & 0xFF;
 80011ca:	89bb      	ldrh	r3, [r7, #12]
 80011cc:	4a0b      	ldr	r2, [pc, #44]	; (80011fc <CRC8_Calc+0x58>)
 80011ce:	5cd3      	ldrb	r3, [r2, r3]
 80011d0:	b21a      	sxth	r2, r3
 80011d2:	89fb      	ldrh	r3, [r7, #14]
 80011d4:	021b      	lsls	r3, r3, #8
 80011d6:	b21b      	sxth	r3, r3
 80011d8:	4053      	eors	r3, r2
 80011da:	b21b      	sxth	r3, r3
 80011dc:	b29b      	uxth	r3, r3
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	81fb      	strh	r3, [r7, #14]
	while (len--) {
 80011e2:	78fb      	ldrb	r3, [r7, #3]
 80011e4:	1e5a      	subs	r2, r3, #1
 80011e6:	70fa      	strb	r2, [r7, #3]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d1e4      	bne.n	80011b6 <CRC8_Calc+0x12>
	}

	return crc & 0xFF;
 80011ec:	89fb      	ldrh	r3, [r7, #14]
 80011ee:	b2db      	uxtb	r3, r3
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	3714      	adds	r7, #20
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bc80      	pop	{r7}
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	080087d0 	.word	0x080087d0

08001200 <MLX90614_ReadReg>:
	HAL_I2C_Master_Transmit(&hi2c1, (devAddr << 1), i2cdata, 4, 0xFFFF);
	HAL_Delay(10);
	MLX90614_SendDebugMsg(MLX90614_DBG_MSG_W, devAddr, i2cdata[0], data, i2cdata[3], 0x00);
}

uint16_t MLX90614_ReadReg(uint8_t devAddr, uint8_t regAddr, uint8_t dbg_lvl) {
 8001200:	b580      	push	{r7, lr}
 8001202:	b08a      	sub	sp, #40	; 0x28
 8001204:	af04      	add	r7, sp, #16
 8001206:	4603      	mov	r3, r0
 8001208:	71fb      	strb	r3, [r7, #7]
 800120a:	460b      	mov	r3, r1
 800120c:	71bb      	strb	r3, [r7, #6]
 800120e:	4613      	mov	r3, r2
 8001210:	717b      	strb	r3, [r7, #5]
	uint16_t data;
	uint8_t in_buff[3], crc_buff[5], crc;

	HAL_I2C_Mem_Read(&hi2c1, (devAddr << 1), regAddr, 1, in_buff, 3, 100);
 8001212:	79fb      	ldrb	r3, [r7, #7]
 8001214:	b29b      	uxth	r3, r3
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	b299      	uxth	r1, r3
 800121a:	79bb      	ldrb	r3, [r7, #6]
 800121c:	b29a      	uxth	r2, r3
 800121e:	2364      	movs	r3, #100	; 0x64
 8001220:	9302      	str	r3, [sp, #8]
 8001222:	2303      	movs	r3, #3
 8001224:	9301      	str	r3, [sp, #4]
 8001226:	f107 0310 	add.w	r3, r7, #16
 800122a:	9300      	str	r3, [sp, #0]
 800122c:	2301      	movs	r3, #1
 800122e:	4817      	ldr	r0, [pc, #92]	; (800128c <MLX90614_ReadReg+0x8c>)
 8001230:	f000 ffe2 	bl	80021f8 <HAL_I2C_Mem_Read>

	// For a read word command, in the crc8 calculus, you have to include [SA_W, Command, SA_R, LSB, MSB]
	crc_buff[0] = (devAddr << 1);
 8001234:	79fb      	ldrb	r3, [r7, #7]
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	b2db      	uxtb	r3, r3
 800123a:	723b      	strb	r3, [r7, #8]
	crc_buff[1] = regAddr;
 800123c:	79bb      	ldrb	r3, [r7, #6]
 800123e:	727b      	strb	r3, [r7, #9]
	crc_buff[2] = (devAddr << 1) + 1;
 8001240:	79fb      	ldrb	r3, [r7, #7]
 8001242:	005b      	lsls	r3, r3, #1
 8001244:	b2db      	uxtb	r3, r3
 8001246:	3301      	adds	r3, #1
 8001248:	b2db      	uxtb	r3, r3
 800124a:	72bb      	strb	r3, [r7, #10]
	crc_buff[3] = in_buff[0];
 800124c:	7c3b      	ldrb	r3, [r7, #16]
 800124e:	72fb      	strb	r3, [r7, #11]
	crc_buff[4] = in_buff[1];
 8001250:	7c7b      	ldrb	r3, [r7, #17]
 8001252:	733b      	strb	r3, [r7, #12]
	crc = CRC8_Calc(crc_buff, 5);
 8001254:	f107 0308 	add.w	r3, r7, #8
 8001258:	2105      	movs	r1, #5
 800125a:	4618      	mov	r0, r3
 800125c:	f7ff ffa2 	bl	80011a4 <CRC8_Calc>
 8001260:	4603      	mov	r3, r0
 8001262:	757b      	strb	r3, [r7, #21]

	data = (in_buff[1] << 8 | in_buff[0]);
 8001264:	7c7b      	ldrb	r3, [r7, #17]
 8001266:	021b      	lsls	r3, r3, #8
 8001268:	b21a      	sxth	r2, r3
 800126a:	7c3b      	ldrb	r3, [r7, #16]
 800126c:	b21b      	sxth	r3, r3
 800126e:	4313      	orrs	r3, r2
 8001270:	b21b      	sxth	r3, r3
 8001272:	82fb      	strh	r3, [r7, #22]

	//TODO: implement CRC8 check on data received
	if (crc != in_buff[2]) {
 8001274:	7cbb      	ldrb	r3, [r7, #18]
 8001276:	7d7a      	ldrb	r2, [r7, #21]
 8001278:	429a      	cmp	r2, r3
 800127a:	d001      	beq.n	8001280 <MLX90614_ReadReg+0x80>
		data = 0x0000;
 800127c:	2300      	movs	r3, #0
 800127e:	82fb      	strh	r3, [r7, #22]
	}
//	if (dbg_lvl == MLX90614_DBG_ON)
//		MLX90614_SendDebugMsg(MLX90614_DBG_MSG_R, devAddr, regAddr, data, in_buff[2], crc);

	//HAL_Delay(1);
	return data;
 8001280:	8afb      	ldrh	r3, [r7, #22]
}
 8001282:	4618      	mov	r0, r3
 8001284:	3718      	adds	r7, #24
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	2000020c 	.word	0x2000020c

08001290 <MLX90614_ReadTemp>:

float MLX90614_ReadTemp(uint8_t devAddr, uint8_t regAddr) {
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	4603      	mov	r3, r0
 8001298:	460a      	mov	r2, r1
 800129a:	71fb      	strb	r3, [r7, #7]
 800129c:	4613      	mov	r3, r2
 800129e:	71bb      	strb	r3, [r7, #6]
	float temp;
	uint16_t data;

	data = MLX90614_ReadReg(devAddr, regAddr, MLX90614_DBG_OFF);
 80012a0:	79b9      	ldrb	r1, [r7, #6]
 80012a2:	79fb      	ldrb	r3, [r7, #7]
 80012a4:	2200      	movs	r2, #0
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff ffaa 	bl	8001200 <MLX90614_ReadReg>
 80012ac:	4603      	mov	r3, r0
 80012ae:	81fb      	strh	r3, [r7, #14]
	temp = data * 0.02 - 273.15;
 80012b0:	89fb      	ldrh	r3, [r7, #14]
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff f8a6 	bl	8000404 <__aeabi_i2d>
 80012b8:	a30d      	add	r3, pc, #52	; (adr r3, 80012f0 <MLX90614_ReadTemp+0x60>)
 80012ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012be:	f7ff f90b 	bl	80004d8 <__aeabi_dmul>
 80012c2:	4602      	mov	r2, r0
 80012c4:	460b      	mov	r3, r1
 80012c6:	4610      	mov	r0, r2
 80012c8:	4619      	mov	r1, r3
 80012ca:	a30b      	add	r3, pc, #44	; (adr r3, 80012f8 <MLX90614_ReadTemp+0x68>)
 80012cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012d0:	f7fe ff4a 	bl	8000168 <__aeabi_dsub>
 80012d4:	4602      	mov	r2, r0
 80012d6:	460b      	mov	r3, r1
 80012d8:	4610      	mov	r0, r2
 80012da:	4619      	mov	r1, r3
 80012dc:	f7ff fbf4 	bl	8000ac8 <__aeabi_d2f>
 80012e0:	4603      	mov	r3, r0
 80012e2:	60bb      	str	r3, [r7, #8]

	return temp;
 80012e4:	68bb      	ldr	r3, [r7, #8]
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3710      	adds	r7, #16
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	47ae147b 	.word	0x47ae147b
 80012f4:	3f947ae1 	.word	0x3f947ae1
 80012f8:	66666666 	.word	0x66666666
 80012fc:	40711266 	.word	0x40711266

08001300 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001300:	b480      	push	{r7}
 8001302:	b085      	sub	sp, #20
 8001304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001306:	4b15      	ldr	r3, [pc, #84]	; (800135c <HAL_MspInit+0x5c>)
 8001308:	699b      	ldr	r3, [r3, #24]
 800130a:	4a14      	ldr	r2, [pc, #80]	; (800135c <HAL_MspInit+0x5c>)
 800130c:	f043 0301 	orr.w	r3, r3, #1
 8001310:	6193      	str	r3, [r2, #24]
 8001312:	4b12      	ldr	r3, [pc, #72]	; (800135c <HAL_MspInit+0x5c>)
 8001314:	699b      	ldr	r3, [r3, #24]
 8001316:	f003 0301 	and.w	r3, r3, #1
 800131a:	60bb      	str	r3, [r7, #8]
 800131c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800131e:	4b0f      	ldr	r3, [pc, #60]	; (800135c <HAL_MspInit+0x5c>)
 8001320:	69db      	ldr	r3, [r3, #28]
 8001322:	4a0e      	ldr	r2, [pc, #56]	; (800135c <HAL_MspInit+0x5c>)
 8001324:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001328:	61d3      	str	r3, [r2, #28]
 800132a:	4b0c      	ldr	r3, [pc, #48]	; (800135c <HAL_MspInit+0x5c>)
 800132c:	69db      	ldr	r3, [r3, #28]
 800132e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001332:	607b      	str	r3, [r7, #4]
 8001334:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001336:	4b0a      	ldr	r3, [pc, #40]	; (8001360 <HAL_MspInit+0x60>)
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	60fb      	str	r3, [r7, #12]
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001342:	60fb      	str	r3, [r7, #12]
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800134a:	60fb      	str	r3, [r7, #12]
 800134c:	4a04      	ldr	r2, [pc, #16]	; (8001360 <HAL_MspInit+0x60>)
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001352:	bf00      	nop
 8001354:	3714      	adds	r7, #20
 8001356:	46bd      	mov	sp, r7
 8001358:	bc80      	pop	{r7}
 800135a:	4770      	bx	lr
 800135c:	40021000 	.word	0x40021000
 8001360:	40010000 	.word	0x40010000

08001364 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001368:	e7fe      	b.n	8001368 <NMI_Handler+0x4>

0800136a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800136a:	b480      	push	{r7}
 800136c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800136e:	e7fe      	b.n	800136e <HardFault_Handler+0x4>

08001370 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001374:	e7fe      	b.n	8001374 <MemManage_Handler+0x4>

08001376 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001376:	b480      	push	{r7}
 8001378:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800137a:	e7fe      	b.n	800137a <BusFault_Handler+0x4>

0800137c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001380:	e7fe      	b.n	8001380 <UsageFault_Handler+0x4>

08001382 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001382:	b480      	push	{r7}
 8001384:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001386:	bf00      	nop
 8001388:	46bd      	mov	sp, r7
 800138a:	bc80      	pop	{r7}
 800138c:	4770      	bx	lr

0800138e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800138e:	b480      	push	{r7}
 8001390:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001392:	bf00      	nop
 8001394:	46bd      	mov	sp, r7
 8001396:	bc80      	pop	{r7}
 8001398:	4770      	bx	lr

0800139a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800139a:	b480      	push	{r7}
 800139c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800139e:	bf00      	nop
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bc80      	pop	{r7}
 80013a4:	4770      	bx	lr

080013a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013a6:	b580      	push	{r7, lr}
 80013a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013aa:	f000 f9cd 	bl	8001748 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013ae:	bf00      	nop
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80013b2:	b580      	push	{r7, lr}
 80013b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80013b6:	2020      	movs	r0, #32
 80013b8:	f000 fcc8 	bl	8001d4c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80013bc:	bf00      	nop
 80013be:	bd80      	pop	{r7, pc}

080013c0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  return 1;
 80013c4:	2301      	movs	r3, #1
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bc80      	pop	{r7}
 80013cc:	4770      	bx	lr

080013ce <_kill>:

int _kill(int pid, int sig)
{
 80013ce:	b580      	push	{r7, lr}
 80013d0:	b082      	sub	sp, #8
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	6078      	str	r0, [r7, #4]
 80013d6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80013d8:	f002 fd70 	bl	8003ebc <__errno>
 80013dc:	4603      	mov	r3, r0
 80013de:	2216      	movs	r2, #22
 80013e0:	601a      	str	r2, [r3, #0]
  return -1;
 80013e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}

080013ee <_exit>:

void _exit (int status)
{
 80013ee:	b580      	push	{r7, lr}
 80013f0:	b082      	sub	sp, #8
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80013f6:	f04f 31ff 	mov.w	r1, #4294967295
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	f7ff ffe7 	bl	80013ce <_kill>
  while (1) {}    /* Make sure we hang here */
 8001400:	e7fe      	b.n	8001400 <_exit+0x12>

08001402 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001402:	b580      	push	{r7, lr}
 8001404:	b086      	sub	sp, #24
 8001406:	af00      	add	r7, sp, #0
 8001408:	60f8      	str	r0, [r7, #12]
 800140a:	60b9      	str	r1, [r7, #8]
 800140c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800140e:	2300      	movs	r3, #0
 8001410:	617b      	str	r3, [r7, #20]
 8001412:	e00a      	b.n	800142a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001414:	f3af 8000 	nop.w
 8001418:	4601      	mov	r1, r0
 800141a:	68bb      	ldr	r3, [r7, #8]
 800141c:	1c5a      	adds	r2, r3, #1
 800141e:	60ba      	str	r2, [r7, #8]
 8001420:	b2ca      	uxtb	r2, r1
 8001422:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	3301      	adds	r3, #1
 8001428:	617b      	str	r3, [r7, #20]
 800142a:	697a      	ldr	r2, [r7, #20]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	429a      	cmp	r2, r3
 8001430:	dbf0      	blt.n	8001414 <_read+0x12>
  }

  return len;
 8001432:	687b      	ldr	r3, [r7, #4]
}
 8001434:	4618      	mov	r0, r3
 8001436:	3718      	adds	r7, #24
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}

0800143c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b086      	sub	sp, #24
 8001440:	af00      	add	r7, sp, #0
 8001442:	60f8      	str	r0, [r7, #12]
 8001444:	60b9      	str	r1, [r7, #8]
 8001446:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001448:	2300      	movs	r3, #0
 800144a:	617b      	str	r3, [r7, #20]
 800144c:	e009      	b.n	8001462 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800144e:	68bb      	ldr	r3, [r7, #8]
 8001450:	1c5a      	adds	r2, r3, #1
 8001452:	60ba      	str	r2, [r7, #8]
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	4618      	mov	r0, r3
 8001458:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	3301      	adds	r3, #1
 8001460:	617b      	str	r3, [r7, #20]
 8001462:	697a      	ldr	r2, [r7, #20]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	429a      	cmp	r2, r3
 8001468:	dbf1      	blt.n	800144e <_write+0x12>
  }
  return len;
 800146a:	687b      	ldr	r3, [r7, #4]
}
 800146c:	4618      	mov	r0, r3
 800146e:	3718      	adds	r7, #24
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}

08001474 <_close>:

int _close(int file)
{
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800147c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001480:	4618      	mov	r0, r3
 8001482:	370c      	adds	r7, #12
 8001484:	46bd      	mov	sp, r7
 8001486:	bc80      	pop	{r7}
 8001488:	4770      	bx	lr

0800148a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800148a:	b480      	push	{r7}
 800148c:	b083      	sub	sp, #12
 800148e:	af00      	add	r7, sp, #0
 8001490:	6078      	str	r0, [r7, #4]
 8001492:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800149a:	605a      	str	r2, [r3, #4]
  return 0;
 800149c:	2300      	movs	r3, #0
}
 800149e:	4618      	mov	r0, r3
 80014a0:	370c      	adds	r7, #12
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bc80      	pop	{r7}
 80014a6:	4770      	bx	lr

080014a8 <_isatty>:

int _isatty(int file)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80014b0:	2301      	movs	r3, #1
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	370c      	adds	r7, #12
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bc80      	pop	{r7}
 80014ba:	4770      	bx	lr

080014bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014bc:	b480      	push	{r7}
 80014be:	b085      	sub	sp, #20
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	60f8      	str	r0, [r7, #12]
 80014c4:	60b9      	str	r1, [r7, #8]
 80014c6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80014c8:	2300      	movs	r3, #0
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3714      	adds	r7, #20
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bc80      	pop	{r7}
 80014d2:	4770      	bx	lr

080014d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b086      	sub	sp, #24
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014dc:	4a14      	ldr	r2, [pc, #80]	; (8001530 <_sbrk+0x5c>)
 80014de:	4b15      	ldr	r3, [pc, #84]	; (8001534 <_sbrk+0x60>)
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014e8:	4b13      	ldr	r3, [pc, #76]	; (8001538 <_sbrk+0x64>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d102      	bne.n	80014f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014f0:	4b11      	ldr	r3, [pc, #68]	; (8001538 <_sbrk+0x64>)
 80014f2:	4a12      	ldr	r2, [pc, #72]	; (800153c <_sbrk+0x68>)
 80014f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014f6:	4b10      	ldr	r3, [pc, #64]	; (8001538 <_sbrk+0x64>)
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4413      	add	r3, r2
 80014fe:	693a      	ldr	r2, [r7, #16]
 8001500:	429a      	cmp	r2, r3
 8001502:	d207      	bcs.n	8001514 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001504:	f002 fcda 	bl	8003ebc <__errno>
 8001508:	4603      	mov	r3, r0
 800150a:	220c      	movs	r2, #12
 800150c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800150e:	f04f 33ff 	mov.w	r3, #4294967295
 8001512:	e009      	b.n	8001528 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001514:	4b08      	ldr	r3, [pc, #32]	; (8001538 <_sbrk+0x64>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800151a:	4b07      	ldr	r3, [pc, #28]	; (8001538 <_sbrk+0x64>)
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	4413      	add	r3, r2
 8001522:	4a05      	ldr	r2, [pc, #20]	; (8001538 <_sbrk+0x64>)
 8001524:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001526:	68fb      	ldr	r3, [r7, #12]
}
 8001528:	4618      	mov	r0, r3
 800152a:	3718      	adds	r7, #24
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	20005000 	.word	0x20005000
 8001534:	00000400 	.word	0x00000400
 8001538:	200002e0 	.word	0x200002e0
 800153c:	20000748 	.word	0x20000748

08001540 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001544:	bf00      	nop
 8001546:	46bd      	mov	sp, r7
 8001548:	bc80      	pop	{r7}
 800154a:	4770      	bx	lr

0800154c <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b08c      	sub	sp, #48	; 0x30
 8001550:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001552:	f107 030c 	add.w	r3, r7, #12
 8001556:	2224      	movs	r2, #36	; 0x24
 8001558:	2100      	movs	r1, #0
 800155a:	4618      	mov	r0, r3
 800155c:	f002 fd00 	bl	8003f60 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001560:	1d3b      	adds	r3, r7, #4
 8001562:	2200      	movs	r2, #0
 8001564:	601a      	str	r2, [r3, #0]
 8001566:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001568:	4b20      	ldr	r3, [pc, #128]	; (80015ec <MX_TIM3_Init+0xa0>)
 800156a:	4a21      	ldr	r2, [pc, #132]	; (80015f0 <MX_TIM3_Init+0xa4>)
 800156c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4-1;
 800156e:	4b1f      	ldr	r3, [pc, #124]	; (80015ec <MX_TIM3_Init+0xa0>)
 8001570:	2203      	movs	r2, #3
 8001572:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001574:	4b1d      	ldr	r3, [pc, #116]	; (80015ec <MX_TIM3_Init+0xa0>)
 8001576:	2200      	movs	r2, #0
 8001578:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800157a:	4b1c      	ldr	r3, [pc, #112]	; (80015ec <MX_TIM3_Init+0xa0>)
 800157c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001580:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001582:	4b1a      	ldr	r3, [pc, #104]	; (80015ec <MX_TIM3_Init+0xa0>)
 8001584:	2200      	movs	r2, #0
 8001586:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001588:	4b18      	ldr	r3, [pc, #96]	; (80015ec <MX_TIM3_Init+0xa0>)
 800158a:	2200      	movs	r2, #0
 800158c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800158e:	2303      	movs	r3, #3
 8001590:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001592:	2300      	movs	r3, #0
 8001594:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001596:	2301      	movs	r3, #1
 8001598:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800159a:	2300      	movs	r3, #0
 800159c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800159e:	2300      	movs	r3, #0
 80015a0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80015a2:	2300      	movs	r3, #0
 80015a4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80015a6:	2301      	movs	r3, #1
 80015a8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80015aa:	2300      	movs	r3, #0
 80015ac:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80015ae:	2300      	movs	r3, #0
 80015b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80015b2:	f107 030c 	add.w	r3, r7, #12
 80015b6:	4619      	mov	r1, r3
 80015b8:	480c      	ldr	r0, [pc, #48]	; (80015ec <MX_TIM3_Init+0xa0>)
 80015ba:	f002 f835 	bl	8003628 <HAL_TIM_Encoder_Init>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80015c4:	f7ff fde8 	bl	8001198 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015c8:	2300      	movs	r3, #0
 80015ca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015cc:	2300      	movs	r3, #0
 80015ce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80015d0:	1d3b      	adds	r3, r7, #4
 80015d2:	4619      	mov	r1, r3
 80015d4:	4805      	ldr	r0, [pc, #20]	; (80015ec <MX_TIM3_Init+0xa0>)
 80015d6:	f002 f9dd 	bl	8003994 <HAL_TIMEx_MasterConfigSynchronization>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80015e0:	f7ff fdda 	bl	8001198 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80015e4:	bf00      	nop
 80015e6:	3730      	adds	r7, #48	; 0x30
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	200002e4 	.word	0x200002e4
 80015f0:	40000400 	.word	0x40000400

080015f4 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b088      	sub	sp, #32
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015fc:	f107 0310 	add.w	r3, r7, #16
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]
 8001604:	605a      	str	r2, [r3, #4]
 8001606:	609a      	str	r2, [r3, #8]
 8001608:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM3)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a15      	ldr	r2, [pc, #84]	; (8001664 <HAL_TIM_Encoder_MspInit+0x70>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d123      	bne.n	800165c <HAL_TIM_Encoder_MspInit+0x68>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001614:	4b14      	ldr	r3, [pc, #80]	; (8001668 <HAL_TIM_Encoder_MspInit+0x74>)
 8001616:	69db      	ldr	r3, [r3, #28]
 8001618:	4a13      	ldr	r2, [pc, #76]	; (8001668 <HAL_TIM_Encoder_MspInit+0x74>)
 800161a:	f043 0302 	orr.w	r3, r3, #2
 800161e:	61d3      	str	r3, [r2, #28]
 8001620:	4b11      	ldr	r3, [pc, #68]	; (8001668 <HAL_TIM_Encoder_MspInit+0x74>)
 8001622:	69db      	ldr	r3, [r3, #28]
 8001624:	f003 0302 	and.w	r3, r3, #2
 8001628:	60fb      	str	r3, [r7, #12]
 800162a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800162c:	4b0e      	ldr	r3, [pc, #56]	; (8001668 <HAL_TIM_Encoder_MspInit+0x74>)
 800162e:	699b      	ldr	r3, [r3, #24]
 8001630:	4a0d      	ldr	r2, [pc, #52]	; (8001668 <HAL_TIM_Encoder_MspInit+0x74>)
 8001632:	f043 0304 	orr.w	r3, r3, #4
 8001636:	6193      	str	r3, [r2, #24]
 8001638:	4b0b      	ldr	r3, [pc, #44]	; (8001668 <HAL_TIM_Encoder_MspInit+0x74>)
 800163a:	699b      	ldr	r3, [r3, #24]
 800163c:	f003 0304 	and.w	r3, r3, #4
 8001640:	60bb      	str	r3, [r7, #8]
 8001642:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001644:	23c0      	movs	r3, #192	; 0xc0
 8001646:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001648:	2300      	movs	r3, #0
 800164a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164c:	2300      	movs	r3, #0
 800164e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001650:	f107 0310 	add.w	r3, r7, #16
 8001654:	4619      	mov	r1, r3
 8001656:	4805      	ldr	r0, [pc, #20]	; (800166c <HAL_TIM_Encoder_MspInit+0x78>)
 8001658:	f000 f9c4 	bl	80019e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800165c:	bf00      	nop
 800165e:	3720      	adds	r7, #32
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	40000400 	.word	0x40000400
 8001668:	40021000 	.word	0x40021000
 800166c:	40010800 	.word	0x40010800

08001670 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001670:	f7ff ff66 	bl	8001540 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001674:	480b      	ldr	r0, [pc, #44]	; (80016a4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001676:	490c      	ldr	r1, [pc, #48]	; (80016a8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001678:	4a0c      	ldr	r2, [pc, #48]	; (80016ac <LoopFillZerobss+0x16>)
  movs r3, #0
 800167a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800167c:	e002      	b.n	8001684 <LoopCopyDataInit>

0800167e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800167e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001680:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001682:	3304      	adds	r3, #4

08001684 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001684:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001686:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001688:	d3f9      	bcc.n	800167e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800168a:	4a09      	ldr	r2, [pc, #36]	; (80016b0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800168c:	4c09      	ldr	r4, [pc, #36]	; (80016b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800168e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001690:	e001      	b.n	8001696 <LoopFillZerobss>

08001692 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001692:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001694:	3204      	adds	r2, #4

08001696 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001696:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001698:	d3fb      	bcc.n	8001692 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800169a:	f002 fc15 	bl	8003ec8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800169e:	f7ff fbe3 	bl	8000e68 <main>
  bx lr
 80016a2:	4770      	bx	lr
  ldr r0, =_sdata
 80016a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016a8:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 80016ac:	0800a274 	.word	0x0800a274
  ldr r2, =_sbss
 80016b0:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 80016b4:	20000748 	.word	0x20000748

080016b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016b8:	e7fe      	b.n	80016b8 <ADC1_2_IRQHandler>
	...

080016bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016c0:	4b08      	ldr	r3, [pc, #32]	; (80016e4 <HAL_Init+0x28>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a07      	ldr	r2, [pc, #28]	; (80016e4 <HAL_Init+0x28>)
 80016c6:	f043 0310 	orr.w	r3, r3, #16
 80016ca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016cc:	2003      	movs	r0, #3
 80016ce:	f000 f947 	bl	8001960 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016d2:	200f      	movs	r0, #15
 80016d4:	f000 f808 	bl	80016e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016d8:	f7ff fe12 	bl	8001300 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016dc:	2300      	movs	r3, #0
}
 80016de:	4618      	mov	r0, r3
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	40022000 	.word	0x40022000

080016e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016f0:	4b12      	ldr	r3, [pc, #72]	; (800173c <HAL_InitTick+0x54>)
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	4b12      	ldr	r3, [pc, #72]	; (8001740 <HAL_InitTick+0x58>)
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	4619      	mov	r1, r3
 80016fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001702:	fbb2 f3f3 	udiv	r3, r2, r3
 8001706:	4618      	mov	r0, r3
 8001708:	f000 f95f 	bl	80019ca <HAL_SYSTICK_Config>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e00e      	b.n	8001734 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2b0f      	cmp	r3, #15
 800171a:	d80a      	bhi.n	8001732 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800171c:	2200      	movs	r2, #0
 800171e:	6879      	ldr	r1, [r7, #4]
 8001720:	f04f 30ff 	mov.w	r0, #4294967295
 8001724:	f000 f927 	bl	8001976 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001728:	4a06      	ldr	r2, [pc, #24]	; (8001744 <HAL_InitTick+0x5c>)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800172e:	2300      	movs	r3, #0
 8001730:	e000      	b.n	8001734 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
}
 8001734:	4618      	mov	r0, r3
 8001736:	3708      	adds	r7, #8
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	20000000 	.word	0x20000000
 8001740:	20000008 	.word	0x20000008
 8001744:	20000004 	.word	0x20000004

08001748 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800174c:	4b05      	ldr	r3, [pc, #20]	; (8001764 <HAL_IncTick+0x1c>)
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	461a      	mov	r2, r3
 8001752:	4b05      	ldr	r3, [pc, #20]	; (8001768 <HAL_IncTick+0x20>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4413      	add	r3, r2
 8001758:	4a03      	ldr	r2, [pc, #12]	; (8001768 <HAL_IncTick+0x20>)
 800175a:	6013      	str	r3, [r2, #0]
}
 800175c:	bf00      	nop
 800175e:	46bd      	mov	sp, r7
 8001760:	bc80      	pop	{r7}
 8001762:	4770      	bx	lr
 8001764:	20000008 	.word	0x20000008
 8001768:	2000032c 	.word	0x2000032c

0800176c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  return uwTick;
 8001770:	4b02      	ldr	r3, [pc, #8]	; (800177c <HAL_GetTick+0x10>)
 8001772:	681b      	ldr	r3, [r3, #0]
}
 8001774:	4618      	mov	r0, r3
 8001776:	46bd      	mov	sp, r7
 8001778:	bc80      	pop	{r7}
 800177a:	4770      	bx	lr
 800177c:	2000032c 	.word	0x2000032c

08001780 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001788:	f7ff fff0 	bl	800176c <HAL_GetTick>
 800178c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001798:	d005      	beq.n	80017a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800179a:	4b0a      	ldr	r3, [pc, #40]	; (80017c4 <HAL_Delay+0x44>)
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	461a      	mov	r2, r3
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	4413      	add	r3, r2
 80017a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017a6:	bf00      	nop
 80017a8:	f7ff ffe0 	bl	800176c <HAL_GetTick>
 80017ac:	4602      	mov	r2, r0
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	68fa      	ldr	r2, [r7, #12]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d8f7      	bhi.n	80017a8 <HAL_Delay+0x28>
  {
  }
}
 80017b8:	bf00      	nop
 80017ba:	bf00      	nop
 80017bc:	3710      	adds	r7, #16
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	20000008 	.word	0x20000008

080017c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b085      	sub	sp, #20
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	f003 0307 	and.w	r3, r3, #7
 80017d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017d8:	4b0c      	ldr	r3, [pc, #48]	; (800180c <__NVIC_SetPriorityGrouping+0x44>)
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017de:	68ba      	ldr	r2, [r7, #8]
 80017e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017e4:	4013      	ands	r3, r2
 80017e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017fa:	4a04      	ldr	r2, [pc, #16]	; (800180c <__NVIC_SetPriorityGrouping+0x44>)
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	60d3      	str	r3, [r2, #12]
}
 8001800:	bf00      	nop
 8001802:	3714      	adds	r7, #20
 8001804:	46bd      	mov	sp, r7
 8001806:	bc80      	pop	{r7}
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	e000ed00 	.word	0xe000ed00

08001810 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001814:	4b04      	ldr	r3, [pc, #16]	; (8001828 <__NVIC_GetPriorityGrouping+0x18>)
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	0a1b      	lsrs	r3, r3, #8
 800181a:	f003 0307 	and.w	r3, r3, #7
}
 800181e:	4618      	mov	r0, r3
 8001820:	46bd      	mov	sp, r7
 8001822:	bc80      	pop	{r7}
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	e000ed00 	.word	0xe000ed00

0800182c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	4603      	mov	r3, r0
 8001834:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183a:	2b00      	cmp	r3, #0
 800183c:	db0b      	blt.n	8001856 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800183e:	79fb      	ldrb	r3, [r7, #7]
 8001840:	f003 021f 	and.w	r2, r3, #31
 8001844:	4906      	ldr	r1, [pc, #24]	; (8001860 <__NVIC_EnableIRQ+0x34>)
 8001846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800184a:	095b      	lsrs	r3, r3, #5
 800184c:	2001      	movs	r0, #1
 800184e:	fa00 f202 	lsl.w	r2, r0, r2
 8001852:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001856:	bf00      	nop
 8001858:	370c      	adds	r7, #12
 800185a:	46bd      	mov	sp, r7
 800185c:	bc80      	pop	{r7}
 800185e:	4770      	bx	lr
 8001860:	e000e100 	.word	0xe000e100

08001864 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	4603      	mov	r3, r0
 800186c:	6039      	str	r1, [r7, #0]
 800186e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001870:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001874:	2b00      	cmp	r3, #0
 8001876:	db0a      	blt.n	800188e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	b2da      	uxtb	r2, r3
 800187c:	490c      	ldr	r1, [pc, #48]	; (80018b0 <__NVIC_SetPriority+0x4c>)
 800187e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001882:	0112      	lsls	r2, r2, #4
 8001884:	b2d2      	uxtb	r2, r2
 8001886:	440b      	add	r3, r1
 8001888:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800188c:	e00a      	b.n	80018a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	b2da      	uxtb	r2, r3
 8001892:	4908      	ldr	r1, [pc, #32]	; (80018b4 <__NVIC_SetPriority+0x50>)
 8001894:	79fb      	ldrb	r3, [r7, #7]
 8001896:	f003 030f 	and.w	r3, r3, #15
 800189a:	3b04      	subs	r3, #4
 800189c:	0112      	lsls	r2, r2, #4
 800189e:	b2d2      	uxtb	r2, r2
 80018a0:	440b      	add	r3, r1
 80018a2:	761a      	strb	r2, [r3, #24]
}
 80018a4:	bf00      	nop
 80018a6:	370c      	adds	r7, #12
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bc80      	pop	{r7}
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	e000e100 	.word	0xe000e100
 80018b4:	e000ed00 	.word	0xe000ed00

080018b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b089      	sub	sp, #36	; 0x24
 80018bc:	af00      	add	r7, sp, #0
 80018be:	60f8      	str	r0, [r7, #12]
 80018c0:	60b9      	str	r1, [r7, #8]
 80018c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	f003 0307 	and.w	r3, r3, #7
 80018ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	f1c3 0307 	rsb	r3, r3, #7
 80018d2:	2b04      	cmp	r3, #4
 80018d4:	bf28      	it	cs
 80018d6:	2304      	movcs	r3, #4
 80018d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	3304      	adds	r3, #4
 80018de:	2b06      	cmp	r3, #6
 80018e0:	d902      	bls.n	80018e8 <NVIC_EncodePriority+0x30>
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	3b03      	subs	r3, #3
 80018e6:	e000      	b.n	80018ea <NVIC_EncodePriority+0x32>
 80018e8:	2300      	movs	r3, #0
 80018ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018ec:	f04f 32ff 	mov.w	r2, #4294967295
 80018f0:	69bb      	ldr	r3, [r7, #24]
 80018f2:	fa02 f303 	lsl.w	r3, r2, r3
 80018f6:	43da      	mvns	r2, r3
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	401a      	ands	r2, r3
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001900:	f04f 31ff 	mov.w	r1, #4294967295
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	fa01 f303 	lsl.w	r3, r1, r3
 800190a:	43d9      	mvns	r1, r3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001910:	4313      	orrs	r3, r2
         );
}
 8001912:	4618      	mov	r0, r3
 8001914:	3724      	adds	r7, #36	; 0x24
 8001916:	46bd      	mov	sp, r7
 8001918:	bc80      	pop	{r7}
 800191a:	4770      	bx	lr

0800191c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	3b01      	subs	r3, #1
 8001928:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800192c:	d301      	bcc.n	8001932 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800192e:	2301      	movs	r3, #1
 8001930:	e00f      	b.n	8001952 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001932:	4a0a      	ldr	r2, [pc, #40]	; (800195c <SysTick_Config+0x40>)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	3b01      	subs	r3, #1
 8001938:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800193a:	210f      	movs	r1, #15
 800193c:	f04f 30ff 	mov.w	r0, #4294967295
 8001940:	f7ff ff90 	bl	8001864 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001944:	4b05      	ldr	r3, [pc, #20]	; (800195c <SysTick_Config+0x40>)
 8001946:	2200      	movs	r2, #0
 8001948:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800194a:	4b04      	ldr	r3, [pc, #16]	; (800195c <SysTick_Config+0x40>)
 800194c:	2207      	movs	r2, #7
 800194e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001950:	2300      	movs	r3, #0
}
 8001952:	4618      	mov	r0, r3
 8001954:	3708      	adds	r7, #8
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	e000e010 	.word	0xe000e010

08001960 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	f7ff ff2d 	bl	80017c8 <__NVIC_SetPriorityGrouping>
}
 800196e:	bf00      	nop
 8001970:	3708      	adds	r7, #8
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}

08001976 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001976:	b580      	push	{r7, lr}
 8001978:	b086      	sub	sp, #24
 800197a:	af00      	add	r7, sp, #0
 800197c:	4603      	mov	r3, r0
 800197e:	60b9      	str	r1, [r7, #8]
 8001980:	607a      	str	r2, [r7, #4]
 8001982:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001984:	2300      	movs	r3, #0
 8001986:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001988:	f7ff ff42 	bl	8001810 <__NVIC_GetPriorityGrouping>
 800198c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800198e:	687a      	ldr	r2, [r7, #4]
 8001990:	68b9      	ldr	r1, [r7, #8]
 8001992:	6978      	ldr	r0, [r7, #20]
 8001994:	f7ff ff90 	bl	80018b8 <NVIC_EncodePriority>
 8001998:	4602      	mov	r2, r0
 800199a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800199e:	4611      	mov	r1, r2
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7ff ff5f 	bl	8001864 <__NVIC_SetPriority>
}
 80019a6:	bf00      	nop
 80019a8:	3718      	adds	r7, #24
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}

080019ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019ae:	b580      	push	{r7, lr}
 80019b0:	b082      	sub	sp, #8
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	4603      	mov	r3, r0
 80019b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019bc:	4618      	mov	r0, r3
 80019be:	f7ff ff35 	bl	800182c <__NVIC_EnableIRQ>
}
 80019c2:	bf00      	nop
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}

080019ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019ca:	b580      	push	{r7, lr}
 80019cc:	b082      	sub	sp, #8
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f7ff ffa2 	bl	800191c <SysTick_Config>
 80019d8:	4603      	mov	r3, r0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
	...

080019e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b08b      	sub	sp, #44	; 0x2c
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019ee:	2300      	movs	r3, #0
 80019f0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80019f2:	2300      	movs	r3, #0
 80019f4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019f6:	e169      	b.n	8001ccc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80019f8:	2201      	movs	r2, #1
 80019fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001a00:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	69fa      	ldr	r2, [r7, #28]
 8001a08:	4013      	ands	r3, r2
 8001a0a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a0c:	69ba      	ldr	r2, [r7, #24]
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	f040 8158 	bne.w	8001cc6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	4a9a      	ldr	r2, [pc, #616]	; (8001c84 <HAL_GPIO_Init+0x2a0>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d05e      	beq.n	8001ade <HAL_GPIO_Init+0xfa>
 8001a20:	4a98      	ldr	r2, [pc, #608]	; (8001c84 <HAL_GPIO_Init+0x2a0>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d875      	bhi.n	8001b12 <HAL_GPIO_Init+0x12e>
 8001a26:	4a98      	ldr	r2, [pc, #608]	; (8001c88 <HAL_GPIO_Init+0x2a4>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d058      	beq.n	8001ade <HAL_GPIO_Init+0xfa>
 8001a2c:	4a96      	ldr	r2, [pc, #600]	; (8001c88 <HAL_GPIO_Init+0x2a4>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d86f      	bhi.n	8001b12 <HAL_GPIO_Init+0x12e>
 8001a32:	4a96      	ldr	r2, [pc, #600]	; (8001c8c <HAL_GPIO_Init+0x2a8>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d052      	beq.n	8001ade <HAL_GPIO_Init+0xfa>
 8001a38:	4a94      	ldr	r2, [pc, #592]	; (8001c8c <HAL_GPIO_Init+0x2a8>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d869      	bhi.n	8001b12 <HAL_GPIO_Init+0x12e>
 8001a3e:	4a94      	ldr	r2, [pc, #592]	; (8001c90 <HAL_GPIO_Init+0x2ac>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d04c      	beq.n	8001ade <HAL_GPIO_Init+0xfa>
 8001a44:	4a92      	ldr	r2, [pc, #584]	; (8001c90 <HAL_GPIO_Init+0x2ac>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d863      	bhi.n	8001b12 <HAL_GPIO_Init+0x12e>
 8001a4a:	4a92      	ldr	r2, [pc, #584]	; (8001c94 <HAL_GPIO_Init+0x2b0>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d046      	beq.n	8001ade <HAL_GPIO_Init+0xfa>
 8001a50:	4a90      	ldr	r2, [pc, #576]	; (8001c94 <HAL_GPIO_Init+0x2b0>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d85d      	bhi.n	8001b12 <HAL_GPIO_Init+0x12e>
 8001a56:	2b12      	cmp	r3, #18
 8001a58:	d82a      	bhi.n	8001ab0 <HAL_GPIO_Init+0xcc>
 8001a5a:	2b12      	cmp	r3, #18
 8001a5c:	d859      	bhi.n	8001b12 <HAL_GPIO_Init+0x12e>
 8001a5e:	a201      	add	r2, pc, #4	; (adr r2, 8001a64 <HAL_GPIO_Init+0x80>)
 8001a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a64:	08001adf 	.word	0x08001adf
 8001a68:	08001ab9 	.word	0x08001ab9
 8001a6c:	08001acb 	.word	0x08001acb
 8001a70:	08001b0d 	.word	0x08001b0d
 8001a74:	08001b13 	.word	0x08001b13
 8001a78:	08001b13 	.word	0x08001b13
 8001a7c:	08001b13 	.word	0x08001b13
 8001a80:	08001b13 	.word	0x08001b13
 8001a84:	08001b13 	.word	0x08001b13
 8001a88:	08001b13 	.word	0x08001b13
 8001a8c:	08001b13 	.word	0x08001b13
 8001a90:	08001b13 	.word	0x08001b13
 8001a94:	08001b13 	.word	0x08001b13
 8001a98:	08001b13 	.word	0x08001b13
 8001a9c:	08001b13 	.word	0x08001b13
 8001aa0:	08001b13 	.word	0x08001b13
 8001aa4:	08001b13 	.word	0x08001b13
 8001aa8:	08001ac1 	.word	0x08001ac1
 8001aac:	08001ad5 	.word	0x08001ad5
 8001ab0:	4a79      	ldr	r2, [pc, #484]	; (8001c98 <HAL_GPIO_Init+0x2b4>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d013      	beq.n	8001ade <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001ab6:	e02c      	b.n	8001b12 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	623b      	str	r3, [r7, #32]
          break;
 8001abe:	e029      	b.n	8001b14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	3304      	adds	r3, #4
 8001ac6:	623b      	str	r3, [r7, #32]
          break;
 8001ac8:	e024      	b.n	8001b14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	68db      	ldr	r3, [r3, #12]
 8001ace:	3308      	adds	r3, #8
 8001ad0:	623b      	str	r3, [r7, #32]
          break;
 8001ad2:	e01f      	b.n	8001b14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	330c      	adds	r3, #12
 8001ada:	623b      	str	r3, [r7, #32]
          break;
 8001adc:	e01a      	b.n	8001b14 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d102      	bne.n	8001aec <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ae6:	2304      	movs	r3, #4
 8001ae8:	623b      	str	r3, [r7, #32]
          break;
 8001aea:	e013      	b.n	8001b14 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d105      	bne.n	8001b00 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001af4:	2308      	movs	r3, #8
 8001af6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	69fa      	ldr	r2, [r7, #28]
 8001afc:	611a      	str	r2, [r3, #16]
          break;
 8001afe:	e009      	b.n	8001b14 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b00:	2308      	movs	r3, #8
 8001b02:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	69fa      	ldr	r2, [r7, #28]
 8001b08:	615a      	str	r2, [r3, #20]
          break;
 8001b0a:	e003      	b.n	8001b14 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	623b      	str	r3, [r7, #32]
          break;
 8001b10:	e000      	b.n	8001b14 <HAL_GPIO_Init+0x130>
          break;
 8001b12:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b14:	69bb      	ldr	r3, [r7, #24]
 8001b16:	2bff      	cmp	r3, #255	; 0xff
 8001b18:	d801      	bhi.n	8001b1e <HAL_GPIO_Init+0x13a>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	e001      	b.n	8001b22 <HAL_GPIO_Init+0x13e>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	3304      	adds	r3, #4
 8001b22:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b24:	69bb      	ldr	r3, [r7, #24]
 8001b26:	2bff      	cmp	r3, #255	; 0xff
 8001b28:	d802      	bhi.n	8001b30 <HAL_GPIO_Init+0x14c>
 8001b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	e002      	b.n	8001b36 <HAL_GPIO_Init+0x152>
 8001b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b32:	3b08      	subs	r3, #8
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	210f      	movs	r1, #15
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	fa01 f303 	lsl.w	r3, r1, r3
 8001b44:	43db      	mvns	r3, r3
 8001b46:	401a      	ands	r2, r3
 8001b48:	6a39      	ldr	r1, [r7, #32]
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b50:	431a      	orrs	r2, r3
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	f000 80b1 	beq.w	8001cc6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b64:	4b4d      	ldr	r3, [pc, #308]	; (8001c9c <HAL_GPIO_Init+0x2b8>)
 8001b66:	699b      	ldr	r3, [r3, #24]
 8001b68:	4a4c      	ldr	r2, [pc, #304]	; (8001c9c <HAL_GPIO_Init+0x2b8>)
 8001b6a:	f043 0301 	orr.w	r3, r3, #1
 8001b6e:	6193      	str	r3, [r2, #24]
 8001b70:	4b4a      	ldr	r3, [pc, #296]	; (8001c9c <HAL_GPIO_Init+0x2b8>)
 8001b72:	699b      	ldr	r3, [r3, #24]
 8001b74:	f003 0301 	and.w	r3, r3, #1
 8001b78:	60bb      	str	r3, [r7, #8]
 8001b7a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b7c:	4a48      	ldr	r2, [pc, #288]	; (8001ca0 <HAL_GPIO_Init+0x2bc>)
 8001b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b80:	089b      	lsrs	r3, r3, #2
 8001b82:	3302      	adds	r3, #2
 8001b84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b88:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8c:	f003 0303 	and.w	r3, r3, #3
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	220f      	movs	r2, #15
 8001b94:	fa02 f303 	lsl.w	r3, r2, r3
 8001b98:	43db      	mvns	r3, r3
 8001b9a:	68fa      	ldr	r2, [r7, #12]
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	4a40      	ldr	r2, [pc, #256]	; (8001ca4 <HAL_GPIO_Init+0x2c0>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d013      	beq.n	8001bd0 <HAL_GPIO_Init+0x1ec>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	4a3f      	ldr	r2, [pc, #252]	; (8001ca8 <HAL_GPIO_Init+0x2c4>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d00d      	beq.n	8001bcc <HAL_GPIO_Init+0x1e8>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	4a3e      	ldr	r2, [pc, #248]	; (8001cac <HAL_GPIO_Init+0x2c8>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d007      	beq.n	8001bc8 <HAL_GPIO_Init+0x1e4>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	4a3d      	ldr	r2, [pc, #244]	; (8001cb0 <HAL_GPIO_Init+0x2cc>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d101      	bne.n	8001bc4 <HAL_GPIO_Init+0x1e0>
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	e006      	b.n	8001bd2 <HAL_GPIO_Init+0x1ee>
 8001bc4:	2304      	movs	r3, #4
 8001bc6:	e004      	b.n	8001bd2 <HAL_GPIO_Init+0x1ee>
 8001bc8:	2302      	movs	r3, #2
 8001bca:	e002      	b.n	8001bd2 <HAL_GPIO_Init+0x1ee>
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e000      	b.n	8001bd2 <HAL_GPIO_Init+0x1ee>
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bd4:	f002 0203 	and.w	r2, r2, #3
 8001bd8:	0092      	lsls	r2, r2, #2
 8001bda:	4093      	lsls	r3, r2
 8001bdc:	68fa      	ldr	r2, [r7, #12]
 8001bde:	4313      	orrs	r3, r2
 8001be0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001be2:	492f      	ldr	r1, [pc, #188]	; (8001ca0 <HAL_GPIO_Init+0x2bc>)
 8001be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be6:	089b      	lsrs	r3, r3, #2
 8001be8:	3302      	adds	r3, #2
 8001bea:	68fa      	ldr	r2, [r7, #12]
 8001bec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d006      	beq.n	8001c0a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001bfc:	4b2d      	ldr	r3, [pc, #180]	; (8001cb4 <HAL_GPIO_Init+0x2d0>)
 8001bfe:	689a      	ldr	r2, [r3, #8]
 8001c00:	492c      	ldr	r1, [pc, #176]	; (8001cb4 <HAL_GPIO_Init+0x2d0>)
 8001c02:	69bb      	ldr	r3, [r7, #24]
 8001c04:	4313      	orrs	r3, r2
 8001c06:	608b      	str	r3, [r1, #8]
 8001c08:	e006      	b.n	8001c18 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c0a:	4b2a      	ldr	r3, [pc, #168]	; (8001cb4 <HAL_GPIO_Init+0x2d0>)
 8001c0c:	689a      	ldr	r2, [r3, #8]
 8001c0e:	69bb      	ldr	r3, [r7, #24]
 8001c10:	43db      	mvns	r3, r3
 8001c12:	4928      	ldr	r1, [pc, #160]	; (8001cb4 <HAL_GPIO_Init+0x2d0>)
 8001c14:	4013      	ands	r3, r2
 8001c16:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d006      	beq.n	8001c32 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c24:	4b23      	ldr	r3, [pc, #140]	; (8001cb4 <HAL_GPIO_Init+0x2d0>)
 8001c26:	68da      	ldr	r2, [r3, #12]
 8001c28:	4922      	ldr	r1, [pc, #136]	; (8001cb4 <HAL_GPIO_Init+0x2d0>)
 8001c2a:	69bb      	ldr	r3, [r7, #24]
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	60cb      	str	r3, [r1, #12]
 8001c30:	e006      	b.n	8001c40 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c32:	4b20      	ldr	r3, [pc, #128]	; (8001cb4 <HAL_GPIO_Init+0x2d0>)
 8001c34:	68da      	ldr	r2, [r3, #12]
 8001c36:	69bb      	ldr	r3, [r7, #24]
 8001c38:	43db      	mvns	r3, r3
 8001c3a:	491e      	ldr	r1, [pc, #120]	; (8001cb4 <HAL_GPIO_Init+0x2d0>)
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d006      	beq.n	8001c5a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001c4c:	4b19      	ldr	r3, [pc, #100]	; (8001cb4 <HAL_GPIO_Init+0x2d0>)
 8001c4e:	685a      	ldr	r2, [r3, #4]
 8001c50:	4918      	ldr	r1, [pc, #96]	; (8001cb4 <HAL_GPIO_Init+0x2d0>)
 8001c52:	69bb      	ldr	r3, [r7, #24]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	604b      	str	r3, [r1, #4]
 8001c58:	e006      	b.n	8001c68 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001c5a:	4b16      	ldr	r3, [pc, #88]	; (8001cb4 <HAL_GPIO_Init+0x2d0>)
 8001c5c:	685a      	ldr	r2, [r3, #4]
 8001c5e:	69bb      	ldr	r3, [r7, #24]
 8001c60:	43db      	mvns	r3, r3
 8001c62:	4914      	ldr	r1, [pc, #80]	; (8001cb4 <HAL_GPIO_Init+0x2d0>)
 8001c64:	4013      	ands	r3, r2
 8001c66:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d021      	beq.n	8001cb8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001c74:	4b0f      	ldr	r3, [pc, #60]	; (8001cb4 <HAL_GPIO_Init+0x2d0>)
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	490e      	ldr	r1, [pc, #56]	; (8001cb4 <HAL_GPIO_Init+0x2d0>)
 8001c7a:	69bb      	ldr	r3, [r7, #24]
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	600b      	str	r3, [r1, #0]
 8001c80:	e021      	b.n	8001cc6 <HAL_GPIO_Init+0x2e2>
 8001c82:	bf00      	nop
 8001c84:	10320000 	.word	0x10320000
 8001c88:	10310000 	.word	0x10310000
 8001c8c:	10220000 	.word	0x10220000
 8001c90:	10210000 	.word	0x10210000
 8001c94:	10120000 	.word	0x10120000
 8001c98:	10110000 	.word	0x10110000
 8001c9c:	40021000 	.word	0x40021000
 8001ca0:	40010000 	.word	0x40010000
 8001ca4:	40010800 	.word	0x40010800
 8001ca8:	40010c00 	.word	0x40010c00
 8001cac:	40011000 	.word	0x40011000
 8001cb0:	40011400 	.word	0x40011400
 8001cb4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001cb8:	4b0b      	ldr	r3, [pc, #44]	; (8001ce8 <HAL_GPIO_Init+0x304>)
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	69bb      	ldr	r3, [r7, #24]
 8001cbe:	43db      	mvns	r3, r3
 8001cc0:	4909      	ldr	r1, [pc, #36]	; (8001ce8 <HAL_GPIO_Init+0x304>)
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc8:	3301      	adds	r3, #1
 8001cca:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd2:	fa22 f303 	lsr.w	r3, r2, r3
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	f47f ae8e 	bne.w	80019f8 <HAL_GPIO_Init+0x14>
  }
}
 8001cdc:	bf00      	nop
 8001cde:	bf00      	nop
 8001ce0:	372c      	adds	r7, #44	; 0x2c
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bc80      	pop	{r7}
 8001ce6:	4770      	bx	lr
 8001ce8:	40010400 	.word	0x40010400

08001cec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b085      	sub	sp, #20
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	460b      	mov	r3, r1
 8001cf6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	689a      	ldr	r2, [r3, #8]
 8001cfc:	887b      	ldrh	r3, [r7, #2]
 8001cfe:	4013      	ands	r3, r2
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d002      	beq.n	8001d0a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d04:	2301      	movs	r3, #1
 8001d06:	73fb      	strb	r3, [r7, #15]
 8001d08:	e001      	b.n	8001d0e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3714      	adds	r7, #20
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bc80      	pop	{r7}
 8001d18:	4770      	bx	lr

08001d1a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d1a:	b480      	push	{r7}
 8001d1c:	b083      	sub	sp, #12
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]
 8001d22:	460b      	mov	r3, r1
 8001d24:	807b      	strh	r3, [r7, #2]
 8001d26:	4613      	mov	r3, r2
 8001d28:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d2a:	787b      	ldrb	r3, [r7, #1]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d003      	beq.n	8001d38 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d30:	887a      	ldrh	r2, [r7, #2]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001d36:	e003      	b.n	8001d40 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d38:	887b      	ldrh	r3, [r7, #2]
 8001d3a:	041a      	lsls	r2, r3, #16
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	611a      	str	r2, [r3, #16]
}
 8001d40:	bf00      	nop
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bc80      	pop	{r7}
 8001d48:	4770      	bx	lr
	...

08001d4c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	4603      	mov	r3, r0
 8001d54:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001d56:	4b08      	ldr	r3, [pc, #32]	; (8001d78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d58:	695a      	ldr	r2, [r3, #20]
 8001d5a:	88fb      	ldrh	r3, [r7, #6]
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d006      	beq.n	8001d70 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001d62:	4a05      	ldr	r2, [pc, #20]	; (8001d78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d64:	88fb      	ldrh	r3, [r7, #6]
 8001d66:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001d68:	88fb      	ldrh	r3, [r7, #6]
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7ff f9fc 	bl	8001168 <HAL_GPIO_EXTI_Callback>
  }
}
 8001d70:	bf00      	nop
 8001d72:	3708      	adds	r7, #8
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	40010400 	.word	0x40010400

08001d7c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b084      	sub	sp, #16
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d101      	bne.n	8001d8e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e12b      	b.n	8001fe6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d106      	bne.n	8001da8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f7fe ffe4 	bl	8000d70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2224      	movs	r2, #36	; 0x24
 8001dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f022 0201 	bic.w	r2, r2, #1
 8001dbe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001dce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001dde:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001de0:	f001 fbf0 	bl	80035c4 <HAL_RCC_GetPCLK1Freq>
 8001de4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	4a81      	ldr	r2, [pc, #516]	; (8001ff0 <HAL_I2C_Init+0x274>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d807      	bhi.n	8001e00 <HAL_I2C_Init+0x84>
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	4a80      	ldr	r2, [pc, #512]	; (8001ff4 <HAL_I2C_Init+0x278>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	bf94      	ite	ls
 8001df8:	2301      	movls	r3, #1
 8001dfa:	2300      	movhi	r3, #0
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	e006      	b.n	8001e0e <HAL_I2C_Init+0x92>
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	4a7d      	ldr	r2, [pc, #500]	; (8001ff8 <HAL_I2C_Init+0x27c>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	bf94      	ite	ls
 8001e08:	2301      	movls	r3, #1
 8001e0a:	2300      	movhi	r3, #0
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e0e7      	b.n	8001fe6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	4a78      	ldr	r2, [pc, #480]	; (8001ffc <HAL_I2C_Init+0x280>)
 8001e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e1e:	0c9b      	lsrs	r3, r3, #18
 8001e20:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	68ba      	ldr	r2, [r7, #8]
 8001e32:	430a      	orrs	r2, r1
 8001e34:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	6a1b      	ldr	r3, [r3, #32]
 8001e3c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	4a6a      	ldr	r2, [pc, #424]	; (8001ff0 <HAL_I2C_Init+0x274>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d802      	bhi.n	8001e50 <HAL_I2C_Init+0xd4>
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	e009      	b.n	8001e64 <HAL_I2C_Init+0xe8>
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001e56:	fb02 f303 	mul.w	r3, r2, r3
 8001e5a:	4a69      	ldr	r2, [pc, #420]	; (8002000 <HAL_I2C_Init+0x284>)
 8001e5c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e60:	099b      	lsrs	r3, r3, #6
 8001e62:	3301      	adds	r3, #1
 8001e64:	687a      	ldr	r2, [r7, #4]
 8001e66:	6812      	ldr	r2, [r2, #0]
 8001e68:	430b      	orrs	r3, r1
 8001e6a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	69db      	ldr	r3, [r3, #28]
 8001e72:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001e76:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	495c      	ldr	r1, [pc, #368]	; (8001ff0 <HAL_I2C_Init+0x274>)
 8001e80:	428b      	cmp	r3, r1
 8001e82:	d819      	bhi.n	8001eb8 <HAL_I2C_Init+0x13c>
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	1e59      	subs	r1, r3, #1
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	005b      	lsls	r3, r3, #1
 8001e8e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e92:	1c59      	adds	r1, r3, #1
 8001e94:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001e98:	400b      	ands	r3, r1
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d00a      	beq.n	8001eb4 <HAL_I2C_Init+0x138>
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	1e59      	subs	r1, r3, #1
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	005b      	lsls	r3, r3, #1
 8001ea8:	fbb1 f3f3 	udiv	r3, r1, r3
 8001eac:	3301      	adds	r3, #1
 8001eae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001eb2:	e051      	b.n	8001f58 <HAL_I2C_Init+0x1dc>
 8001eb4:	2304      	movs	r3, #4
 8001eb6:	e04f      	b.n	8001f58 <HAL_I2C_Init+0x1dc>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d111      	bne.n	8001ee4 <HAL_I2C_Init+0x168>
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	1e58      	subs	r0, r3, #1
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6859      	ldr	r1, [r3, #4]
 8001ec8:	460b      	mov	r3, r1
 8001eca:	005b      	lsls	r3, r3, #1
 8001ecc:	440b      	add	r3, r1
 8001ece:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	bf0c      	ite	eq
 8001edc:	2301      	moveq	r3, #1
 8001ede:	2300      	movne	r3, #0
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	e012      	b.n	8001f0a <HAL_I2C_Init+0x18e>
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	1e58      	subs	r0, r3, #1
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6859      	ldr	r1, [r3, #4]
 8001eec:	460b      	mov	r3, r1
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	440b      	add	r3, r1
 8001ef2:	0099      	lsls	r1, r3, #2
 8001ef4:	440b      	add	r3, r1
 8001ef6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001efa:	3301      	adds	r3, #1
 8001efc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	bf0c      	ite	eq
 8001f04:	2301      	moveq	r3, #1
 8001f06:	2300      	movne	r3, #0
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <HAL_I2C_Init+0x196>
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e022      	b.n	8001f58 <HAL_I2C_Init+0x1dc>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d10e      	bne.n	8001f38 <HAL_I2C_Init+0x1bc>
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	1e58      	subs	r0, r3, #1
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6859      	ldr	r1, [r3, #4]
 8001f22:	460b      	mov	r3, r1
 8001f24:	005b      	lsls	r3, r3, #1
 8001f26:	440b      	add	r3, r1
 8001f28:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f36:	e00f      	b.n	8001f58 <HAL_I2C_Init+0x1dc>
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	1e58      	subs	r0, r3, #1
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6859      	ldr	r1, [r3, #4]
 8001f40:	460b      	mov	r3, r1
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	440b      	add	r3, r1
 8001f46:	0099      	lsls	r1, r3, #2
 8001f48:	440b      	add	r3, r1
 8001f4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f4e:	3301      	adds	r3, #1
 8001f50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f54:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f58:	6879      	ldr	r1, [r7, #4]
 8001f5a:	6809      	ldr	r1, [r1, #0]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	69da      	ldr	r2, [r3, #28]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6a1b      	ldr	r3, [r3, #32]
 8001f72:	431a      	orrs	r2, r3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	430a      	orrs	r2, r1
 8001f7a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001f86:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001f8a:	687a      	ldr	r2, [r7, #4]
 8001f8c:	6911      	ldr	r1, [r2, #16]
 8001f8e:	687a      	ldr	r2, [r7, #4]
 8001f90:	68d2      	ldr	r2, [r2, #12]
 8001f92:	4311      	orrs	r1, r2
 8001f94:	687a      	ldr	r2, [r7, #4]
 8001f96:	6812      	ldr	r2, [r2, #0]
 8001f98:	430b      	orrs	r3, r1
 8001f9a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	68db      	ldr	r3, [r3, #12]
 8001fa2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	695a      	ldr	r2, [r3, #20]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	699b      	ldr	r3, [r3, #24]
 8001fae:	431a      	orrs	r2, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	430a      	orrs	r2, r1
 8001fb6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f042 0201 	orr.w	r2, r2, #1
 8001fc6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2220      	movs	r2, #32
 8001fd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001fe4:	2300      	movs	r3, #0
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3710      	adds	r7, #16
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	000186a0 	.word	0x000186a0
 8001ff4:	001e847f 	.word	0x001e847f
 8001ff8:	003d08ff 	.word	0x003d08ff
 8001ffc:	431bde83 	.word	0x431bde83
 8002000:	10624dd3 	.word	0x10624dd3

08002004 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b088      	sub	sp, #32
 8002008:	af02      	add	r7, sp, #8
 800200a:	60f8      	str	r0, [r7, #12]
 800200c:	4608      	mov	r0, r1
 800200e:	4611      	mov	r1, r2
 8002010:	461a      	mov	r2, r3
 8002012:	4603      	mov	r3, r0
 8002014:	817b      	strh	r3, [r7, #10]
 8002016:	460b      	mov	r3, r1
 8002018:	813b      	strh	r3, [r7, #8]
 800201a:	4613      	mov	r3, r2
 800201c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800201e:	f7ff fba5 	bl	800176c <HAL_GetTick>
 8002022:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800202a:	b2db      	uxtb	r3, r3
 800202c:	2b20      	cmp	r3, #32
 800202e:	f040 80d9 	bne.w	80021e4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	9300      	str	r3, [sp, #0]
 8002036:	2319      	movs	r3, #25
 8002038:	2201      	movs	r2, #1
 800203a:	496d      	ldr	r1, [pc, #436]	; (80021f0 <HAL_I2C_Mem_Write+0x1ec>)
 800203c:	68f8      	ldr	r0, [r7, #12]
 800203e:	f000 fcc1 	bl	80029c4 <I2C_WaitOnFlagUntilTimeout>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d001      	beq.n	800204c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002048:	2302      	movs	r3, #2
 800204a:	e0cc      	b.n	80021e6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002052:	2b01      	cmp	r3, #1
 8002054:	d101      	bne.n	800205a <HAL_I2C_Mem_Write+0x56>
 8002056:	2302      	movs	r3, #2
 8002058:	e0c5      	b.n	80021e6 <HAL_I2C_Mem_Write+0x1e2>
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2201      	movs	r2, #1
 800205e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 0301 	and.w	r3, r3, #1
 800206c:	2b01      	cmp	r3, #1
 800206e:	d007      	beq.n	8002080 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f042 0201 	orr.w	r2, r2, #1
 800207e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800208e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2221      	movs	r2, #33	; 0x21
 8002094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2240      	movs	r2, #64	; 0x40
 800209c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2200      	movs	r2, #0
 80020a4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	6a3a      	ldr	r2, [r7, #32]
 80020aa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80020b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020b6:	b29a      	uxth	r2, r3
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	4a4d      	ldr	r2, [pc, #308]	; (80021f4 <HAL_I2C_Mem_Write+0x1f0>)
 80020c0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80020c2:	88f8      	ldrh	r0, [r7, #6]
 80020c4:	893a      	ldrh	r2, [r7, #8]
 80020c6:	8979      	ldrh	r1, [r7, #10]
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	9301      	str	r3, [sp, #4]
 80020cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020ce:	9300      	str	r3, [sp, #0]
 80020d0:	4603      	mov	r3, r0
 80020d2:	68f8      	ldr	r0, [r7, #12]
 80020d4:	f000 faf8 	bl	80026c8 <I2C_RequestMemoryWrite>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d052      	beq.n	8002184 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e081      	b.n	80021e6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020e2:	697a      	ldr	r2, [r7, #20]
 80020e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80020e6:	68f8      	ldr	r0, [r7, #12]
 80020e8:	f000 fd86 	bl	8002bf8 <I2C_WaitOnTXEFlagUntilTimeout>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d00d      	beq.n	800210e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f6:	2b04      	cmp	r3, #4
 80020f8:	d107      	bne.n	800210a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002108:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e06b      	b.n	80021e6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002112:	781a      	ldrb	r2, [r3, #0]
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800211e:	1c5a      	adds	r2, r3, #1
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002128:	3b01      	subs	r3, #1
 800212a:	b29a      	uxth	r2, r3
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002134:	b29b      	uxth	r3, r3
 8002136:	3b01      	subs	r3, #1
 8002138:	b29a      	uxth	r2, r3
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	695b      	ldr	r3, [r3, #20]
 8002144:	f003 0304 	and.w	r3, r3, #4
 8002148:	2b04      	cmp	r3, #4
 800214a:	d11b      	bne.n	8002184 <HAL_I2C_Mem_Write+0x180>
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002150:	2b00      	cmp	r3, #0
 8002152:	d017      	beq.n	8002184 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002158:	781a      	ldrb	r2, [r3, #0]
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002164:	1c5a      	adds	r2, r3, #1
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800216e:	3b01      	subs	r3, #1
 8002170:	b29a      	uxth	r2, r3
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800217a:	b29b      	uxth	r3, r3
 800217c:	3b01      	subs	r3, #1
 800217e:	b29a      	uxth	r2, r3
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002188:	2b00      	cmp	r3, #0
 800218a:	d1aa      	bne.n	80020e2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800218c:	697a      	ldr	r2, [r7, #20]
 800218e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002190:	68f8      	ldr	r0, [r7, #12]
 8002192:	f000 fd79 	bl	8002c88 <I2C_WaitOnBTFFlagUntilTimeout>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d00d      	beq.n	80021b8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a0:	2b04      	cmp	r3, #4
 80021a2:	d107      	bne.n	80021b4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021b2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	e016      	b.n	80021e6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2220      	movs	r2, #32
 80021cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2200      	movs	r2, #0
 80021d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2200      	movs	r2, #0
 80021dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80021e0:	2300      	movs	r3, #0
 80021e2:	e000      	b.n	80021e6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80021e4:	2302      	movs	r3, #2
  }
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3718      	adds	r7, #24
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	00100002 	.word	0x00100002
 80021f4:	ffff0000 	.word	0xffff0000

080021f8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b08c      	sub	sp, #48	; 0x30
 80021fc:	af02      	add	r7, sp, #8
 80021fe:	60f8      	str	r0, [r7, #12]
 8002200:	4608      	mov	r0, r1
 8002202:	4611      	mov	r1, r2
 8002204:	461a      	mov	r2, r3
 8002206:	4603      	mov	r3, r0
 8002208:	817b      	strh	r3, [r7, #10]
 800220a:	460b      	mov	r3, r1
 800220c:	813b      	strh	r3, [r7, #8]
 800220e:	4613      	mov	r3, r2
 8002210:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002212:	2300      	movs	r3, #0
 8002214:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002216:	f7ff faa9 	bl	800176c <HAL_GetTick>
 800221a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002222:	b2db      	uxtb	r3, r3
 8002224:	2b20      	cmp	r3, #32
 8002226:	f040 8244 	bne.w	80026b2 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800222a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222c:	9300      	str	r3, [sp, #0]
 800222e:	2319      	movs	r3, #25
 8002230:	2201      	movs	r2, #1
 8002232:	4982      	ldr	r1, [pc, #520]	; (800243c <HAL_I2C_Mem_Read+0x244>)
 8002234:	68f8      	ldr	r0, [r7, #12]
 8002236:	f000 fbc5 	bl	80029c4 <I2C_WaitOnFlagUntilTimeout>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d001      	beq.n	8002244 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002240:	2302      	movs	r3, #2
 8002242:	e237      	b.n	80026b4 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800224a:	2b01      	cmp	r3, #1
 800224c:	d101      	bne.n	8002252 <HAL_I2C_Mem_Read+0x5a>
 800224e:	2302      	movs	r3, #2
 8002250:	e230      	b.n	80026b4 <HAL_I2C_Mem_Read+0x4bc>
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2201      	movs	r2, #1
 8002256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 0301 	and.w	r3, r3, #1
 8002264:	2b01      	cmp	r3, #1
 8002266:	d007      	beq.n	8002278 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f042 0201 	orr.w	r2, r2, #1
 8002276:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002286:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2222      	movs	r2, #34	; 0x22
 800228c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2240      	movs	r2, #64	; 0x40
 8002294:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	2200      	movs	r2, #0
 800229c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022a2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80022a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022ae:	b29a      	uxth	r2, r3
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	4a62      	ldr	r2, [pc, #392]	; (8002440 <HAL_I2C_Mem_Read+0x248>)
 80022b8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80022ba:	88f8      	ldrh	r0, [r7, #6]
 80022bc:	893a      	ldrh	r2, [r7, #8]
 80022be:	8979      	ldrh	r1, [r7, #10]
 80022c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c2:	9301      	str	r3, [sp, #4]
 80022c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022c6:	9300      	str	r3, [sp, #0]
 80022c8:	4603      	mov	r3, r0
 80022ca:	68f8      	ldr	r0, [r7, #12]
 80022cc:	f000 fa92 	bl	80027f4 <I2C_RequestMemoryRead>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e1ec      	b.n	80026b4 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d113      	bne.n	800230a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022e2:	2300      	movs	r3, #0
 80022e4:	61fb      	str	r3, [r7, #28]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	695b      	ldr	r3, [r3, #20]
 80022ec:	61fb      	str	r3, [r7, #28]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	699b      	ldr	r3, [r3, #24]
 80022f4:	61fb      	str	r3, [r7, #28]
 80022f6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002306:	601a      	str	r2, [r3, #0]
 8002308:	e1c0      	b.n	800268c <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800230e:	2b01      	cmp	r3, #1
 8002310:	d11e      	bne.n	8002350 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002320:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002322:	b672      	cpsid	i
}
 8002324:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002326:	2300      	movs	r3, #0
 8002328:	61bb      	str	r3, [r7, #24]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	695b      	ldr	r3, [r3, #20]
 8002330:	61bb      	str	r3, [r7, #24]
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	699b      	ldr	r3, [r3, #24]
 8002338:	61bb      	str	r3, [r7, #24]
 800233a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800234a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800234c:	b662      	cpsie	i
}
 800234e:	e035      	b.n	80023bc <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002354:	2b02      	cmp	r3, #2
 8002356:	d11e      	bne.n	8002396 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002366:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002368:	b672      	cpsid	i
}
 800236a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800236c:	2300      	movs	r3, #0
 800236e:	617b      	str	r3, [r7, #20]
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	695b      	ldr	r3, [r3, #20]
 8002376:	617b      	str	r3, [r7, #20]
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	699b      	ldr	r3, [r3, #24]
 800237e:	617b      	str	r3, [r7, #20]
 8002380:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002390:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002392:	b662      	cpsie	i
}
 8002394:	e012      	b.n	80023bc <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80023a4:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023a6:	2300      	movs	r3, #0
 80023a8:	613b      	str	r3, [r7, #16]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	695b      	ldr	r3, [r3, #20]
 80023b0:	613b      	str	r3, [r7, #16]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	699b      	ldr	r3, [r3, #24]
 80023b8:	613b      	str	r3, [r7, #16]
 80023ba:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80023bc:	e166      	b.n	800268c <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023c2:	2b03      	cmp	r3, #3
 80023c4:	f200 811f 	bhi.w	8002606 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d123      	bne.n	8002418 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023d2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80023d4:	68f8      	ldr	r0, [r7, #12]
 80023d6:	f000 fc9f 	bl	8002d18 <I2C_WaitOnRXNEFlagUntilTimeout>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d001      	beq.n	80023e4 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	e167      	b.n	80026b4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	691a      	ldr	r2, [r3, #16]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ee:	b2d2      	uxtb	r2, r2
 80023f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f6:	1c5a      	adds	r2, r3, #1
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002400:	3b01      	subs	r3, #1
 8002402:	b29a      	uxth	r2, r3
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800240c:	b29b      	uxth	r3, r3
 800240e:	3b01      	subs	r3, #1
 8002410:	b29a      	uxth	r2, r3
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002416:	e139      	b.n	800268c <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800241c:	2b02      	cmp	r3, #2
 800241e:	d152      	bne.n	80024c6 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002422:	9300      	str	r3, [sp, #0]
 8002424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002426:	2200      	movs	r2, #0
 8002428:	4906      	ldr	r1, [pc, #24]	; (8002444 <HAL_I2C_Mem_Read+0x24c>)
 800242a:	68f8      	ldr	r0, [r7, #12]
 800242c:	f000 faca 	bl	80029c4 <I2C_WaitOnFlagUntilTimeout>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d008      	beq.n	8002448 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e13c      	b.n	80026b4 <HAL_I2C_Mem_Read+0x4bc>
 800243a:	bf00      	nop
 800243c:	00100002 	.word	0x00100002
 8002440:	ffff0000 	.word	0xffff0000
 8002444:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002448:	b672      	cpsid	i
}
 800244a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800245a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	691a      	ldr	r2, [r3, #16]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002466:	b2d2      	uxtb	r2, r2
 8002468:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800246e:	1c5a      	adds	r2, r3, #1
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002478:	3b01      	subs	r3, #1
 800247a:	b29a      	uxth	r2, r3
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002484:	b29b      	uxth	r3, r3
 8002486:	3b01      	subs	r3, #1
 8002488:	b29a      	uxth	r2, r3
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800248e:	b662      	cpsie	i
}
 8002490:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	691a      	ldr	r2, [r3, #16]
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249c:	b2d2      	uxtb	r2, r2
 800249e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a4:	1c5a      	adds	r2, r3, #1
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024ae:	3b01      	subs	r3, #1
 80024b0:	b29a      	uxth	r2, r3
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	3b01      	subs	r3, #1
 80024be:	b29a      	uxth	r2, r3
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80024c4:	e0e2      	b.n	800268c <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80024c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c8:	9300      	str	r3, [sp, #0]
 80024ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024cc:	2200      	movs	r2, #0
 80024ce:	497b      	ldr	r1, [pc, #492]	; (80026bc <HAL_I2C_Mem_Read+0x4c4>)
 80024d0:	68f8      	ldr	r0, [r7, #12]
 80024d2:	f000 fa77 	bl	80029c4 <I2C_WaitOnFlagUntilTimeout>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d001      	beq.n	80024e0 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e0e9      	b.n	80026b4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024ee:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80024f0:	b672      	cpsid	i
}
 80024f2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	691a      	ldr	r2, [r3, #16]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024fe:	b2d2      	uxtb	r2, r2
 8002500:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002506:	1c5a      	adds	r2, r3, #1
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002510:	3b01      	subs	r3, #1
 8002512:	b29a      	uxth	r2, r3
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800251c:	b29b      	uxth	r3, r3
 800251e:	3b01      	subs	r3, #1
 8002520:	b29a      	uxth	r2, r3
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002526:	4b66      	ldr	r3, [pc, #408]	; (80026c0 <HAL_I2C_Mem_Read+0x4c8>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	08db      	lsrs	r3, r3, #3
 800252c:	4a65      	ldr	r2, [pc, #404]	; (80026c4 <HAL_I2C_Mem_Read+0x4cc>)
 800252e:	fba2 2303 	umull	r2, r3, r2, r3
 8002532:	0a1a      	lsrs	r2, r3, #8
 8002534:	4613      	mov	r3, r2
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	4413      	add	r3, r2
 800253a:	00da      	lsls	r2, r3, #3
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002540:	6a3b      	ldr	r3, [r7, #32]
 8002542:	3b01      	subs	r3, #1
 8002544:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002546:	6a3b      	ldr	r3, [r7, #32]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d118      	bne.n	800257e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2200      	movs	r2, #0
 8002550:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2220      	movs	r2, #32
 8002556:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2200      	movs	r2, #0
 800255e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002566:	f043 0220 	orr.w	r2, r3, #32
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800256e:	b662      	cpsie	i
}
 8002570:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2200      	movs	r2, #0
 8002576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e09a      	b.n	80026b4 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	695b      	ldr	r3, [r3, #20]
 8002584:	f003 0304 	and.w	r3, r3, #4
 8002588:	2b04      	cmp	r3, #4
 800258a:	d1d9      	bne.n	8002540 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800259a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	691a      	ldr	r2, [r3, #16]
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a6:	b2d2      	uxtb	r2, r2
 80025a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ae:	1c5a      	adds	r2, r3, #1
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025b8:	3b01      	subs	r3, #1
 80025ba:	b29a      	uxth	r2, r3
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	3b01      	subs	r3, #1
 80025c8:	b29a      	uxth	r2, r3
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80025ce:	b662      	cpsie	i
}
 80025d0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	691a      	ldr	r2, [r3, #16]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025dc:	b2d2      	uxtb	r2, r2
 80025de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e4:	1c5a      	adds	r2, r3, #1
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ee:	3b01      	subs	r3, #1
 80025f0:	b29a      	uxth	r2, r3
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025fa:	b29b      	uxth	r3, r3
 80025fc:	3b01      	subs	r3, #1
 80025fe:	b29a      	uxth	r2, r3
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002604:	e042      	b.n	800268c <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002606:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002608:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800260a:	68f8      	ldr	r0, [r7, #12]
 800260c:	f000 fb84 	bl	8002d18 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d001      	beq.n	800261a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e04c      	b.n	80026b4 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	691a      	ldr	r2, [r3, #16]
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002624:	b2d2      	uxtb	r2, r2
 8002626:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262c:	1c5a      	adds	r2, r3, #1
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002636:	3b01      	subs	r3, #1
 8002638:	b29a      	uxth	r2, r3
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002642:	b29b      	uxth	r3, r3
 8002644:	3b01      	subs	r3, #1
 8002646:	b29a      	uxth	r2, r3
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	695b      	ldr	r3, [r3, #20]
 8002652:	f003 0304 	and.w	r3, r3, #4
 8002656:	2b04      	cmp	r3, #4
 8002658:	d118      	bne.n	800268c <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	691a      	ldr	r2, [r3, #16]
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002664:	b2d2      	uxtb	r2, r2
 8002666:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800266c:	1c5a      	adds	r2, r3, #1
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002676:	3b01      	subs	r3, #1
 8002678:	b29a      	uxth	r2, r3
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002682:	b29b      	uxth	r3, r3
 8002684:	3b01      	subs	r3, #1
 8002686:	b29a      	uxth	r2, r3
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002690:	2b00      	cmp	r3, #0
 8002692:	f47f ae94 	bne.w	80023be <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2220      	movs	r2, #32
 800269a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2200      	movs	r2, #0
 80026a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2200      	movs	r2, #0
 80026aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80026ae:	2300      	movs	r3, #0
 80026b0:	e000      	b.n	80026b4 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 80026b2:	2302      	movs	r3, #2
  }
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3728      	adds	r7, #40	; 0x28
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	00010004 	.word	0x00010004
 80026c0:	20000000 	.word	0x20000000
 80026c4:	14f8b589 	.word	0x14f8b589

080026c8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b088      	sub	sp, #32
 80026cc:	af02      	add	r7, sp, #8
 80026ce:	60f8      	str	r0, [r7, #12]
 80026d0:	4608      	mov	r0, r1
 80026d2:	4611      	mov	r1, r2
 80026d4:	461a      	mov	r2, r3
 80026d6:	4603      	mov	r3, r0
 80026d8:	817b      	strh	r3, [r7, #10]
 80026da:	460b      	mov	r3, r1
 80026dc:	813b      	strh	r3, [r7, #8]
 80026de:	4613      	mov	r3, r2
 80026e0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026f0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80026f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f4:	9300      	str	r3, [sp, #0]
 80026f6:	6a3b      	ldr	r3, [r7, #32]
 80026f8:	2200      	movs	r2, #0
 80026fa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80026fe:	68f8      	ldr	r0, [r7, #12]
 8002700:	f000 f960 	bl	80029c4 <I2C_WaitOnFlagUntilTimeout>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d00d      	beq.n	8002726 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002714:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002718:	d103      	bne.n	8002722 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002720:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e05f      	b.n	80027e6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002726:	897b      	ldrh	r3, [r7, #10]
 8002728:	b2db      	uxtb	r3, r3
 800272a:	461a      	mov	r2, r3
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002734:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002738:	6a3a      	ldr	r2, [r7, #32]
 800273a:	492d      	ldr	r1, [pc, #180]	; (80027f0 <I2C_RequestMemoryWrite+0x128>)
 800273c:	68f8      	ldr	r0, [r7, #12]
 800273e:	f000 f9bb 	bl	8002ab8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d001      	beq.n	800274c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e04c      	b.n	80027e6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800274c:	2300      	movs	r3, #0
 800274e:	617b      	str	r3, [r7, #20]
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	695b      	ldr	r3, [r3, #20]
 8002756:	617b      	str	r3, [r7, #20]
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	699b      	ldr	r3, [r3, #24]
 800275e:	617b      	str	r3, [r7, #20]
 8002760:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002762:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002764:	6a39      	ldr	r1, [r7, #32]
 8002766:	68f8      	ldr	r0, [r7, #12]
 8002768:	f000 fa46 	bl	8002bf8 <I2C_WaitOnTXEFlagUntilTimeout>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d00d      	beq.n	800278e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002776:	2b04      	cmp	r3, #4
 8002778:	d107      	bne.n	800278a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002788:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e02b      	b.n	80027e6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800278e:	88fb      	ldrh	r3, [r7, #6]
 8002790:	2b01      	cmp	r3, #1
 8002792:	d105      	bne.n	80027a0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002794:	893b      	ldrh	r3, [r7, #8]
 8002796:	b2da      	uxtb	r2, r3
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	611a      	str	r2, [r3, #16]
 800279e:	e021      	b.n	80027e4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80027a0:	893b      	ldrh	r3, [r7, #8]
 80027a2:	0a1b      	lsrs	r3, r3, #8
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	b2da      	uxtb	r2, r3
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027b0:	6a39      	ldr	r1, [r7, #32]
 80027b2:	68f8      	ldr	r0, [r7, #12]
 80027b4:	f000 fa20 	bl	8002bf8 <I2C_WaitOnTXEFlagUntilTimeout>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d00d      	beq.n	80027da <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c2:	2b04      	cmp	r3, #4
 80027c4:	d107      	bne.n	80027d6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027d4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e005      	b.n	80027e6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80027da:	893b      	ldrh	r3, [r7, #8]
 80027dc:	b2da      	uxtb	r2, r3
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80027e4:	2300      	movs	r3, #0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3718      	adds	r7, #24
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	00010002 	.word	0x00010002

080027f4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b088      	sub	sp, #32
 80027f8:	af02      	add	r7, sp, #8
 80027fa:	60f8      	str	r0, [r7, #12]
 80027fc:	4608      	mov	r0, r1
 80027fe:	4611      	mov	r1, r2
 8002800:	461a      	mov	r2, r3
 8002802:	4603      	mov	r3, r0
 8002804:	817b      	strh	r3, [r7, #10]
 8002806:	460b      	mov	r3, r1
 8002808:	813b      	strh	r3, [r7, #8]
 800280a:	4613      	mov	r3, r2
 800280c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800281c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800282c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800282e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002830:	9300      	str	r3, [sp, #0]
 8002832:	6a3b      	ldr	r3, [r7, #32]
 8002834:	2200      	movs	r2, #0
 8002836:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800283a:	68f8      	ldr	r0, [r7, #12]
 800283c:	f000 f8c2 	bl	80029c4 <I2C_WaitOnFlagUntilTimeout>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d00d      	beq.n	8002862 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002850:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002854:	d103      	bne.n	800285e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	f44f 7200 	mov.w	r2, #512	; 0x200
 800285c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800285e:	2303      	movs	r3, #3
 8002860:	e0aa      	b.n	80029b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002862:	897b      	ldrh	r3, [r7, #10]
 8002864:	b2db      	uxtb	r3, r3
 8002866:	461a      	mov	r2, r3
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002870:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002874:	6a3a      	ldr	r2, [r7, #32]
 8002876:	4952      	ldr	r1, [pc, #328]	; (80029c0 <I2C_RequestMemoryRead+0x1cc>)
 8002878:	68f8      	ldr	r0, [r7, #12]
 800287a:	f000 f91d 	bl	8002ab8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d001      	beq.n	8002888 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e097      	b.n	80029b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002888:	2300      	movs	r3, #0
 800288a:	617b      	str	r3, [r7, #20]
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	695b      	ldr	r3, [r3, #20]
 8002892:	617b      	str	r3, [r7, #20]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	699b      	ldr	r3, [r3, #24]
 800289a:	617b      	str	r3, [r7, #20]
 800289c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800289e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028a0:	6a39      	ldr	r1, [r7, #32]
 80028a2:	68f8      	ldr	r0, [r7, #12]
 80028a4:	f000 f9a8 	bl	8002bf8 <I2C_WaitOnTXEFlagUntilTimeout>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d00d      	beq.n	80028ca <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b2:	2b04      	cmp	r3, #4
 80028b4:	d107      	bne.n	80028c6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028c4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e076      	b.n	80029b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80028ca:	88fb      	ldrh	r3, [r7, #6]
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d105      	bne.n	80028dc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80028d0:	893b      	ldrh	r3, [r7, #8]
 80028d2:	b2da      	uxtb	r2, r3
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	611a      	str	r2, [r3, #16]
 80028da:	e021      	b.n	8002920 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80028dc:	893b      	ldrh	r3, [r7, #8]
 80028de:	0a1b      	lsrs	r3, r3, #8
 80028e0:	b29b      	uxth	r3, r3
 80028e2:	b2da      	uxtb	r2, r3
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028ec:	6a39      	ldr	r1, [r7, #32]
 80028ee:	68f8      	ldr	r0, [r7, #12]
 80028f0:	f000 f982 	bl	8002bf8 <I2C_WaitOnTXEFlagUntilTimeout>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d00d      	beq.n	8002916 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fe:	2b04      	cmp	r3, #4
 8002900:	d107      	bne.n	8002912 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002910:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e050      	b.n	80029b8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002916:	893b      	ldrh	r3, [r7, #8]
 8002918:	b2da      	uxtb	r2, r3
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002920:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002922:	6a39      	ldr	r1, [r7, #32]
 8002924:	68f8      	ldr	r0, [r7, #12]
 8002926:	f000 f967 	bl	8002bf8 <I2C_WaitOnTXEFlagUntilTimeout>
 800292a:	4603      	mov	r3, r0
 800292c:	2b00      	cmp	r3, #0
 800292e:	d00d      	beq.n	800294c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002934:	2b04      	cmp	r3, #4
 8002936:	d107      	bne.n	8002948 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002946:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e035      	b.n	80029b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800295a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800295c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295e:	9300      	str	r3, [sp, #0]
 8002960:	6a3b      	ldr	r3, [r7, #32]
 8002962:	2200      	movs	r2, #0
 8002964:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002968:	68f8      	ldr	r0, [r7, #12]
 800296a:	f000 f82b 	bl	80029c4 <I2C_WaitOnFlagUntilTimeout>
 800296e:	4603      	mov	r3, r0
 8002970:	2b00      	cmp	r3, #0
 8002972:	d00d      	beq.n	8002990 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800297e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002982:	d103      	bne.n	800298c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	f44f 7200 	mov.w	r2, #512	; 0x200
 800298a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800298c:	2303      	movs	r3, #3
 800298e:	e013      	b.n	80029b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002990:	897b      	ldrh	r3, [r7, #10]
 8002992:	b2db      	uxtb	r3, r3
 8002994:	f043 0301 	orr.w	r3, r3, #1
 8002998:	b2da      	uxtb	r2, r3
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80029a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a2:	6a3a      	ldr	r2, [r7, #32]
 80029a4:	4906      	ldr	r1, [pc, #24]	; (80029c0 <I2C_RequestMemoryRead+0x1cc>)
 80029a6:	68f8      	ldr	r0, [r7, #12]
 80029a8:	f000 f886 	bl	8002ab8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d001      	beq.n	80029b6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e000      	b.n	80029b8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80029b6:	2300      	movs	r3, #0
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3718      	adds	r7, #24
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	00010002 	.word	0x00010002

080029c4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b084      	sub	sp, #16
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	60f8      	str	r0, [r7, #12]
 80029cc:	60b9      	str	r1, [r7, #8]
 80029ce:	603b      	str	r3, [r7, #0]
 80029d0:	4613      	mov	r3, r2
 80029d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029d4:	e048      	b.n	8002a68 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029dc:	d044      	beq.n	8002a68 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029de:	f7fe fec5 	bl	800176c <HAL_GetTick>
 80029e2:	4602      	mov	r2, r0
 80029e4:	69bb      	ldr	r3, [r7, #24]
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	683a      	ldr	r2, [r7, #0]
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d302      	bcc.n	80029f4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d139      	bne.n	8002a68 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	0c1b      	lsrs	r3, r3, #16
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d10d      	bne.n	8002a1a <I2C_WaitOnFlagUntilTimeout+0x56>
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	695b      	ldr	r3, [r3, #20]
 8002a04:	43da      	mvns	r2, r3
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	4013      	ands	r3, r2
 8002a0a:	b29b      	uxth	r3, r3
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	bf0c      	ite	eq
 8002a10:	2301      	moveq	r3, #1
 8002a12:	2300      	movne	r3, #0
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	461a      	mov	r2, r3
 8002a18:	e00c      	b.n	8002a34 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	699b      	ldr	r3, [r3, #24]
 8002a20:	43da      	mvns	r2, r3
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	4013      	ands	r3, r2
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	bf0c      	ite	eq
 8002a2c:	2301      	moveq	r3, #1
 8002a2e:	2300      	movne	r3, #0
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	461a      	mov	r2, r3
 8002a34:	79fb      	ldrb	r3, [r7, #7]
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d116      	bne.n	8002a68 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2220      	movs	r2, #32
 8002a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a54:	f043 0220 	orr.w	r2, r3, #32
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e023      	b.n	8002ab0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	0c1b      	lsrs	r3, r3, #16
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d10d      	bne.n	8002a8e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	695b      	ldr	r3, [r3, #20]
 8002a78:	43da      	mvns	r2, r3
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	bf0c      	ite	eq
 8002a84:	2301      	moveq	r3, #1
 8002a86:	2300      	movne	r3, #0
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	e00c      	b.n	8002aa8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	699b      	ldr	r3, [r3, #24]
 8002a94:	43da      	mvns	r2, r3
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	4013      	ands	r3, r2
 8002a9a:	b29b      	uxth	r3, r3
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	bf0c      	ite	eq
 8002aa0:	2301      	moveq	r3, #1
 8002aa2:	2300      	movne	r3, #0
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	79fb      	ldrb	r3, [r7, #7]
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d093      	beq.n	80029d6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002aae:	2300      	movs	r3, #0
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3710      	adds	r7, #16
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}

08002ab8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	60f8      	str	r0, [r7, #12]
 8002ac0:	60b9      	str	r1, [r7, #8]
 8002ac2:	607a      	str	r2, [r7, #4]
 8002ac4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ac6:	e071      	b.n	8002bac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	695b      	ldr	r3, [r3, #20]
 8002ace:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ad2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ad6:	d123      	bne.n	8002b20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ae6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002af0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2200      	movs	r2, #0
 8002af6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2220      	movs	r2, #32
 8002afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2200      	movs	r2, #0
 8002b04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0c:	f043 0204 	orr.w	r2, r3, #4
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2200      	movs	r2, #0
 8002b18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e067      	b.n	8002bf0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b26:	d041      	beq.n	8002bac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b28:	f7fe fe20 	bl	800176c <HAL_GetTick>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d302      	bcc.n	8002b3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d136      	bne.n	8002bac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	0c1b      	lsrs	r3, r3, #16
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d10c      	bne.n	8002b62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	695b      	ldr	r3, [r3, #20]
 8002b4e:	43da      	mvns	r2, r3
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	4013      	ands	r3, r2
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	bf14      	ite	ne
 8002b5a:	2301      	movne	r3, #1
 8002b5c:	2300      	moveq	r3, #0
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	e00b      	b.n	8002b7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	699b      	ldr	r3, [r3, #24]
 8002b68:	43da      	mvns	r2, r3
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	bf14      	ite	ne
 8002b74:	2301      	movne	r3, #1
 8002b76:	2300      	moveq	r3, #0
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d016      	beq.n	8002bac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2200      	movs	r2, #0
 8002b82:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2220      	movs	r2, #32
 8002b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b98:	f043 0220 	orr.w	r2, r3, #32
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e021      	b.n	8002bf0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	0c1b      	lsrs	r3, r3, #16
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d10c      	bne.n	8002bd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	695b      	ldr	r3, [r3, #20]
 8002bbc:	43da      	mvns	r2, r3
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	bf14      	ite	ne
 8002bc8:	2301      	movne	r3, #1
 8002bca:	2300      	moveq	r3, #0
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	e00b      	b.n	8002be8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	699b      	ldr	r3, [r3, #24]
 8002bd6:	43da      	mvns	r2, r3
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	4013      	ands	r3, r2
 8002bdc:	b29b      	uxth	r3, r3
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	bf14      	ite	ne
 8002be2:	2301      	movne	r3, #1
 8002be4:	2300      	moveq	r3, #0
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	f47f af6d 	bne.w	8002ac8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002bee:	2300      	movs	r3, #0
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3710      	adds	r7, #16
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}

08002bf8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b084      	sub	sp, #16
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	60f8      	str	r0, [r7, #12]
 8002c00:	60b9      	str	r1, [r7, #8]
 8002c02:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c04:	e034      	b.n	8002c70 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c06:	68f8      	ldr	r0, [r7, #12]
 8002c08:	f000 f8e3 	bl	8002dd2 <I2C_IsAcknowledgeFailed>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d001      	beq.n	8002c16 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e034      	b.n	8002c80 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c1c:	d028      	beq.n	8002c70 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c1e:	f7fe fda5 	bl	800176c <HAL_GetTick>
 8002c22:	4602      	mov	r2, r0
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	68ba      	ldr	r2, [r7, #8]
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d302      	bcc.n	8002c34 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d11d      	bne.n	8002c70 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	695b      	ldr	r3, [r3, #20]
 8002c3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c3e:	2b80      	cmp	r3, #128	; 0x80
 8002c40:	d016      	beq.n	8002c70 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2200      	movs	r2, #0
 8002c46:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2220      	movs	r2, #32
 8002c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2200      	movs	r2, #0
 8002c54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5c:	f043 0220 	orr.w	r2, r3, #32
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2200      	movs	r2, #0
 8002c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e007      	b.n	8002c80 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	695b      	ldr	r3, [r3, #20]
 8002c76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c7a:	2b80      	cmp	r3, #128	; 0x80
 8002c7c:	d1c3      	bne.n	8002c06 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002c7e:	2300      	movs	r3, #0
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3710      	adds	r7, #16
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}

08002c88 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b084      	sub	sp, #16
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	60f8      	str	r0, [r7, #12]
 8002c90:	60b9      	str	r1, [r7, #8]
 8002c92:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c94:	e034      	b.n	8002d00 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c96:	68f8      	ldr	r0, [r7, #12]
 8002c98:	f000 f89b 	bl	8002dd2 <I2C_IsAcknowledgeFailed>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d001      	beq.n	8002ca6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e034      	b.n	8002d10 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cac:	d028      	beq.n	8002d00 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cae:	f7fe fd5d 	bl	800176c <HAL_GetTick>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	68ba      	ldr	r2, [r7, #8]
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d302      	bcc.n	8002cc4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d11d      	bne.n	8002d00 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	695b      	ldr	r3, [r3, #20]
 8002cca:	f003 0304 	and.w	r3, r3, #4
 8002cce:	2b04      	cmp	r3, #4
 8002cd0:	d016      	beq.n	8002d00 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2220      	movs	r2, #32
 8002cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cec:	f043 0220 	orr.w	r2, r3, #32
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e007      	b.n	8002d10 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	695b      	ldr	r3, [r3, #20]
 8002d06:	f003 0304 	and.w	r3, r3, #4
 8002d0a:	2b04      	cmp	r3, #4
 8002d0c:	d1c3      	bne.n	8002c96 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002d0e:	2300      	movs	r3, #0
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3710      	adds	r7, #16
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}

08002d18 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b084      	sub	sp, #16
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	60f8      	str	r0, [r7, #12]
 8002d20:	60b9      	str	r1, [r7, #8]
 8002d22:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002d24:	e049      	b.n	8002dba <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	695b      	ldr	r3, [r3, #20]
 8002d2c:	f003 0310 	and.w	r3, r3, #16
 8002d30:	2b10      	cmp	r3, #16
 8002d32:	d119      	bne.n	8002d68 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f06f 0210 	mvn.w	r2, #16
 8002d3c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2200      	movs	r2, #0
 8002d42:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2220      	movs	r2, #32
 8002d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e030      	b.n	8002dca <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d68:	f7fe fd00 	bl	800176c <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	68ba      	ldr	r2, [r7, #8]
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d302      	bcc.n	8002d7e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d11d      	bne.n	8002dba <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	695b      	ldr	r3, [r3, #20]
 8002d84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d88:	2b40      	cmp	r3, #64	; 0x40
 8002d8a:	d016      	beq.n	8002dba <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2220      	movs	r2, #32
 8002d96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da6:	f043 0220 	orr.w	r2, r3, #32
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2200      	movs	r2, #0
 8002db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e007      	b.n	8002dca <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	695b      	ldr	r3, [r3, #20]
 8002dc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dc4:	2b40      	cmp	r3, #64	; 0x40
 8002dc6:	d1ae      	bne.n	8002d26 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002dc8:	2300      	movs	r3, #0
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3710      	adds	r7, #16
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}

08002dd2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002dd2:	b480      	push	{r7}
 8002dd4:	b083      	sub	sp, #12
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	695b      	ldr	r3, [r3, #20]
 8002de0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002de4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002de8:	d11b      	bne.n	8002e22 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002df2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2200      	movs	r2, #0
 8002df8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2220      	movs	r2, #32
 8002dfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0e:	f043 0204 	orr.w	r2, r3, #4
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e000      	b.n	8002e24 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002e22:	2300      	movs	r3, #0
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	370c      	adds	r7, #12
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bc80      	pop	{r7}
 8002e2c:	4770      	bx	lr
	...

08002e30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b086      	sub	sp, #24
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d101      	bne.n	8002e42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e272      	b.n	8003328 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0301 	and.w	r3, r3, #1
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	f000 8087 	beq.w	8002f5e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e50:	4b92      	ldr	r3, [pc, #584]	; (800309c <HAL_RCC_OscConfig+0x26c>)
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	f003 030c 	and.w	r3, r3, #12
 8002e58:	2b04      	cmp	r3, #4
 8002e5a:	d00c      	beq.n	8002e76 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002e5c:	4b8f      	ldr	r3, [pc, #572]	; (800309c <HAL_RCC_OscConfig+0x26c>)
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f003 030c 	and.w	r3, r3, #12
 8002e64:	2b08      	cmp	r3, #8
 8002e66:	d112      	bne.n	8002e8e <HAL_RCC_OscConfig+0x5e>
 8002e68:	4b8c      	ldr	r3, [pc, #560]	; (800309c <HAL_RCC_OscConfig+0x26c>)
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e74:	d10b      	bne.n	8002e8e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e76:	4b89      	ldr	r3, [pc, #548]	; (800309c <HAL_RCC_OscConfig+0x26c>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d06c      	beq.n	8002f5c <HAL_RCC_OscConfig+0x12c>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d168      	bne.n	8002f5c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e24c      	b.n	8003328 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e96:	d106      	bne.n	8002ea6 <HAL_RCC_OscConfig+0x76>
 8002e98:	4b80      	ldr	r3, [pc, #512]	; (800309c <HAL_RCC_OscConfig+0x26c>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a7f      	ldr	r2, [pc, #508]	; (800309c <HAL_RCC_OscConfig+0x26c>)
 8002e9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ea2:	6013      	str	r3, [r2, #0]
 8002ea4:	e02e      	b.n	8002f04 <HAL_RCC_OscConfig+0xd4>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d10c      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x98>
 8002eae:	4b7b      	ldr	r3, [pc, #492]	; (800309c <HAL_RCC_OscConfig+0x26c>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a7a      	ldr	r2, [pc, #488]	; (800309c <HAL_RCC_OscConfig+0x26c>)
 8002eb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002eb8:	6013      	str	r3, [r2, #0]
 8002eba:	4b78      	ldr	r3, [pc, #480]	; (800309c <HAL_RCC_OscConfig+0x26c>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a77      	ldr	r2, [pc, #476]	; (800309c <HAL_RCC_OscConfig+0x26c>)
 8002ec0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ec4:	6013      	str	r3, [r2, #0]
 8002ec6:	e01d      	b.n	8002f04 <HAL_RCC_OscConfig+0xd4>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ed0:	d10c      	bne.n	8002eec <HAL_RCC_OscConfig+0xbc>
 8002ed2:	4b72      	ldr	r3, [pc, #456]	; (800309c <HAL_RCC_OscConfig+0x26c>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a71      	ldr	r2, [pc, #452]	; (800309c <HAL_RCC_OscConfig+0x26c>)
 8002ed8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002edc:	6013      	str	r3, [r2, #0]
 8002ede:	4b6f      	ldr	r3, [pc, #444]	; (800309c <HAL_RCC_OscConfig+0x26c>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a6e      	ldr	r2, [pc, #440]	; (800309c <HAL_RCC_OscConfig+0x26c>)
 8002ee4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ee8:	6013      	str	r3, [r2, #0]
 8002eea:	e00b      	b.n	8002f04 <HAL_RCC_OscConfig+0xd4>
 8002eec:	4b6b      	ldr	r3, [pc, #428]	; (800309c <HAL_RCC_OscConfig+0x26c>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a6a      	ldr	r2, [pc, #424]	; (800309c <HAL_RCC_OscConfig+0x26c>)
 8002ef2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ef6:	6013      	str	r3, [r2, #0]
 8002ef8:	4b68      	ldr	r3, [pc, #416]	; (800309c <HAL_RCC_OscConfig+0x26c>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a67      	ldr	r2, [pc, #412]	; (800309c <HAL_RCC_OscConfig+0x26c>)
 8002efe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f02:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d013      	beq.n	8002f34 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f0c:	f7fe fc2e 	bl	800176c <HAL_GetTick>
 8002f10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f12:	e008      	b.n	8002f26 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f14:	f7fe fc2a 	bl	800176c <HAL_GetTick>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	2b64      	cmp	r3, #100	; 0x64
 8002f20:	d901      	bls.n	8002f26 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002f22:	2303      	movs	r3, #3
 8002f24:	e200      	b.n	8003328 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f26:	4b5d      	ldr	r3, [pc, #372]	; (800309c <HAL_RCC_OscConfig+0x26c>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d0f0      	beq.n	8002f14 <HAL_RCC_OscConfig+0xe4>
 8002f32:	e014      	b.n	8002f5e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f34:	f7fe fc1a 	bl	800176c <HAL_GetTick>
 8002f38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f3a:	e008      	b.n	8002f4e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f3c:	f7fe fc16 	bl	800176c <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	2b64      	cmp	r3, #100	; 0x64
 8002f48:	d901      	bls.n	8002f4e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e1ec      	b.n	8003328 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f4e:	4b53      	ldr	r3, [pc, #332]	; (800309c <HAL_RCC_OscConfig+0x26c>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d1f0      	bne.n	8002f3c <HAL_RCC_OscConfig+0x10c>
 8002f5a:	e000      	b.n	8002f5e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0302 	and.w	r3, r3, #2
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d063      	beq.n	8003032 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f6a:	4b4c      	ldr	r3, [pc, #304]	; (800309c <HAL_RCC_OscConfig+0x26c>)
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	f003 030c 	and.w	r3, r3, #12
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d00b      	beq.n	8002f8e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002f76:	4b49      	ldr	r3, [pc, #292]	; (800309c <HAL_RCC_OscConfig+0x26c>)
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	f003 030c 	and.w	r3, r3, #12
 8002f7e:	2b08      	cmp	r3, #8
 8002f80:	d11c      	bne.n	8002fbc <HAL_RCC_OscConfig+0x18c>
 8002f82:	4b46      	ldr	r3, [pc, #280]	; (800309c <HAL_RCC_OscConfig+0x26c>)
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d116      	bne.n	8002fbc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f8e:	4b43      	ldr	r3, [pc, #268]	; (800309c <HAL_RCC_OscConfig+0x26c>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0302 	and.w	r3, r3, #2
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d005      	beq.n	8002fa6 <HAL_RCC_OscConfig+0x176>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	691b      	ldr	r3, [r3, #16]
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d001      	beq.n	8002fa6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e1c0      	b.n	8003328 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fa6:	4b3d      	ldr	r3, [pc, #244]	; (800309c <HAL_RCC_OscConfig+0x26c>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	695b      	ldr	r3, [r3, #20]
 8002fb2:	00db      	lsls	r3, r3, #3
 8002fb4:	4939      	ldr	r1, [pc, #228]	; (800309c <HAL_RCC_OscConfig+0x26c>)
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fba:	e03a      	b.n	8003032 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	691b      	ldr	r3, [r3, #16]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d020      	beq.n	8003006 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fc4:	4b36      	ldr	r3, [pc, #216]	; (80030a0 <HAL_RCC_OscConfig+0x270>)
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fca:	f7fe fbcf 	bl	800176c <HAL_GetTick>
 8002fce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fd0:	e008      	b.n	8002fe4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fd2:	f7fe fbcb 	bl	800176c <HAL_GetTick>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d901      	bls.n	8002fe4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	e1a1      	b.n	8003328 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fe4:	4b2d      	ldr	r3, [pc, #180]	; (800309c <HAL_RCC_OscConfig+0x26c>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 0302 	and.w	r3, r3, #2
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d0f0      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ff0:	4b2a      	ldr	r3, [pc, #168]	; (800309c <HAL_RCC_OscConfig+0x26c>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	695b      	ldr	r3, [r3, #20]
 8002ffc:	00db      	lsls	r3, r3, #3
 8002ffe:	4927      	ldr	r1, [pc, #156]	; (800309c <HAL_RCC_OscConfig+0x26c>)
 8003000:	4313      	orrs	r3, r2
 8003002:	600b      	str	r3, [r1, #0]
 8003004:	e015      	b.n	8003032 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003006:	4b26      	ldr	r3, [pc, #152]	; (80030a0 <HAL_RCC_OscConfig+0x270>)
 8003008:	2200      	movs	r2, #0
 800300a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800300c:	f7fe fbae 	bl	800176c <HAL_GetTick>
 8003010:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003012:	e008      	b.n	8003026 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003014:	f7fe fbaa 	bl	800176c <HAL_GetTick>
 8003018:	4602      	mov	r2, r0
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	2b02      	cmp	r3, #2
 8003020:	d901      	bls.n	8003026 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003022:	2303      	movs	r3, #3
 8003024:	e180      	b.n	8003328 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003026:	4b1d      	ldr	r3, [pc, #116]	; (800309c <HAL_RCC_OscConfig+0x26c>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 0302 	and.w	r3, r3, #2
 800302e:	2b00      	cmp	r3, #0
 8003030:	d1f0      	bne.n	8003014 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0308 	and.w	r3, r3, #8
 800303a:	2b00      	cmp	r3, #0
 800303c:	d03a      	beq.n	80030b4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	699b      	ldr	r3, [r3, #24]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d019      	beq.n	800307a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003046:	4b17      	ldr	r3, [pc, #92]	; (80030a4 <HAL_RCC_OscConfig+0x274>)
 8003048:	2201      	movs	r2, #1
 800304a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800304c:	f7fe fb8e 	bl	800176c <HAL_GetTick>
 8003050:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003052:	e008      	b.n	8003066 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003054:	f7fe fb8a 	bl	800176c <HAL_GetTick>
 8003058:	4602      	mov	r2, r0
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	2b02      	cmp	r3, #2
 8003060:	d901      	bls.n	8003066 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	e160      	b.n	8003328 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003066:	4b0d      	ldr	r3, [pc, #52]	; (800309c <HAL_RCC_OscConfig+0x26c>)
 8003068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306a:	f003 0302 	and.w	r3, r3, #2
 800306e:	2b00      	cmp	r3, #0
 8003070:	d0f0      	beq.n	8003054 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003072:	2001      	movs	r0, #1
 8003074:	f000 faba 	bl	80035ec <RCC_Delay>
 8003078:	e01c      	b.n	80030b4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800307a:	4b0a      	ldr	r3, [pc, #40]	; (80030a4 <HAL_RCC_OscConfig+0x274>)
 800307c:	2200      	movs	r2, #0
 800307e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003080:	f7fe fb74 	bl	800176c <HAL_GetTick>
 8003084:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003086:	e00f      	b.n	80030a8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003088:	f7fe fb70 	bl	800176c <HAL_GetTick>
 800308c:	4602      	mov	r2, r0
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	2b02      	cmp	r3, #2
 8003094:	d908      	bls.n	80030a8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e146      	b.n	8003328 <HAL_RCC_OscConfig+0x4f8>
 800309a:	bf00      	nop
 800309c:	40021000 	.word	0x40021000
 80030a0:	42420000 	.word	0x42420000
 80030a4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030a8:	4b92      	ldr	r3, [pc, #584]	; (80032f4 <HAL_RCC_OscConfig+0x4c4>)
 80030aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ac:	f003 0302 	and.w	r3, r3, #2
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d1e9      	bne.n	8003088 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0304 	and.w	r3, r3, #4
 80030bc:	2b00      	cmp	r3, #0
 80030be:	f000 80a6 	beq.w	800320e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030c2:	2300      	movs	r3, #0
 80030c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030c6:	4b8b      	ldr	r3, [pc, #556]	; (80032f4 <HAL_RCC_OscConfig+0x4c4>)
 80030c8:	69db      	ldr	r3, [r3, #28]
 80030ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d10d      	bne.n	80030ee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030d2:	4b88      	ldr	r3, [pc, #544]	; (80032f4 <HAL_RCC_OscConfig+0x4c4>)
 80030d4:	69db      	ldr	r3, [r3, #28]
 80030d6:	4a87      	ldr	r2, [pc, #540]	; (80032f4 <HAL_RCC_OscConfig+0x4c4>)
 80030d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030dc:	61d3      	str	r3, [r2, #28]
 80030de:	4b85      	ldr	r3, [pc, #532]	; (80032f4 <HAL_RCC_OscConfig+0x4c4>)
 80030e0:	69db      	ldr	r3, [r3, #28]
 80030e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030e6:	60bb      	str	r3, [r7, #8]
 80030e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030ea:	2301      	movs	r3, #1
 80030ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030ee:	4b82      	ldr	r3, [pc, #520]	; (80032f8 <HAL_RCC_OscConfig+0x4c8>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d118      	bne.n	800312c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030fa:	4b7f      	ldr	r3, [pc, #508]	; (80032f8 <HAL_RCC_OscConfig+0x4c8>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a7e      	ldr	r2, [pc, #504]	; (80032f8 <HAL_RCC_OscConfig+0x4c8>)
 8003100:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003104:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003106:	f7fe fb31 	bl	800176c <HAL_GetTick>
 800310a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800310c:	e008      	b.n	8003120 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800310e:	f7fe fb2d 	bl	800176c <HAL_GetTick>
 8003112:	4602      	mov	r2, r0
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	1ad3      	subs	r3, r2, r3
 8003118:	2b64      	cmp	r3, #100	; 0x64
 800311a:	d901      	bls.n	8003120 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800311c:	2303      	movs	r3, #3
 800311e:	e103      	b.n	8003328 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003120:	4b75      	ldr	r3, [pc, #468]	; (80032f8 <HAL_RCC_OscConfig+0x4c8>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003128:	2b00      	cmp	r3, #0
 800312a:	d0f0      	beq.n	800310e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	2b01      	cmp	r3, #1
 8003132:	d106      	bne.n	8003142 <HAL_RCC_OscConfig+0x312>
 8003134:	4b6f      	ldr	r3, [pc, #444]	; (80032f4 <HAL_RCC_OscConfig+0x4c4>)
 8003136:	6a1b      	ldr	r3, [r3, #32]
 8003138:	4a6e      	ldr	r2, [pc, #440]	; (80032f4 <HAL_RCC_OscConfig+0x4c4>)
 800313a:	f043 0301 	orr.w	r3, r3, #1
 800313e:	6213      	str	r3, [r2, #32]
 8003140:	e02d      	b.n	800319e <HAL_RCC_OscConfig+0x36e>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	68db      	ldr	r3, [r3, #12]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d10c      	bne.n	8003164 <HAL_RCC_OscConfig+0x334>
 800314a:	4b6a      	ldr	r3, [pc, #424]	; (80032f4 <HAL_RCC_OscConfig+0x4c4>)
 800314c:	6a1b      	ldr	r3, [r3, #32]
 800314e:	4a69      	ldr	r2, [pc, #420]	; (80032f4 <HAL_RCC_OscConfig+0x4c4>)
 8003150:	f023 0301 	bic.w	r3, r3, #1
 8003154:	6213      	str	r3, [r2, #32]
 8003156:	4b67      	ldr	r3, [pc, #412]	; (80032f4 <HAL_RCC_OscConfig+0x4c4>)
 8003158:	6a1b      	ldr	r3, [r3, #32]
 800315a:	4a66      	ldr	r2, [pc, #408]	; (80032f4 <HAL_RCC_OscConfig+0x4c4>)
 800315c:	f023 0304 	bic.w	r3, r3, #4
 8003160:	6213      	str	r3, [r2, #32]
 8003162:	e01c      	b.n	800319e <HAL_RCC_OscConfig+0x36e>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	2b05      	cmp	r3, #5
 800316a:	d10c      	bne.n	8003186 <HAL_RCC_OscConfig+0x356>
 800316c:	4b61      	ldr	r3, [pc, #388]	; (80032f4 <HAL_RCC_OscConfig+0x4c4>)
 800316e:	6a1b      	ldr	r3, [r3, #32]
 8003170:	4a60      	ldr	r2, [pc, #384]	; (80032f4 <HAL_RCC_OscConfig+0x4c4>)
 8003172:	f043 0304 	orr.w	r3, r3, #4
 8003176:	6213      	str	r3, [r2, #32]
 8003178:	4b5e      	ldr	r3, [pc, #376]	; (80032f4 <HAL_RCC_OscConfig+0x4c4>)
 800317a:	6a1b      	ldr	r3, [r3, #32]
 800317c:	4a5d      	ldr	r2, [pc, #372]	; (80032f4 <HAL_RCC_OscConfig+0x4c4>)
 800317e:	f043 0301 	orr.w	r3, r3, #1
 8003182:	6213      	str	r3, [r2, #32]
 8003184:	e00b      	b.n	800319e <HAL_RCC_OscConfig+0x36e>
 8003186:	4b5b      	ldr	r3, [pc, #364]	; (80032f4 <HAL_RCC_OscConfig+0x4c4>)
 8003188:	6a1b      	ldr	r3, [r3, #32]
 800318a:	4a5a      	ldr	r2, [pc, #360]	; (80032f4 <HAL_RCC_OscConfig+0x4c4>)
 800318c:	f023 0301 	bic.w	r3, r3, #1
 8003190:	6213      	str	r3, [r2, #32]
 8003192:	4b58      	ldr	r3, [pc, #352]	; (80032f4 <HAL_RCC_OscConfig+0x4c4>)
 8003194:	6a1b      	ldr	r3, [r3, #32]
 8003196:	4a57      	ldr	r2, [pc, #348]	; (80032f4 <HAL_RCC_OscConfig+0x4c4>)
 8003198:	f023 0304 	bic.w	r3, r3, #4
 800319c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	68db      	ldr	r3, [r3, #12]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d015      	beq.n	80031d2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031a6:	f7fe fae1 	bl	800176c <HAL_GetTick>
 80031aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031ac:	e00a      	b.n	80031c4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031ae:	f7fe fadd 	bl	800176c <HAL_GetTick>
 80031b2:	4602      	mov	r2, r0
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	1ad3      	subs	r3, r2, r3
 80031b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80031bc:	4293      	cmp	r3, r2
 80031be:	d901      	bls.n	80031c4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80031c0:	2303      	movs	r3, #3
 80031c2:	e0b1      	b.n	8003328 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031c4:	4b4b      	ldr	r3, [pc, #300]	; (80032f4 <HAL_RCC_OscConfig+0x4c4>)
 80031c6:	6a1b      	ldr	r3, [r3, #32]
 80031c8:	f003 0302 	and.w	r3, r3, #2
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d0ee      	beq.n	80031ae <HAL_RCC_OscConfig+0x37e>
 80031d0:	e014      	b.n	80031fc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031d2:	f7fe facb 	bl	800176c <HAL_GetTick>
 80031d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031d8:	e00a      	b.n	80031f0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031da:	f7fe fac7 	bl	800176c <HAL_GetTick>
 80031de:	4602      	mov	r2, r0
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	1ad3      	subs	r3, r2, r3
 80031e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d901      	bls.n	80031f0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80031ec:	2303      	movs	r3, #3
 80031ee:	e09b      	b.n	8003328 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031f0:	4b40      	ldr	r3, [pc, #256]	; (80032f4 <HAL_RCC_OscConfig+0x4c4>)
 80031f2:	6a1b      	ldr	r3, [r3, #32]
 80031f4:	f003 0302 	and.w	r3, r3, #2
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d1ee      	bne.n	80031da <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80031fc:	7dfb      	ldrb	r3, [r7, #23]
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d105      	bne.n	800320e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003202:	4b3c      	ldr	r3, [pc, #240]	; (80032f4 <HAL_RCC_OscConfig+0x4c4>)
 8003204:	69db      	ldr	r3, [r3, #28]
 8003206:	4a3b      	ldr	r2, [pc, #236]	; (80032f4 <HAL_RCC_OscConfig+0x4c4>)
 8003208:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800320c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	69db      	ldr	r3, [r3, #28]
 8003212:	2b00      	cmp	r3, #0
 8003214:	f000 8087 	beq.w	8003326 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003218:	4b36      	ldr	r3, [pc, #216]	; (80032f4 <HAL_RCC_OscConfig+0x4c4>)
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	f003 030c 	and.w	r3, r3, #12
 8003220:	2b08      	cmp	r3, #8
 8003222:	d061      	beq.n	80032e8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	69db      	ldr	r3, [r3, #28]
 8003228:	2b02      	cmp	r3, #2
 800322a:	d146      	bne.n	80032ba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800322c:	4b33      	ldr	r3, [pc, #204]	; (80032fc <HAL_RCC_OscConfig+0x4cc>)
 800322e:	2200      	movs	r2, #0
 8003230:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003232:	f7fe fa9b 	bl	800176c <HAL_GetTick>
 8003236:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003238:	e008      	b.n	800324c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800323a:	f7fe fa97 	bl	800176c <HAL_GetTick>
 800323e:	4602      	mov	r2, r0
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	2b02      	cmp	r3, #2
 8003246:	d901      	bls.n	800324c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003248:	2303      	movs	r3, #3
 800324a:	e06d      	b.n	8003328 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800324c:	4b29      	ldr	r3, [pc, #164]	; (80032f4 <HAL_RCC_OscConfig+0x4c4>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003254:	2b00      	cmp	r3, #0
 8003256:	d1f0      	bne.n	800323a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6a1b      	ldr	r3, [r3, #32]
 800325c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003260:	d108      	bne.n	8003274 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003262:	4b24      	ldr	r3, [pc, #144]	; (80032f4 <HAL_RCC_OscConfig+0x4c4>)
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	4921      	ldr	r1, [pc, #132]	; (80032f4 <HAL_RCC_OscConfig+0x4c4>)
 8003270:	4313      	orrs	r3, r2
 8003272:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003274:	4b1f      	ldr	r3, [pc, #124]	; (80032f4 <HAL_RCC_OscConfig+0x4c4>)
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6a19      	ldr	r1, [r3, #32]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003284:	430b      	orrs	r3, r1
 8003286:	491b      	ldr	r1, [pc, #108]	; (80032f4 <HAL_RCC_OscConfig+0x4c4>)
 8003288:	4313      	orrs	r3, r2
 800328a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800328c:	4b1b      	ldr	r3, [pc, #108]	; (80032fc <HAL_RCC_OscConfig+0x4cc>)
 800328e:	2201      	movs	r2, #1
 8003290:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003292:	f7fe fa6b 	bl	800176c <HAL_GetTick>
 8003296:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003298:	e008      	b.n	80032ac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800329a:	f7fe fa67 	bl	800176c <HAL_GetTick>
 800329e:	4602      	mov	r2, r0
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	1ad3      	subs	r3, r2, r3
 80032a4:	2b02      	cmp	r3, #2
 80032a6:	d901      	bls.n	80032ac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80032a8:	2303      	movs	r3, #3
 80032aa:	e03d      	b.n	8003328 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80032ac:	4b11      	ldr	r3, [pc, #68]	; (80032f4 <HAL_RCC_OscConfig+0x4c4>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d0f0      	beq.n	800329a <HAL_RCC_OscConfig+0x46a>
 80032b8:	e035      	b.n	8003326 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032ba:	4b10      	ldr	r3, [pc, #64]	; (80032fc <HAL_RCC_OscConfig+0x4cc>)
 80032bc:	2200      	movs	r2, #0
 80032be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032c0:	f7fe fa54 	bl	800176c <HAL_GetTick>
 80032c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032c6:	e008      	b.n	80032da <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032c8:	f7fe fa50 	bl	800176c <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d901      	bls.n	80032da <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e026      	b.n	8003328 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032da:	4b06      	ldr	r3, [pc, #24]	; (80032f4 <HAL_RCC_OscConfig+0x4c4>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d1f0      	bne.n	80032c8 <HAL_RCC_OscConfig+0x498>
 80032e6:	e01e      	b.n	8003326 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	69db      	ldr	r3, [r3, #28]
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d107      	bne.n	8003300 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	e019      	b.n	8003328 <HAL_RCC_OscConfig+0x4f8>
 80032f4:	40021000 	.word	0x40021000
 80032f8:	40007000 	.word	0x40007000
 80032fc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003300:	4b0b      	ldr	r3, [pc, #44]	; (8003330 <HAL_RCC_OscConfig+0x500>)
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6a1b      	ldr	r3, [r3, #32]
 8003310:	429a      	cmp	r2, r3
 8003312:	d106      	bne.n	8003322 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800331e:	429a      	cmp	r2, r3
 8003320:	d001      	beq.n	8003326 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e000      	b.n	8003328 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003326:	2300      	movs	r3, #0
}
 8003328:	4618      	mov	r0, r3
 800332a:	3718      	adds	r7, #24
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}
 8003330:	40021000 	.word	0x40021000

08003334 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b084      	sub	sp, #16
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d101      	bne.n	8003348 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	e0d0      	b.n	80034ea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003348:	4b6a      	ldr	r3, [pc, #424]	; (80034f4 <HAL_RCC_ClockConfig+0x1c0>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0307 	and.w	r3, r3, #7
 8003350:	683a      	ldr	r2, [r7, #0]
 8003352:	429a      	cmp	r2, r3
 8003354:	d910      	bls.n	8003378 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003356:	4b67      	ldr	r3, [pc, #412]	; (80034f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f023 0207 	bic.w	r2, r3, #7
 800335e:	4965      	ldr	r1, [pc, #404]	; (80034f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	4313      	orrs	r3, r2
 8003364:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003366:	4b63      	ldr	r3, [pc, #396]	; (80034f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0307 	and.w	r3, r3, #7
 800336e:	683a      	ldr	r2, [r7, #0]
 8003370:	429a      	cmp	r2, r3
 8003372:	d001      	beq.n	8003378 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	e0b8      	b.n	80034ea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 0302 	and.w	r3, r3, #2
 8003380:	2b00      	cmp	r3, #0
 8003382:	d020      	beq.n	80033c6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 0304 	and.w	r3, r3, #4
 800338c:	2b00      	cmp	r3, #0
 800338e:	d005      	beq.n	800339c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003390:	4b59      	ldr	r3, [pc, #356]	; (80034f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	4a58      	ldr	r2, [pc, #352]	; (80034f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003396:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800339a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0308 	and.w	r3, r3, #8
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d005      	beq.n	80033b4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033a8:	4b53      	ldr	r3, [pc, #332]	; (80034f8 <HAL_RCC_ClockConfig+0x1c4>)
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	4a52      	ldr	r2, [pc, #328]	; (80034f8 <HAL_RCC_ClockConfig+0x1c4>)
 80033ae:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80033b2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033b4:	4b50      	ldr	r3, [pc, #320]	; (80034f8 <HAL_RCC_ClockConfig+0x1c4>)
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	494d      	ldr	r1, [pc, #308]	; (80034f8 <HAL_RCC_ClockConfig+0x1c4>)
 80033c2:	4313      	orrs	r3, r2
 80033c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 0301 	and.w	r3, r3, #1
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d040      	beq.n	8003454 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d107      	bne.n	80033ea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033da:	4b47      	ldr	r3, [pc, #284]	; (80034f8 <HAL_RCC_ClockConfig+0x1c4>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d115      	bne.n	8003412 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e07f      	b.n	80034ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d107      	bne.n	8003402 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033f2:	4b41      	ldr	r3, [pc, #260]	; (80034f8 <HAL_RCC_ClockConfig+0x1c4>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d109      	bne.n	8003412 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e073      	b.n	80034ea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003402:	4b3d      	ldr	r3, [pc, #244]	; (80034f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 0302 	and.w	r3, r3, #2
 800340a:	2b00      	cmp	r3, #0
 800340c:	d101      	bne.n	8003412 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e06b      	b.n	80034ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003412:	4b39      	ldr	r3, [pc, #228]	; (80034f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	f023 0203 	bic.w	r2, r3, #3
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	4936      	ldr	r1, [pc, #216]	; (80034f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003420:	4313      	orrs	r3, r2
 8003422:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003424:	f7fe f9a2 	bl	800176c <HAL_GetTick>
 8003428:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800342a:	e00a      	b.n	8003442 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800342c:	f7fe f99e 	bl	800176c <HAL_GetTick>
 8003430:	4602      	mov	r2, r0
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	f241 3288 	movw	r2, #5000	; 0x1388
 800343a:	4293      	cmp	r3, r2
 800343c:	d901      	bls.n	8003442 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	e053      	b.n	80034ea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003442:	4b2d      	ldr	r3, [pc, #180]	; (80034f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	f003 020c 	and.w	r2, r3, #12
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	429a      	cmp	r2, r3
 8003452:	d1eb      	bne.n	800342c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003454:	4b27      	ldr	r3, [pc, #156]	; (80034f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0307 	and.w	r3, r3, #7
 800345c:	683a      	ldr	r2, [r7, #0]
 800345e:	429a      	cmp	r2, r3
 8003460:	d210      	bcs.n	8003484 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003462:	4b24      	ldr	r3, [pc, #144]	; (80034f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f023 0207 	bic.w	r2, r3, #7
 800346a:	4922      	ldr	r1, [pc, #136]	; (80034f4 <HAL_RCC_ClockConfig+0x1c0>)
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	4313      	orrs	r3, r2
 8003470:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003472:	4b20      	ldr	r3, [pc, #128]	; (80034f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 0307 	and.w	r3, r3, #7
 800347a:	683a      	ldr	r2, [r7, #0]
 800347c:	429a      	cmp	r2, r3
 800347e:	d001      	beq.n	8003484 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	e032      	b.n	80034ea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0304 	and.w	r3, r3, #4
 800348c:	2b00      	cmp	r3, #0
 800348e:	d008      	beq.n	80034a2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003490:	4b19      	ldr	r3, [pc, #100]	; (80034f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	4916      	ldr	r1, [pc, #88]	; (80034f8 <HAL_RCC_ClockConfig+0x1c4>)
 800349e:	4313      	orrs	r3, r2
 80034a0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0308 	and.w	r3, r3, #8
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d009      	beq.n	80034c2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80034ae:	4b12      	ldr	r3, [pc, #72]	; (80034f8 <HAL_RCC_ClockConfig+0x1c4>)
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	691b      	ldr	r3, [r3, #16]
 80034ba:	00db      	lsls	r3, r3, #3
 80034bc:	490e      	ldr	r1, [pc, #56]	; (80034f8 <HAL_RCC_ClockConfig+0x1c4>)
 80034be:	4313      	orrs	r3, r2
 80034c0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80034c2:	f000 f821 	bl	8003508 <HAL_RCC_GetSysClockFreq>
 80034c6:	4602      	mov	r2, r0
 80034c8:	4b0b      	ldr	r3, [pc, #44]	; (80034f8 <HAL_RCC_ClockConfig+0x1c4>)
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	091b      	lsrs	r3, r3, #4
 80034ce:	f003 030f 	and.w	r3, r3, #15
 80034d2:	490a      	ldr	r1, [pc, #40]	; (80034fc <HAL_RCC_ClockConfig+0x1c8>)
 80034d4:	5ccb      	ldrb	r3, [r1, r3]
 80034d6:	fa22 f303 	lsr.w	r3, r2, r3
 80034da:	4a09      	ldr	r2, [pc, #36]	; (8003500 <HAL_RCC_ClockConfig+0x1cc>)
 80034dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80034de:	4b09      	ldr	r3, [pc, #36]	; (8003504 <HAL_RCC_ClockConfig+0x1d0>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4618      	mov	r0, r3
 80034e4:	f7fe f900 	bl	80016e8 <HAL_InitTick>

  return HAL_OK;
 80034e8:	2300      	movs	r3, #0
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3710      	adds	r7, #16
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	40022000 	.word	0x40022000
 80034f8:	40021000 	.word	0x40021000
 80034fc:	080088d0 	.word	0x080088d0
 8003500:	20000000 	.word	0x20000000
 8003504:	20000004 	.word	0x20000004

08003508 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003508:	b480      	push	{r7}
 800350a:	b087      	sub	sp, #28
 800350c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800350e:	2300      	movs	r3, #0
 8003510:	60fb      	str	r3, [r7, #12]
 8003512:	2300      	movs	r3, #0
 8003514:	60bb      	str	r3, [r7, #8]
 8003516:	2300      	movs	r3, #0
 8003518:	617b      	str	r3, [r7, #20]
 800351a:	2300      	movs	r3, #0
 800351c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800351e:	2300      	movs	r3, #0
 8003520:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003522:	4b1e      	ldr	r3, [pc, #120]	; (800359c <HAL_RCC_GetSysClockFreq+0x94>)
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f003 030c 	and.w	r3, r3, #12
 800352e:	2b04      	cmp	r3, #4
 8003530:	d002      	beq.n	8003538 <HAL_RCC_GetSysClockFreq+0x30>
 8003532:	2b08      	cmp	r3, #8
 8003534:	d003      	beq.n	800353e <HAL_RCC_GetSysClockFreq+0x36>
 8003536:	e027      	b.n	8003588 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003538:	4b19      	ldr	r3, [pc, #100]	; (80035a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800353a:	613b      	str	r3, [r7, #16]
      break;
 800353c:	e027      	b.n	800358e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	0c9b      	lsrs	r3, r3, #18
 8003542:	f003 030f 	and.w	r3, r3, #15
 8003546:	4a17      	ldr	r2, [pc, #92]	; (80035a4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003548:	5cd3      	ldrb	r3, [r2, r3]
 800354a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003552:	2b00      	cmp	r3, #0
 8003554:	d010      	beq.n	8003578 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003556:	4b11      	ldr	r3, [pc, #68]	; (800359c <HAL_RCC_GetSysClockFreq+0x94>)
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	0c5b      	lsrs	r3, r3, #17
 800355c:	f003 0301 	and.w	r3, r3, #1
 8003560:	4a11      	ldr	r2, [pc, #68]	; (80035a8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003562:	5cd3      	ldrb	r3, [r2, r3]
 8003564:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a0d      	ldr	r2, [pc, #52]	; (80035a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800356a:	fb03 f202 	mul.w	r2, r3, r2
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	fbb2 f3f3 	udiv	r3, r2, r3
 8003574:	617b      	str	r3, [r7, #20]
 8003576:	e004      	b.n	8003582 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	4a0c      	ldr	r2, [pc, #48]	; (80035ac <HAL_RCC_GetSysClockFreq+0xa4>)
 800357c:	fb02 f303 	mul.w	r3, r2, r3
 8003580:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	613b      	str	r3, [r7, #16]
      break;
 8003586:	e002      	b.n	800358e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003588:	4b05      	ldr	r3, [pc, #20]	; (80035a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800358a:	613b      	str	r3, [r7, #16]
      break;
 800358c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800358e:	693b      	ldr	r3, [r7, #16]
}
 8003590:	4618      	mov	r0, r3
 8003592:	371c      	adds	r7, #28
 8003594:	46bd      	mov	sp, r7
 8003596:	bc80      	pop	{r7}
 8003598:	4770      	bx	lr
 800359a:	bf00      	nop
 800359c:	40021000 	.word	0x40021000
 80035a0:	007a1200 	.word	0x007a1200
 80035a4:	080088e8 	.word	0x080088e8
 80035a8:	080088f8 	.word	0x080088f8
 80035ac:	003d0900 	.word	0x003d0900

080035b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035b0:	b480      	push	{r7}
 80035b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035b4:	4b02      	ldr	r3, [pc, #8]	; (80035c0 <HAL_RCC_GetHCLKFreq+0x10>)
 80035b6:	681b      	ldr	r3, [r3, #0]
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bc80      	pop	{r7}
 80035be:	4770      	bx	lr
 80035c0:	20000000 	.word	0x20000000

080035c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80035c8:	f7ff fff2 	bl	80035b0 <HAL_RCC_GetHCLKFreq>
 80035cc:	4602      	mov	r2, r0
 80035ce:	4b05      	ldr	r3, [pc, #20]	; (80035e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	0a1b      	lsrs	r3, r3, #8
 80035d4:	f003 0307 	and.w	r3, r3, #7
 80035d8:	4903      	ldr	r1, [pc, #12]	; (80035e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035da:	5ccb      	ldrb	r3, [r1, r3]
 80035dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	40021000 	.word	0x40021000
 80035e8:	080088e0 	.word	0x080088e0

080035ec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b085      	sub	sp, #20
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80035f4:	4b0a      	ldr	r3, [pc, #40]	; (8003620 <RCC_Delay+0x34>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a0a      	ldr	r2, [pc, #40]	; (8003624 <RCC_Delay+0x38>)
 80035fa:	fba2 2303 	umull	r2, r3, r2, r3
 80035fe:	0a5b      	lsrs	r3, r3, #9
 8003600:	687a      	ldr	r2, [r7, #4]
 8003602:	fb02 f303 	mul.w	r3, r2, r3
 8003606:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003608:	bf00      	nop
  }
  while (Delay --);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	1e5a      	subs	r2, r3, #1
 800360e:	60fa      	str	r2, [r7, #12]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d1f9      	bne.n	8003608 <RCC_Delay+0x1c>
}
 8003614:	bf00      	nop
 8003616:	bf00      	nop
 8003618:	3714      	adds	r7, #20
 800361a:	46bd      	mov	sp, r7
 800361c:	bc80      	pop	{r7}
 800361e:	4770      	bx	lr
 8003620:	20000000 	.word	0x20000000
 8003624:	10624dd3 	.word	0x10624dd3

08003628 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b086      	sub	sp, #24
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d101      	bne.n	800363c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	e093      	b.n	8003764 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003642:	b2db      	uxtb	r3, r3
 8003644:	2b00      	cmp	r3, #0
 8003646:	d106      	bne.n	8003656 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f7fd ffcf 	bl	80015f4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2202      	movs	r2, #2
 800365a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	687a      	ldr	r2, [r7, #4]
 8003666:	6812      	ldr	r2, [r2, #0]
 8003668:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800366c:	f023 0307 	bic.w	r3, r3, #7
 8003670:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	3304      	adds	r3, #4
 800367a:	4619      	mov	r1, r3
 800367c:	4610      	mov	r0, r2
 800367e:	f000 f903 	bl	8003888 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	699b      	ldr	r3, [r3, #24]
 8003690:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	6a1b      	ldr	r3, [r3, #32]
 8003698:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	697a      	ldr	r2, [r7, #20]
 80036a0:	4313      	orrs	r3, r2
 80036a2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036aa:	f023 0303 	bic.w	r3, r3, #3
 80036ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	689a      	ldr	r2, [r3, #8]
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	699b      	ldr	r3, [r3, #24]
 80036b8:	021b      	lsls	r3, r3, #8
 80036ba:	4313      	orrs	r3, r2
 80036bc:	693a      	ldr	r2, [r7, #16]
 80036be:	4313      	orrs	r3, r2
 80036c0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80036c8:	f023 030c 	bic.w	r3, r3, #12
 80036cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80036d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80036d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	68da      	ldr	r2, [r3, #12]
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	69db      	ldr	r3, [r3, #28]
 80036e2:	021b      	lsls	r3, r3, #8
 80036e4:	4313      	orrs	r3, r2
 80036e6:	693a      	ldr	r2, [r7, #16]
 80036e8:	4313      	orrs	r3, r2
 80036ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	691b      	ldr	r3, [r3, #16]
 80036f0:	011a      	lsls	r2, r3, #4
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	6a1b      	ldr	r3, [r3, #32]
 80036f6:	031b      	lsls	r3, r3, #12
 80036f8:	4313      	orrs	r3, r2
 80036fa:	693a      	ldr	r2, [r7, #16]
 80036fc:	4313      	orrs	r3, r2
 80036fe:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003706:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	685a      	ldr	r2, [r3, #4]
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	695b      	ldr	r3, [r3, #20]
 8003710:	011b      	lsls	r3, r3, #4
 8003712:	4313      	orrs	r3, r2
 8003714:	68fa      	ldr	r2, [r7, #12]
 8003716:	4313      	orrs	r3, r2
 8003718:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	697a      	ldr	r2, [r7, #20]
 8003720:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	693a      	ldr	r2, [r7, #16]
 8003728:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	68fa      	ldr	r2, [r7, #12]
 8003730:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2201      	movs	r2, #1
 8003736:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2201      	movs	r2, #1
 800373e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2201      	movs	r2, #1
 8003746:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2201      	movs	r2, #1
 800374e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2201      	movs	r2, #1
 8003756:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2201      	movs	r2, #1
 800375e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003762:	2300      	movs	r3, #0
}
 8003764:	4618      	mov	r0, r3
 8003766:	3718      	adds	r7, #24
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}

0800376c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b084      	sub	sp, #16
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800377c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003784:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800378c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003794:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d110      	bne.n	80037be <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800379c:	7bfb      	ldrb	r3, [r7, #15]
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d102      	bne.n	80037a8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80037a2:	7b7b      	ldrb	r3, [r7, #13]
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d001      	beq.n	80037ac <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	e069      	b.n	8003880 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2202      	movs	r2, #2
 80037b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2202      	movs	r2, #2
 80037b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80037bc:	e031      	b.n	8003822 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	2b04      	cmp	r3, #4
 80037c2:	d110      	bne.n	80037e6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80037c4:	7bbb      	ldrb	r3, [r7, #14]
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d102      	bne.n	80037d0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80037ca:	7b3b      	ldrb	r3, [r7, #12]
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d001      	beq.n	80037d4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	e055      	b.n	8003880 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2202      	movs	r2, #2
 80037d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2202      	movs	r2, #2
 80037e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80037e4:	e01d      	b.n	8003822 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80037e6:	7bfb      	ldrb	r3, [r7, #15]
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d108      	bne.n	80037fe <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80037ec:	7bbb      	ldrb	r3, [r7, #14]
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d105      	bne.n	80037fe <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80037f2:	7b7b      	ldrb	r3, [r7, #13]
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d102      	bne.n	80037fe <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80037f8:	7b3b      	ldrb	r3, [r7, #12]
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d001      	beq.n	8003802 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e03e      	b.n	8003880 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2202      	movs	r2, #2
 8003806:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2202      	movs	r2, #2
 800380e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2202      	movs	r2, #2
 8003816:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2202      	movs	r2, #2
 800381e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d003      	beq.n	8003830 <HAL_TIM_Encoder_Start+0xc4>
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	2b04      	cmp	r3, #4
 800382c:	d008      	beq.n	8003840 <HAL_TIM_Encoder_Start+0xd4>
 800382e:	e00f      	b.n	8003850 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	2201      	movs	r2, #1
 8003836:	2100      	movs	r1, #0
 8003838:	4618      	mov	r0, r3
 800383a:	f000 f887 	bl	800394c <TIM_CCxChannelCmd>
      break;
 800383e:	e016      	b.n	800386e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	2201      	movs	r2, #1
 8003846:	2104      	movs	r1, #4
 8003848:	4618      	mov	r0, r3
 800384a:	f000 f87f 	bl	800394c <TIM_CCxChannelCmd>
      break;
 800384e:	e00e      	b.n	800386e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	2201      	movs	r2, #1
 8003856:	2100      	movs	r1, #0
 8003858:	4618      	mov	r0, r3
 800385a:	f000 f877 	bl	800394c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	2201      	movs	r2, #1
 8003864:	2104      	movs	r1, #4
 8003866:	4618      	mov	r0, r3
 8003868:	f000 f870 	bl	800394c <TIM_CCxChannelCmd>
      break;
 800386c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f042 0201 	orr.w	r2, r2, #1
 800387c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800387e:	2300      	movs	r3, #0
}
 8003880:	4618      	mov	r0, r3
 8003882:	3710      	adds	r7, #16
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}

08003888 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003888:	b480      	push	{r7}
 800388a:	b085      	sub	sp, #20
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	4a29      	ldr	r2, [pc, #164]	; (8003940 <TIM_Base_SetConfig+0xb8>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d00b      	beq.n	80038b8 <TIM_Base_SetConfig+0x30>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038a6:	d007      	beq.n	80038b8 <TIM_Base_SetConfig+0x30>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	4a26      	ldr	r2, [pc, #152]	; (8003944 <TIM_Base_SetConfig+0xbc>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d003      	beq.n	80038b8 <TIM_Base_SetConfig+0x30>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	4a25      	ldr	r2, [pc, #148]	; (8003948 <TIM_Base_SetConfig+0xc0>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d108      	bne.n	80038ca <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	68fa      	ldr	r2, [r7, #12]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a1c      	ldr	r2, [pc, #112]	; (8003940 <TIM_Base_SetConfig+0xb8>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d00b      	beq.n	80038ea <TIM_Base_SetConfig+0x62>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038d8:	d007      	beq.n	80038ea <TIM_Base_SetConfig+0x62>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a19      	ldr	r2, [pc, #100]	; (8003944 <TIM_Base_SetConfig+0xbc>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d003      	beq.n	80038ea <TIM_Base_SetConfig+0x62>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a18      	ldr	r2, [pc, #96]	; (8003948 <TIM_Base_SetConfig+0xc0>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d108      	bne.n	80038fc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	68db      	ldr	r3, [r3, #12]
 80038f6:	68fa      	ldr	r2, [r7, #12]
 80038f8:	4313      	orrs	r3, r2
 80038fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	695b      	ldr	r3, [r3, #20]
 8003906:	4313      	orrs	r3, r2
 8003908:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	68fa      	ldr	r2, [r7, #12]
 800390e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	689a      	ldr	r2, [r3, #8]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	4a07      	ldr	r2, [pc, #28]	; (8003940 <TIM_Base_SetConfig+0xb8>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d103      	bne.n	8003930 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	691a      	ldr	r2, [r3, #16]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2201      	movs	r2, #1
 8003934:	615a      	str	r2, [r3, #20]
}
 8003936:	bf00      	nop
 8003938:	3714      	adds	r7, #20
 800393a:	46bd      	mov	sp, r7
 800393c:	bc80      	pop	{r7}
 800393e:	4770      	bx	lr
 8003940:	40012c00 	.word	0x40012c00
 8003944:	40000400 	.word	0x40000400
 8003948:	40000800 	.word	0x40000800

0800394c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800394c:	b480      	push	{r7}
 800394e:	b087      	sub	sp, #28
 8003950:	af00      	add	r7, sp, #0
 8003952:	60f8      	str	r0, [r7, #12]
 8003954:	60b9      	str	r1, [r7, #8]
 8003956:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	f003 031f 	and.w	r3, r3, #31
 800395e:	2201      	movs	r2, #1
 8003960:	fa02 f303 	lsl.w	r3, r2, r3
 8003964:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	6a1a      	ldr	r2, [r3, #32]
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	43db      	mvns	r3, r3
 800396e:	401a      	ands	r2, r3
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6a1a      	ldr	r2, [r3, #32]
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	f003 031f 	and.w	r3, r3, #31
 800397e:	6879      	ldr	r1, [r7, #4]
 8003980:	fa01 f303 	lsl.w	r3, r1, r3
 8003984:	431a      	orrs	r2, r3
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	621a      	str	r2, [r3, #32]
}
 800398a:	bf00      	nop
 800398c:	371c      	adds	r7, #28
 800398e:	46bd      	mov	sp, r7
 8003990:	bc80      	pop	{r7}
 8003992:	4770      	bx	lr

08003994 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003994:	b480      	push	{r7}
 8003996:	b085      	sub	sp, #20
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
 800399c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d101      	bne.n	80039ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80039a8:	2302      	movs	r3, #2
 80039aa:	e046      	b.n	8003a3a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2201      	movs	r2, #1
 80039b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2202      	movs	r2, #2
 80039b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	68fa      	ldr	r2, [r7, #12]
 80039da:	4313      	orrs	r3, r2
 80039dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	68fa      	ldr	r2, [r7, #12]
 80039e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a16      	ldr	r2, [pc, #88]	; (8003a44 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d00e      	beq.n	8003a0e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039f8:	d009      	beq.n	8003a0e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a12      	ldr	r2, [pc, #72]	; (8003a48 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d004      	beq.n	8003a0e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a10      	ldr	r2, [pc, #64]	; (8003a4c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d10c      	bne.n	8003a28 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a14:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	68ba      	ldr	r2, [r7, #8]
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	68ba      	ldr	r2, [r7, #8]
 8003a26:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a38:	2300      	movs	r3, #0
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3714      	adds	r7, #20
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bc80      	pop	{r7}
 8003a42:	4770      	bx	lr
 8003a44:	40012c00 	.word	0x40012c00
 8003a48:	40000400 	.word	0x40000400
 8003a4c:	40000800 	.word	0x40000800

08003a50 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8003a50:	b480      	push	{r7}
 8003a52:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8003a54:	bf00      	nop
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bc80      	pop	{r7}
 8003a5a:	4770      	bx	lr

08003a5c <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b086      	sub	sp, #24
 8003a60:	af04      	add	r7, sp, #16
 8003a62:	4603      	mov	r3, r0
 8003a64:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8003a66:	f04f 33ff 	mov.w	r3, #4294967295
 8003a6a:	9302      	str	r3, [sp, #8]
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	9301      	str	r3, [sp, #4]
 8003a70:	1dfb      	adds	r3, r7, #7
 8003a72:	9300      	str	r3, [sp, #0]
 8003a74:	2301      	movs	r3, #1
 8003a76:	2200      	movs	r2, #0
 8003a78:	2178      	movs	r1, #120	; 0x78
 8003a7a:	4803      	ldr	r0, [pc, #12]	; (8003a88 <ssd1306_WriteCommand+0x2c>)
 8003a7c:	f7fe fac2 	bl	8002004 <HAL_I2C_Mem_Write>
}
 8003a80:	bf00      	nop
 8003a82:	3708      	adds	r7, #8
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}
 8003a88:	20000260 	.word	0x20000260

08003a8c <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b086      	sub	sp, #24
 8003a90:	af04      	add	r7, sp, #16
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	f04f 32ff 	mov.w	r2, #4294967295
 8003a9e:	9202      	str	r2, [sp, #8]
 8003aa0:	9301      	str	r3, [sp, #4]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	9300      	str	r3, [sp, #0]
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	2240      	movs	r2, #64	; 0x40
 8003aaa:	2178      	movs	r1, #120	; 0x78
 8003aac:	4803      	ldr	r0, [pc, #12]	; (8003abc <ssd1306_WriteData+0x30>)
 8003aae:	f7fe faa9 	bl	8002004 <HAL_I2C_Mem_Write>
}
 8003ab2:	bf00      	nop
 8003ab4:	3708      	adds	r7, #8
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	bf00      	nop
 8003abc:	20000260 	.word	0x20000260

08003ac0 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8003ac4:	f7ff ffc4 	bl	8003a50 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8003ac8:	2064      	movs	r0, #100	; 0x64
 8003aca:	f7fd fe59 	bl	8001780 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8003ace:	2000      	movs	r0, #0
 8003ad0:	f000 f9d6 	bl	8003e80 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8003ad4:	2020      	movs	r0, #32
 8003ad6:	f7ff ffc1 	bl	8003a5c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8003ada:	2000      	movs	r0, #0
 8003adc:	f7ff ffbe 	bl	8003a5c <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8003ae0:	20b0      	movs	r0, #176	; 0xb0
 8003ae2:	f7ff ffbb 	bl	8003a5c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8003ae6:	20c8      	movs	r0, #200	; 0xc8
 8003ae8:	f7ff ffb8 	bl	8003a5c <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8003aec:	2000      	movs	r0, #0
 8003aee:	f7ff ffb5 	bl	8003a5c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8003af2:	2010      	movs	r0, #16
 8003af4:	f7ff ffb2 	bl	8003a5c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8003af8:	2040      	movs	r0, #64	; 0x40
 8003afa:	f7ff ffaf 	bl	8003a5c <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8003afe:	20ff      	movs	r0, #255	; 0xff
 8003b00:	f000 f9aa 	bl	8003e58 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8003b04:	20a1      	movs	r0, #161	; 0xa1
 8003b06:	f7ff ffa9 	bl	8003a5c <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8003b0a:	20a6      	movs	r0, #166	; 0xa6
 8003b0c:	f7ff ffa6 	bl	8003a5c <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8003b10:	20a8      	movs	r0, #168	; 0xa8
 8003b12:	f7ff ffa3 	bl	8003a5c <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8003b16:	203f      	movs	r0, #63	; 0x3f
 8003b18:	f7ff ffa0 	bl	8003a5c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8003b1c:	20a4      	movs	r0, #164	; 0xa4
 8003b1e:	f7ff ff9d 	bl	8003a5c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8003b22:	20d3      	movs	r0, #211	; 0xd3
 8003b24:	f7ff ff9a 	bl	8003a5c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8003b28:	2000      	movs	r0, #0
 8003b2a:	f7ff ff97 	bl	8003a5c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8003b2e:	20d5      	movs	r0, #213	; 0xd5
 8003b30:	f7ff ff94 	bl	8003a5c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8003b34:	20f0      	movs	r0, #240	; 0xf0
 8003b36:	f7ff ff91 	bl	8003a5c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8003b3a:	20d9      	movs	r0, #217	; 0xd9
 8003b3c:	f7ff ff8e 	bl	8003a5c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8003b40:	2022      	movs	r0, #34	; 0x22
 8003b42:	f7ff ff8b 	bl	8003a5c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8003b46:	20da      	movs	r0, #218	; 0xda
 8003b48:	f7ff ff88 	bl	8003a5c <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8003b4c:	2012      	movs	r0, #18
 8003b4e:	f7ff ff85 	bl	8003a5c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8003b52:	20db      	movs	r0, #219	; 0xdb
 8003b54:	f7ff ff82 	bl	8003a5c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8003b58:	2020      	movs	r0, #32
 8003b5a:	f7ff ff7f 	bl	8003a5c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8003b5e:	208d      	movs	r0, #141	; 0x8d
 8003b60:	f7ff ff7c 	bl	8003a5c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8003b64:	2014      	movs	r0, #20
 8003b66:	f7ff ff79 	bl	8003a5c <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8003b6a:	2001      	movs	r0, #1
 8003b6c:	f000 f988 	bl	8003e80 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8003b70:	2000      	movs	r0, #0
 8003b72:	f000 f80f 	bl	8003b94 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8003b76:	f000 f82f 	bl	8003bd8 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8003b7a:	4b05      	ldr	r3, [pc, #20]	; (8003b90 <ssd1306_Init+0xd0>)
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8003b80:	4b03      	ldr	r3, [pc, #12]	; (8003b90 <ssd1306_Init+0xd0>)
 8003b82:	2200      	movs	r2, #0
 8003b84:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8003b86:	4b02      	ldr	r3, [pc, #8]	; (8003b90 <ssd1306_Init+0xd0>)
 8003b88:	2201      	movs	r2, #1
 8003b8a:	711a      	strb	r2, [r3, #4]
}
 8003b8c:	bf00      	nop
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	20000730 	.word	0x20000730

08003b94 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8003b94:	b480      	push	{r7}
 8003b96:	b085      	sub	sp, #20
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	60fb      	str	r3, [r7, #12]
 8003ba2:	e00d      	b.n	8003bc0 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8003ba4:	79fb      	ldrb	r3, [r7, #7]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d101      	bne.n	8003bae <ssd1306_Fill+0x1a>
 8003baa:	2100      	movs	r1, #0
 8003bac:	e000      	b.n	8003bb0 <ssd1306_Fill+0x1c>
 8003bae:	21ff      	movs	r1, #255	; 0xff
 8003bb0:	4a08      	ldr	r2, [pc, #32]	; (8003bd4 <ssd1306_Fill+0x40>)
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	4413      	add	r3, r2
 8003bb6:	460a      	mov	r2, r1
 8003bb8:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	3301      	adds	r3, #1
 8003bbe:	60fb      	str	r3, [r7, #12]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bc6:	d3ed      	bcc.n	8003ba4 <ssd1306_Fill+0x10>
    }
}
 8003bc8:	bf00      	nop
 8003bca:	bf00      	nop
 8003bcc:	3714      	adds	r7, #20
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bc80      	pop	{r7}
 8003bd2:	4770      	bx	lr
 8003bd4:	20000330 	.word	0x20000330

08003bd8 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b082      	sub	sp, #8
 8003bdc:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8003bde:	2300      	movs	r3, #0
 8003be0:	71fb      	strb	r3, [r7, #7]
 8003be2:	e016      	b.n	8003c12 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8003be4:	79fb      	ldrb	r3, [r7, #7]
 8003be6:	3b50      	subs	r3, #80	; 0x50
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	4618      	mov	r0, r3
 8003bec:	f7ff ff36 	bl	8003a5c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8003bf0:	2000      	movs	r0, #0
 8003bf2:	f7ff ff33 	bl	8003a5c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8003bf6:	2010      	movs	r0, #16
 8003bf8:	f7ff ff30 	bl	8003a5c <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8003bfc:	79fb      	ldrb	r3, [r7, #7]
 8003bfe:	01db      	lsls	r3, r3, #7
 8003c00:	4a08      	ldr	r2, [pc, #32]	; (8003c24 <ssd1306_UpdateScreen+0x4c>)
 8003c02:	4413      	add	r3, r2
 8003c04:	2180      	movs	r1, #128	; 0x80
 8003c06:	4618      	mov	r0, r3
 8003c08:	f7ff ff40 	bl	8003a8c <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8003c0c:	79fb      	ldrb	r3, [r7, #7]
 8003c0e:	3301      	adds	r3, #1
 8003c10:	71fb      	strb	r3, [r7, #7]
 8003c12:	79fb      	ldrb	r3, [r7, #7]
 8003c14:	2b07      	cmp	r3, #7
 8003c16:	d9e5      	bls.n	8003be4 <ssd1306_UpdateScreen+0xc>
    }
}
 8003c18:	bf00      	nop
 8003c1a:	bf00      	nop
 8003c1c:	3708      	adds	r7, #8
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	bf00      	nop
 8003c24:	20000330 	.word	0x20000330

08003c28 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8003c28:	b480      	push	{r7}
 8003c2a:	b083      	sub	sp, #12
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	4603      	mov	r3, r0
 8003c30:	71fb      	strb	r3, [r7, #7]
 8003c32:	460b      	mov	r3, r1
 8003c34:	71bb      	strb	r3, [r7, #6]
 8003c36:	4613      	mov	r3, r2
 8003c38:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8003c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	db3d      	blt.n	8003cbe <ssd1306_DrawPixel+0x96>
 8003c42:	79bb      	ldrb	r3, [r7, #6]
 8003c44:	2b3f      	cmp	r3, #63	; 0x3f
 8003c46:	d83a      	bhi.n	8003cbe <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8003c48:	797b      	ldrb	r3, [r7, #5]
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d11a      	bne.n	8003c84 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8003c4e:	79fa      	ldrb	r2, [r7, #7]
 8003c50:	79bb      	ldrb	r3, [r7, #6]
 8003c52:	08db      	lsrs	r3, r3, #3
 8003c54:	b2d8      	uxtb	r0, r3
 8003c56:	4603      	mov	r3, r0
 8003c58:	01db      	lsls	r3, r3, #7
 8003c5a:	4413      	add	r3, r2
 8003c5c:	4a1a      	ldr	r2, [pc, #104]	; (8003cc8 <ssd1306_DrawPixel+0xa0>)
 8003c5e:	5cd3      	ldrb	r3, [r2, r3]
 8003c60:	b25a      	sxtb	r2, r3
 8003c62:	79bb      	ldrb	r3, [r7, #6]
 8003c64:	f003 0307 	and.w	r3, r3, #7
 8003c68:	2101      	movs	r1, #1
 8003c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c6e:	b25b      	sxtb	r3, r3
 8003c70:	4313      	orrs	r3, r2
 8003c72:	b259      	sxtb	r1, r3
 8003c74:	79fa      	ldrb	r2, [r7, #7]
 8003c76:	4603      	mov	r3, r0
 8003c78:	01db      	lsls	r3, r3, #7
 8003c7a:	4413      	add	r3, r2
 8003c7c:	b2c9      	uxtb	r1, r1
 8003c7e:	4a12      	ldr	r2, [pc, #72]	; (8003cc8 <ssd1306_DrawPixel+0xa0>)
 8003c80:	54d1      	strb	r1, [r2, r3]
 8003c82:	e01d      	b.n	8003cc0 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8003c84:	79fa      	ldrb	r2, [r7, #7]
 8003c86:	79bb      	ldrb	r3, [r7, #6]
 8003c88:	08db      	lsrs	r3, r3, #3
 8003c8a:	b2d8      	uxtb	r0, r3
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	01db      	lsls	r3, r3, #7
 8003c90:	4413      	add	r3, r2
 8003c92:	4a0d      	ldr	r2, [pc, #52]	; (8003cc8 <ssd1306_DrawPixel+0xa0>)
 8003c94:	5cd3      	ldrb	r3, [r2, r3]
 8003c96:	b25a      	sxtb	r2, r3
 8003c98:	79bb      	ldrb	r3, [r7, #6]
 8003c9a:	f003 0307 	and.w	r3, r3, #7
 8003c9e:	2101      	movs	r1, #1
 8003ca0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ca4:	b25b      	sxtb	r3, r3
 8003ca6:	43db      	mvns	r3, r3
 8003ca8:	b25b      	sxtb	r3, r3
 8003caa:	4013      	ands	r3, r2
 8003cac:	b259      	sxtb	r1, r3
 8003cae:	79fa      	ldrb	r2, [r7, #7]
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	01db      	lsls	r3, r3, #7
 8003cb4:	4413      	add	r3, r2
 8003cb6:	b2c9      	uxtb	r1, r1
 8003cb8:	4a03      	ldr	r2, [pc, #12]	; (8003cc8 <ssd1306_DrawPixel+0xa0>)
 8003cba:	54d1      	strb	r1, [r2, r3]
 8003cbc:	e000      	b.n	8003cc0 <ssd1306_DrawPixel+0x98>
        return;
 8003cbe:	bf00      	nop
    }
}
 8003cc0:	370c      	adds	r7, #12
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bc80      	pop	{r7}
 8003cc6:	4770      	bx	lr
 8003cc8:	20000330 	.word	0x20000330

08003ccc <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8003ccc:	b590      	push	{r4, r7, lr}
 8003cce:	b089      	sub	sp, #36	; 0x24
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	4604      	mov	r4, r0
 8003cd4:	1d38      	adds	r0, r7, #4
 8003cd6:	e880 0006 	stmia.w	r0, {r1, r2}
 8003cda:	461a      	mov	r2, r3
 8003cdc:	4623      	mov	r3, r4
 8003cde:	73fb      	strb	r3, [r7, #15]
 8003ce0:	4613      	mov	r3, r2
 8003ce2:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8003ce4:	7bfb      	ldrb	r3, [r7, #15]
 8003ce6:	2b1f      	cmp	r3, #31
 8003ce8:	d902      	bls.n	8003cf0 <ssd1306_WriteChar+0x24>
 8003cea:	7bfb      	ldrb	r3, [r7, #15]
 8003cec:	2b7e      	cmp	r3, #126	; 0x7e
 8003cee:	d901      	bls.n	8003cf4 <ssd1306_WriteChar+0x28>
        return 0;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	e06d      	b.n	8003dd0 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8003cf4:	4b38      	ldr	r3, [pc, #224]	; (8003dd8 <ssd1306_WriteChar+0x10c>)
 8003cf6:	881b      	ldrh	r3, [r3, #0]
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	793b      	ldrb	r3, [r7, #4]
 8003cfc:	4413      	add	r3, r2
 8003cfe:	2b80      	cmp	r3, #128	; 0x80
 8003d00:	dc06      	bgt.n	8003d10 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8003d02:	4b35      	ldr	r3, [pc, #212]	; (8003dd8 <ssd1306_WriteChar+0x10c>)
 8003d04:	885b      	ldrh	r3, [r3, #2]
 8003d06:	461a      	mov	r2, r3
 8003d08:	797b      	ldrb	r3, [r7, #5]
 8003d0a:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8003d0c:	2b40      	cmp	r3, #64	; 0x40
 8003d0e:	dd01      	ble.n	8003d14 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8003d10:	2300      	movs	r3, #0
 8003d12:	e05d      	b.n	8003dd0 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8003d14:	2300      	movs	r3, #0
 8003d16:	61fb      	str	r3, [r7, #28]
 8003d18:	e04c      	b.n	8003db4 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8003d1a:	68ba      	ldr	r2, [r7, #8]
 8003d1c:	7bfb      	ldrb	r3, [r7, #15]
 8003d1e:	3b20      	subs	r3, #32
 8003d20:	7979      	ldrb	r1, [r7, #5]
 8003d22:	fb01 f303 	mul.w	r3, r1, r3
 8003d26:	4619      	mov	r1, r3
 8003d28:	69fb      	ldr	r3, [r7, #28]
 8003d2a:	440b      	add	r3, r1
 8003d2c:	005b      	lsls	r3, r3, #1
 8003d2e:	4413      	add	r3, r2
 8003d30:	881b      	ldrh	r3, [r3, #0]
 8003d32:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8003d34:	2300      	movs	r3, #0
 8003d36:	61bb      	str	r3, [r7, #24]
 8003d38:	e034      	b.n	8003da4 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8003d3a:	697a      	ldr	r2, [r7, #20]
 8003d3c:	69bb      	ldr	r3, [r7, #24]
 8003d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d012      	beq.n	8003d70 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8003d4a:	4b23      	ldr	r3, [pc, #140]	; (8003dd8 <ssd1306_WriteChar+0x10c>)
 8003d4c:	881b      	ldrh	r3, [r3, #0]
 8003d4e:	b2da      	uxtb	r2, r3
 8003d50:	69bb      	ldr	r3, [r7, #24]
 8003d52:	b2db      	uxtb	r3, r3
 8003d54:	4413      	add	r3, r2
 8003d56:	b2d8      	uxtb	r0, r3
 8003d58:	4b1f      	ldr	r3, [pc, #124]	; (8003dd8 <ssd1306_WriteChar+0x10c>)
 8003d5a:	885b      	ldrh	r3, [r3, #2]
 8003d5c:	b2da      	uxtb	r2, r3
 8003d5e:	69fb      	ldr	r3, [r7, #28]
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	4413      	add	r3, r2
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	7bba      	ldrb	r2, [r7, #14]
 8003d68:	4619      	mov	r1, r3
 8003d6a:	f7ff ff5d 	bl	8003c28 <ssd1306_DrawPixel>
 8003d6e:	e016      	b.n	8003d9e <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8003d70:	4b19      	ldr	r3, [pc, #100]	; (8003dd8 <ssd1306_WriteChar+0x10c>)
 8003d72:	881b      	ldrh	r3, [r3, #0]
 8003d74:	b2da      	uxtb	r2, r3
 8003d76:	69bb      	ldr	r3, [r7, #24]
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	4413      	add	r3, r2
 8003d7c:	b2d8      	uxtb	r0, r3
 8003d7e:	4b16      	ldr	r3, [pc, #88]	; (8003dd8 <ssd1306_WriteChar+0x10c>)
 8003d80:	885b      	ldrh	r3, [r3, #2]
 8003d82:	b2da      	uxtb	r2, r3
 8003d84:	69fb      	ldr	r3, [r7, #28]
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	4413      	add	r3, r2
 8003d8a:	b2d9      	uxtb	r1, r3
 8003d8c:	7bbb      	ldrb	r3, [r7, #14]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	bf0c      	ite	eq
 8003d92:	2301      	moveq	r3, #1
 8003d94:	2300      	movne	r3, #0
 8003d96:	b2db      	uxtb	r3, r3
 8003d98:	461a      	mov	r2, r3
 8003d9a:	f7ff ff45 	bl	8003c28 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8003d9e:	69bb      	ldr	r3, [r7, #24]
 8003da0:	3301      	adds	r3, #1
 8003da2:	61bb      	str	r3, [r7, #24]
 8003da4:	793b      	ldrb	r3, [r7, #4]
 8003da6:	461a      	mov	r2, r3
 8003da8:	69bb      	ldr	r3, [r7, #24]
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d3c5      	bcc.n	8003d3a <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	3301      	adds	r3, #1
 8003db2:	61fb      	str	r3, [r7, #28]
 8003db4:	797b      	ldrb	r3, [r7, #5]
 8003db6:	461a      	mov	r2, r3
 8003db8:	69fb      	ldr	r3, [r7, #28]
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d3ad      	bcc.n	8003d1a <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8003dbe:	4b06      	ldr	r3, [pc, #24]	; (8003dd8 <ssd1306_WriteChar+0x10c>)
 8003dc0:	881a      	ldrh	r2, [r3, #0]
 8003dc2:	793b      	ldrb	r3, [r7, #4]
 8003dc4:	b29b      	uxth	r3, r3
 8003dc6:	4413      	add	r3, r2
 8003dc8:	b29a      	uxth	r2, r3
 8003dca:	4b03      	ldr	r3, [pc, #12]	; (8003dd8 <ssd1306_WriteChar+0x10c>)
 8003dcc:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8003dce:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3724      	adds	r7, #36	; 0x24
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd90      	pop	{r4, r7, pc}
 8003dd8:	20000730 	.word	0x20000730

08003ddc <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b084      	sub	sp, #16
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	60f8      	str	r0, [r7, #12]
 8003de4:	1d38      	adds	r0, r7, #4
 8003de6:	e880 0006 	stmia.w	r0, {r1, r2}
 8003dea:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8003dec:	e012      	b.n	8003e14 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	7818      	ldrb	r0, [r3, #0]
 8003df2:	78fb      	ldrb	r3, [r7, #3]
 8003df4:	1d3a      	adds	r2, r7, #4
 8003df6:	ca06      	ldmia	r2, {r1, r2}
 8003df8:	f7ff ff68 	bl	8003ccc <ssd1306_WriteChar>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	461a      	mov	r2, r3
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d002      	beq.n	8003e0e <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	781b      	ldrb	r3, [r3, #0]
 8003e0c:	e008      	b.n	8003e20 <ssd1306_WriteString+0x44>
        }
        str++;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	3301      	adds	r3, #1
 8003e12:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	781b      	ldrb	r3, [r3, #0]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d1e8      	bne.n	8003dee <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	781b      	ldrb	r3, [r3, #0]
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3710      	adds	r7, #16
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}

08003e28 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8003e28:	b480      	push	{r7}
 8003e2a:	b083      	sub	sp, #12
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	4603      	mov	r3, r0
 8003e30:	460a      	mov	r2, r1
 8003e32:	71fb      	strb	r3, [r7, #7]
 8003e34:	4613      	mov	r3, r2
 8003e36:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8003e38:	79fb      	ldrb	r3, [r7, #7]
 8003e3a:	b29a      	uxth	r2, r3
 8003e3c:	4b05      	ldr	r3, [pc, #20]	; (8003e54 <ssd1306_SetCursor+0x2c>)
 8003e3e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8003e40:	79bb      	ldrb	r3, [r7, #6]
 8003e42:	b29a      	uxth	r2, r3
 8003e44:	4b03      	ldr	r3, [pc, #12]	; (8003e54 <ssd1306_SetCursor+0x2c>)
 8003e46:	805a      	strh	r2, [r3, #2]
}
 8003e48:	bf00      	nop
 8003e4a:	370c      	adds	r7, #12
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bc80      	pop	{r7}
 8003e50:	4770      	bx	lr
 8003e52:	bf00      	nop
 8003e54:	20000730 	.word	0x20000730

08003e58 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b084      	sub	sp, #16
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	4603      	mov	r3, r0
 8003e60:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8003e62:	2381      	movs	r3, #129	; 0x81
 8003e64:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8003e66:	7bfb      	ldrb	r3, [r7, #15]
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f7ff fdf7 	bl	8003a5c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8003e6e:	79fb      	ldrb	r3, [r7, #7]
 8003e70:	4618      	mov	r0, r3
 8003e72:	f7ff fdf3 	bl	8003a5c <ssd1306_WriteCommand>
}
 8003e76:	bf00      	nop
 8003e78:	3710      	adds	r7, #16
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}
	...

08003e80 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b084      	sub	sp, #16
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	4603      	mov	r3, r0
 8003e88:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8003e8a:	79fb      	ldrb	r3, [r7, #7]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d005      	beq.n	8003e9c <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8003e90:	23af      	movs	r3, #175	; 0xaf
 8003e92:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8003e94:	4b08      	ldr	r3, [pc, #32]	; (8003eb8 <ssd1306_SetDisplayOn+0x38>)
 8003e96:	2201      	movs	r2, #1
 8003e98:	715a      	strb	r2, [r3, #5]
 8003e9a:	e004      	b.n	8003ea6 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8003e9c:	23ae      	movs	r3, #174	; 0xae
 8003e9e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8003ea0:	4b05      	ldr	r3, [pc, #20]	; (8003eb8 <ssd1306_SetDisplayOn+0x38>)
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8003ea6:	7bfb      	ldrb	r3, [r7, #15]
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f7ff fdd7 	bl	8003a5c <ssd1306_WriteCommand>
}
 8003eae:	bf00      	nop
 8003eb0:	3710      	adds	r7, #16
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
 8003eb6:	bf00      	nop
 8003eb8:	20000730 	.word	0x20000730

08003ebc <__errno>:
 8003ebc:	4b01      	ldr	r3, [pc, #4]	; (8003ec4 <__errno+0x8>)
 8003ebe:	6818      	ldr	r0, [r3, #0]
 8003ec0:	4770      	bx	lr
 8003ec2:	bf00      	nop
 8003ec4:	2000001c 	.word	0x2000001c

08003ec8 <__libc_init_array>:
 8003ec8:	b570      	push	{r4, r5, r6, lr}
 8003eca:	2600      	movs	r6, #0
 8003ecc:	4d0c      	ldr	r5, [pc, #48]	; (8003f00 <__libc_init_array+0x38>)
 8003ece:	4c0d      	ldr	r4, [pc, #52]	; (8003f04 <__libc_init_array+0x3c>)
 8003ed0:	1b64      	subs	r4, r4, r5
 8003ed2:	10a4      	asrs	r4, r4, #2
 8003ed4:	42a6      	cmp	r6, r4
 8003ed6:	d109      	bne.n	8003eec <__libc_init_array+0x24>
 8003ed8:	f004 fc50 	bl	800877c <_init>
 8003edc:	2600      	movs	r6, #0
 8003ede:	4d0a      	ldr	r5, [pc, #40]	; (8003f08 <__libc_init_array+0x40>)
 8003ee0:	4c0a      	ldr	r4, [pc, #40]	; (8003f0c <__libc_init_array+0x44>)
 8003ee2:	1b64      	subs	r4, r4, r5
 8003ee4:	10a4      	asrs	r4, r4, #2
 8003ee6:	42a6      	cmp	r6, r4
 8003ee8:	d105      	bne.n	8003ef6 <__libc_init_array+0x2e>
 8003eea:	bd70      	pop	{r4, r5, r6, pc}
 8003eec:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ef0:	4798      	blx	r3
 8003ef2:	3601      	adds	r6, #1
 8003ef4:	e7ee      	b.n	8003ed4 <__libc_init_array+0xc>
 8003ef6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003efa:	4798      	blx	r3
 8003efc:	3601      	adds	r6, #1
 8003efe:	e7f2      	b.n	8003ee6 <__libc_init_array+0x1e>
 8003f00:	0800a26c 	.word	0x0800a26c
 8003f04:	0800a26c 	.word	0x0800a26c
 8003f08:	0800a26c 	.word	0x0800a26c
 8003f0c:	0800a270 	.word	0x0800a270

08003f10 <memcpy>:
 8003f10:	440a      	add	r2, r1
 8003f12:	4291      	cmp	r1, r2
 8003f14:	f100 33ff 	add.w	r3, r0, #4294967295
 8003f18:	d100      	bne.n	8003f1c <memcpy+0xc>
 8003f1a:	4770      	bx	lr
 8003f1c:	b510      	push	{r4, lr}
 8003f1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003f22:	4291      	cmp	r1, r2
 8003f24:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003f28:	d1f9      	bne.n	8003f1e <memcpy+0xe>
 8003f2a:	bd10      	pop	{r4, pc}

08003f2c <memmove>:
 8003f2c:	4288      	cmp	r0, r1
 8003f2e:	b510      	push	{r4, lr}
 8003f30:	eb01 0402 	add.w	r4, r1, r2
 8003f34:	d902      	bls.n	8003f3c <memmove+0x10>
 8003f36:	4284      	cmp	r4, r0
 8003f38:	4623      	mov	r3, r4
 8003f3a:	d807      	bhi.n	8003f4c <memmove+0x20>
 8003f3c:	1e43      	subs	r3, r0, #1
 8003f3e:	42a1      	cmp	r1, r4
 8003f40:	d008      	beq.n	8003f54 <memmove+0x28>
 8003f42:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003f46:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003f4a:	e7f8      	b.n	8003f3e <memmove+0x12>
 8003f4c:	4601      	mov	r1, r0
 8003f4e:	4402      	add	r2, r0
 8003f50:	428a      	cmp	r2, r1
 8003f52:	d100      	bne.n	8003f56 <memmove+0x2a>
 8003f54:	bd10      	pop	{r4, pc}
 8003f56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003f5a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003f5e:	e7f7      	b.n	8003f50 <memmove+0x24>

08003f60 <memset>:
 8003f60:	4603      	mov	r3, r0
 8003f62:	4402      	add	r2, r0
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d100      	bne.n	8003f6a <memset+0xa>
 8003f68:	4770      	bx	lr
 8003f6a:	f803 1b01 	strb.w	r1, [r3], #1
 8003f6e:	e7f9      	b.n	8003f64 <memset+0x4>

08003f70 <__cvt>:
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f76:	461f      	mov	r7, r3
 8003f78:	bfbb      	ittet	lt
 8003f7a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8003f7e:	461f      	movlt	r7, r3
 8003f80:	2300      	movge	r3, #0
 8003f82:	232d      	movlt	r3, #45	; 0x2d
 8003f84:	b088      	sub	sp, #32
 8003f86:	4614      	mov	r4, r2
 8003f88:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003f8a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003f8c:	7013      	strb	r3, [r2, #0]
 8003f8e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003f90:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8003f94:	f023 0820 	bic.w	r8, r3, #32
 8003f98:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003f9c:	d005      	beq.n	8003faa <__cvt+0x3a>
 8003f9e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003fa2:	d100      	bne.n	8003fa6 <__cvt+0x36>
 8003fa4:	3501      	adds	r5, #1
 8003fa6:	2302      	movs	r3, #2
 8003fa8:	e000      	b.n	8003fac <__cvt+0x3c>
 8003faa:	2303      	movs	r3, #3
 8003fac:	aa07      	add	r2, sp, #28
 8003fae:	9204      	str	r2, [sp, #16]
 8003fb0:	aa06      	add	r2, sp, #24
 8003fb2:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003fb6:	e9cd 3500 	strd	r3, r5, [sp]
 8003fba:	4622      	mov	r2, r4
 8003fbc:	463b      	mov	r3, r7
 8003fbe:	f001 fd83 	bl	8005ac8 <_dtoa_r>
 8003fc2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003fc6:	4606      	mov	r6, r0
 8003fc8:	d102      	bne.n	8003fd0 <__cvt+0x60>
 8003fca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003fcc:	07db      	lsls	r3, r3, #31
 8003fce:	d522      	bpl.n	8004016 <__cvt+0xa6>
 8003fd0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003fd4:	eb06 0905 	add.w	r9, r6, r5
 8003fd8:	d110      	bne.n	8003ffc <__cvt+0x8c>
 8003fda:	7833      	ldrb	r3, [r6, #0]
 8003fdc:	2b30      	cmp	r3, #48	; 0x30
 8003fde:	d10a      	bne.n	8003ff6 <__cvt+0x86>
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	4620      	mov	r0, r4
 8003fe6:	4639      	mov	r1, r7
 8003fe8:	f7fc fcde 	bl	80009a8 <__aeabi_dcmpeq>
 8003fec:	b918      	cbnz	r0, 8003ff6 <__cvt+0x86>
 8003fee:	f1c5 0501 	rsb	r5, r5, #1
 8003ff2:	f8ca 5000 	str.w	r5, [sl]
 8003ff6:	f8da 3000 	ldr.w	r3, [sl]
 8003ffa:	4499      	add	r9, r3
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	2300      	movs	r3, #0
 8004000:	4620      	mov	r0, r4
 8004002:	4639      	mov	r1, r7
 8004004:	f7fc fcd0 	bl	80009a8 <__aeabi_dcmpeq>
 8004008:	b108      	cbz	r0, 800400e <__cvt+0x9e>
 800400a:	f8cd 901c 	str.w	r9, [sp, #28]
 800400e:	2230      	movs	r2, #48	; 0x30
 8004010:	9b07      	ldr	r3, [sp, #28]
 8004012:	454b      	cmp	r3, r9
 8004014:	d307      	bcc.n	8004026 <__cvt+0xb6>
 8004016:	4630      	mov	r0, r6
 8004018:	9b07      	ldr	r3, [sp, #28]
 800401a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800401c:	1b9b      	subs	r3, r3, r6
 800401e:	6013      	str	r3, [r2, #0]
 8004020:	b008      	add	sp, #32
 8004022:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004026:	1c59      	adds	r1, r3, #1
 8004028:	9107      	str	r1, [sp, #28]
 800402a:	701a      	strb	r2, [r3, #0]
 800402c:	e7f0      	b.n	8004010 <__cvt+0xa0>

0800402e <__exponent>:
 800402e:	4603      	mov	r3, r0
 8004030:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004032:	2900      	cmp	r1, #0
 8004034:	f803 2b02 	strb.w	r2, [r3], #2
 8004038:	bfb6      	itet	lt
 800403a:	222d      	movlt	r2, #45	; 0x2d
 800403c:	222b      	movge	r2, #43	; 0x2b
 800403e:	4249      	neglt	r1, r1
 8004040:	2909      	cmp	r1, #9
 8004042:	7042      	strb	r2, [r0, #1]
 8004044:	dd2b      	ble.n	800409e <__exponent+0x70>
 8004046:	f10d 0407 	add.w	r4, sp, #7
 800404a:	46a4      	mov	ip, r4
 800404c:	270a      	movs	r7, #10
 800404e:	fb91 f6f7 	sdiv	r6, r1, r7
 8004052:	460a      	mov	r2, r1
 8004054:	46a6      	mov	lr, r4
 8004056:	fb07 1516 	mls	r5, r7, r6, r1
 800405a:	2a63      	cmp	r2, #99	; 0x63
 800405c:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8004060:	4631      	mov	r1, r6
 8004062:	f104 34ff 	add.w	r4, r4, #4294967295
 8004066:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800406a:	dcf0      	bgt.n	800404e <__exponent+0x20>
 800406c:	3130      	adds	r1, #48	; 0x30
 800406e:	f1ae 0502 	sub.w	r5, lr, #2
 8004072:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004076:	4629      	mov	r1, r5
 8004078:	1c44      	adds	r4, r0, #1
 800407a:	4561      	cmp	r1, ip
 800407c:	d30a      	bcc.n	8004094 <__exponent+0x66>
 800407e:	f10d 0209 	add.w	r2, sp, #9
 8004082:	eba2 020e 	sub.w	r2, r2, lr
 8004086:	4565      	cmp	r5, ip
 8004088:	bf88      	it	hi
 800408a:	2200      	movhi	r2, #0
 800408c:	4413      	add	r3, r2
 800408e:	1a18      	subs	r0, r3, r0
 8004090:	b003      	add	sp, #12
 8004092:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004094:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004098:	f804 2f01 	strb.w	r2, [r4, #1]!
 800409c:	e7ed      	b.n	800407a <__exponent+0x4c>
 800409e:	2330      	movs	r3, #48	; 0x30
 80040a0:	3130      	adds	r1, #48	; 0x30
 80040a2:	7083      	strb	r3, [r0, #2]
 80040a4:	70c1      	strb	r1, [r0, #3]
 80040a6:	1d03      	adds	r3, r0, #4
 80040a8:	e7f1      	b.n	800408e <__exponent+0x60>
	...

080040ac <_printf_float>:
 80040ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040b0:	b091      	sub	sp, #68	; 0x44
 80040b2:	460c      	mov	r4, r1
 80040b4:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80040b8:	4616      	mov	r6, r2
 80040ba:	461f      	mov	r7, r3
 80040bc:	4605      	mov	r5, r0
 80040be:	f002 fe57 	bl	8006d70 <_localeconv_r>
 80040c2:	6803      	ldr	r3, [r0, #0]
 80040c4:	4618      	mov	r0, r3
 80040c6:	9309      	str	r3, [sp, #36]	; 0x24
 80040c8:	f7fc f842 	bl	8000150 <strlen>
 80040cc:	2300      	movs	r3, #0
 80040ce:	930e      	str	r3, [sp, #56]	; 0x38
 80040d0:	f8d8 3000 	ldr.w	r3, [r8]
 80040d4:	900a      	str	r0, [sp, #40]	; 0x28
 80040d6:	3307      	adds	r3, #7
 80040d8:	f023 0307 	bic.w	r3, r3, #7
 80040dc:	f103 0208 	add.w	r2, r3, #8
 80040e0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80040e4:	f8d4 b000 	ldr.w	fp, [r4]
 80040e8:	f8c8 2000 	str.w	r2, [r8]
 80040ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040f0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80040f4:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80040f8:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80040fc:	930b      	str	r3, [sp, #44]	; 0x2c
 80040fe:	f04f 32ff 	mov.w	r2, #4294967295
 8004102:	4640      	mov	r0, r8
 8004104:	4b9c      	ldr	r3, [pc, #624]	; (8004378 <_printf_float+0x2cc>)
 8004106:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004108:	f7fc fc80 	bl	8000a0c <__aeabi_dcmpun>
 800410c:	bb70      	cbnz	r0, 800416c <_printf_float+0xc0>
 800410e:	f04f 32ff 	mov.w	r2, #4294967295
 8004112:	4640      	mov	r0, r8
 8004114:	4b98      	ldr	r3, [pc, #608]	; (8004378 <_printf_float+0x2cc>)
 8004116:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004118:	f7fc fc5a 	bl	80009d0 <__aeabi_dcmple>
 800411c:	bb30      	cbnz	r0, 800416c <_printf_float+0xc0>
 800411e:	2200      	movs	r2, #0
 8004120:	2300      	movs	r3, #0
 8004122:	4640      	mov	r0, r8
 8004124:	4651      	mov	r1, sl
 8004126:	f7fc fc49 	bl	80009bc <__aeabi_dcmplt>
 800412a:	b110      	cbz	r0, 8004132 <_printf_float+0x86>
 800412c:	232d      	movs	r3, #45	; 0x2d
 800412e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004132:	4b92      	ldr	r3, [pc, #584]	; (800437c <_printf_float+0x2d0>)
 8004134:	4892      	ldr	r0, [pc, #584]	; (8004380 <_printf_float+0x2d4>)
 8004136:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800413a:	bf94      	ite	ls
 800413c:	4698      	movls	r8, r3
 800413e:	4680      	movhi	r8, r0
 8004140:	2303      	movs	r3, #3
 8004142:	f04f 0a00 	mov.w	sl, #0
 8004146:	6123      	str	r3, [r4, #16]
 8004148:	f02b 0304 	bic.w	r3, fp, #4
 800414c:	6023      	str	r3, [r4, #0]
 800414e:	4633      	mov	r3, r6
 8004150:	4621      	mov	r1, r4
 8004152:	4628      	mov	r0, r5
 8004154:	9700      	str	r7, [sp, #0]
 8004156:	aa0f      	add	r2, sp, #60	; 0x3c
 8004158:	f000 f9d4 	bl	8004504 <_printf_common>
 800415c:	3001      	adds	r0, #1
 800415e:	f040 8090 	bne.w	8004282 <_printf_float+0x1d6>
 8004162:	f04f 30ff 	mov.w	r0, #4294967295
 8004166:	b011      	add	sp, #68	; 0x44
 8004168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800416c:	4642      	mov	r2, r8
 800416e:	4653      	mov	r3, sl
 8004170:	4640      	mov	r0, r8
 8004172:	4651      	mov	r1, sl
 8004174:	f7fc fc4a 	bl	8000a0c <__aeabi_dcmpun>
 8004178:	b148      	cbz	r0, 800418e <_printf_float+0xe2>
 800417a:	f1ba 0f00 	cmp.w	sl, #0
 800417e:	bfb8      	it	lt
 8004180:	232d      	movlt	r3, #45	; 0x2d
 8004182:	4880      	ldr	r0, [pc, #512]	; (8004384 <_printf_float+0x2d8>)
 8004184:	bfb8      	it	lt
 8004186:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800418a:	4b7f      	ldr	r3, [pc, #508]	; (8004388 <_printf_float+0x2dc>)
 800418c:	e7d3      	b.n	8004136 <_printf_float+0x8a>
 800418e:	6863      	ldr	r3, [r4, #4]
 8004190:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004194:	1c5a      	adds	r2, r3, #1
 8004196:	d142      	bne.n	800421e <_printf_float+0x172>
 8004198:	2306      	movs	r3, #6
 800419a:	6063      	str	r3, [r4, #4]
 800419c:	2200      	movs	r2, #0
 800419e:	9206      	str	r2, [sp, #24]
 80041a0:	aa0e      	add	r2, sp, #56	; 0x38
 80041a2:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80041a6:	aa0d      	add	r2, sp, #52	; 0x34
 80041a8:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80041ac:	9203      	str	r2, [sp, #12]
 80041ae:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80041b2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80041b6:	6023      	str	r3, [r4, #0]
 80041b8:	6863      	ldr	r3, [r4, #4]
 80041ba:	4642      	mov	r2, r8
 80041bc:	9300      	str	r3, [sp, #0]
 80041be:	4628      	mov	r0, r5
 80041c0:	4653      	mov	r3, sl
 80041c2:	910b      	str	r1, [sp, #44]	; 0x2c
 80041c4:	f7ff fed4 	bl	8003f70 <__cvt>
 80041c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80041ca:	4680      	mov	r8, r0
 80041cc:	2947      	cmp	r1, #71	; 0x47
 80041ce:	990d      	ldr	r1, [sp, #52]	; 0x34
 80041d0:	d108      	bne.n	80041e4 <_printf_float+0x138>
 80041d2:	1cc8      	adds	r0, r1, #3
 80041d4:	db02      	blt.n	80041dc <_printf_float+0x130>
 80041d6:	6863      	ldr	r3, [r4, #4]
 80041d8:	4299      	cmp	r1, r3
 80041da:	dd40      	ble.n	800425e <_printf_float+0x1b2>
 80041dc:	f1a9 0902 	sub.w	r9, r9, #2
 80041e0:	fa5f f989 	uxtb.w	r9, r9
 80041e4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80041e8:	d81f      	bhi.n	800422a <_printf_float+0x17e>
 80041ea:	464a      	mov	r2, r9
 80041ec:	3901      	subs	r1, #1
 80041ee:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80041f2:	910d      	str	r1, [sp, #52]	; 0x34
 80041f4:	f7ff ff1b 	bl	800402e <__exponent>
 80041f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80041fa:	4682      	mov	sl, r0
 80041fc:	1813      	adds	r3, r2, r0
 80041fe:	2a01      	cmp	r2, #1
 8004200:	6123      	str	r3, [r4, #16]
 8004202:	dc02      	bgt.n	800420a <_printf_float+0x15e>
 8004204:	6822      	ldr	r2, [r4, #0]
 8004206:	07d2      	lsls	r2, r2, #31
 8004208:	d501      	bpl.n	800420e <_printf_float+0x162>
 800420a:	3301      	adds	r3, #1
 800420c:	6123      	str	r3, [r4, #16]
 800420e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004212:	2b00      	cmp	r3, #0
 8004214:	d09b      	beq.n	800414e <_printf_float+0xa2>
 8004216:	232d      	movs	r3, #45	; 0x2d
 8004218:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800421c:	e797      	b.n	800414e <_printf_float+0xa2>
 800421e:	2947      	cmp	r1, #71	; 0x47
 8004220:	d1bc      	bne.n	800419c <_printf_float+0xf0>
 8004222:	2b00      	cmp	r3, #0
 8004224:	d1ba      	bne.n	800419c <_printf_float+0xf0>
 8004226:	2301      	movs	r3, #1
 8004228:	e7b7      	b.n	800419a <_printf_float+0xee>
 800422a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800422e:	d118      	bne.n	8004262 <_printf_float+0x1b6>
 8004230:	2900      	cmp	r1, #0
 8004232:	6863      	ldr	r3, [r4, #4]
 8004234:	dd0b      	ble.n	800424e <_printf_float+0x1a2>
 8004236:	6121      	str	r1, [r4, #16]
 8004238:	b913      	cbnz	r3, 8004240 <_printf_float+0x194>
 800423a:	6822      	ldr	r2, [r4, #0]
 800423c:	07d0      	lsls	r0, r2, #31
 800423e:	d502      	bpl.n	8004246 <_printf_float+0x19a>
 8004240:	3301      	adds	r3, #1
 8004242:	440b      	add	r3, r1
 8004244:	6123      	str	r3, [r4, #16]
 8004246:	f04f 0a00 	mov.w	sl, #0
 800424a:	65a1      	str	r1, [r4, #88]	; 0x58
 800424c:	e7df      	b.n	800420e <_printf_float+0x162>
 800424e:	b913      	cbnz	r3, 8004256 <_printf_float+0x1aa>
 8004250:	6822      	ldr	r2, [r4, #0]
 8004252:	07d2      	lsls	r2, r2, #31
 8004254:	d501      	bpl.n	800425a <_printf_float+0x1ae>
 8004256:	3302      	adds	r3, #2
 8004258:	e7f4      	b.n	8004244 <_printf_float+0x198>
 800425a:	2301      	movs	r3, #1
 800425c:	e7f2      	b.n	8004244 <_printf_float+0x198>
 800425e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004262:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004264:	4299      	cmp	r1, r3
 8004266:	db05      	blt.n	8004274 <_printf_float+0x1c8>
 8004268:	6823      	ldr	r3, [r4, #0]
 800426a:	6121      	str	r1, [r4, #16]
 800426c:	07d8      	lsls	r0, r3, #31
 800426e:	d5ea      	bpl.n	8004246 <_printf_float+0x19a>
 8004270:	1c4b      	adds	r3, r1, #1
 8004272:	e7e7      	b.n	8004244 <_printf_float+0x198>
 8004274:	2900      	cmp	r1, #0
 8004276:	bfcc      	ite	gt
 8004278:	2201      	movgt	r2, #1
 800427a:	f1c1 0202 	rsble	r2, r1, #2
 800427e:	4413      	add	r3, r2
 8004280:	e7e0      	b.n	8004244 <_printf_float+0x198>
 8004282:	6823      	ldr	r3, [r4, #0]
 8004284:	055a      	lsls	r2, r3, #21
 8004286:	d407      	bmi.n	8004298 <_printf_float+0x1ec>
 8004288:	6923      	ldr	r3, [r4, #16]
 800428a:	4642      	mov	r2, r8
 800428c:	4631      	mov	r1, r6
 800428e:	4628      	mov	r0, r5
 8004290:	47b8      	blx	r7
 8004292:	3001      	adds	r0, #1
 8004294:	d12b      	bne.n	80042ee <_printf_float+0x242>
 8004296:	e764      	b.n	8004162 <_printf_float+0xb6>
 8004298:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800429c:	f240 80dd 	bls.w	800445a <_printf_float+0x3ae>
 80042a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80042a4:	2200      	movs	r2, #0
 80042a6:	2300      	movs	r3, #0
 80042a8:	f7fc fb7e 	bl	80009a8 <__aeabi_dcmpeq>
 80042ac:	2800      	cmp	r0, #0
 80042ae:	d033      	beq.n	8004318 <_printf_float+0x26c>
 80042b0:	2301      	movs	r3, #1
 80042b2:	4631      	mov	r1, r6
 80042b4:	4628      	mov	r0, r5
 80042b6:	4a35      	ldr	r2, [pc, #212]	; (800438c <_printf_float+0x2e0>)
 80042b8:	47b8      	blx	r7
 80042ba:	3001      	adds	r0, #1
 80042bc:	f43f af51 	beq.w	8004162 <_printf_float+0xb6>
 80042c0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80042c4:	429a      	cmp	r2, r3
 80042c6:	db02      	blt.n	80042ce <_printf_float+0x222>
 80042c8:	6823      	ldr	r3, [r4, #0]
 80042ca:	07d8      	lsls	r0, r3, #31
 80042cc:	d50f      	bpl.n	80042ee <_printf_float+0x242>
 80042ce:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80042d2:	4631      	mov	r1, r6
 80042d4:	4628      	mov	r0, r5
 80042d6:	47b8      	blx	r7
 80042d8:	3001      	adds	r0, #1
 80042da:	f43f af42 	beq.w	8004162 <_printf_float+0xb6>
 80042de:	f04f 0800 	mov.w	r8, #0
 80042e2:	f104 091a 	add.w	r9, r4, #26
 80042e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80042e8:	3b01      	subs	r3, #1
 80042ea:	4543      	cmp	r3, r8
 80042ec:	dc09      	bgt.n	8004302 <_printf_float+0x256>
 80042ee:	6823      	ldr	r3, [r4, #0]
 80042f0:	079b      	lsls	r3, r3, #30
 80042f2:	f100 8102 	bmi.w	80044fa <_printf_float+0x44e>
 80042f6:	68e0      	ldr	r0, [r4, #12]
 80042f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80042fa:	4298      	cmp	r0, r3
 80042fc:	bfb8      	it	lt
 80042fe:	4618      	movlt	r0, r3
 8004300:	e731      	b.n	8004166 <_printf_float+0xba>
 8004302:	2301      	movs	r3, #1
 8004304:	464a      	mov	r2, r9
 8004306:	4631      	mov	r1, r6
 8004308:	4628      	mov	r0, r5
 800430a:	47b8      	blx	r7
 800430c:	3001      	adds	r0, #1
 800430e:	f43f af28 	beq.w	8004162 <_printf_float+0xb6>
 8004312:	f108 0801 	add.w	r8, r8, #1
 8004316:	e7e6      	b.n	80042e6 <_printf_float+0x23a>
 8004318:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800431a:	2b00      	cmp	r3, #0
 800431c:	dc38      	bgt.n	8004390 <_printf_float+0x2e4>
 800431e:	2301      	movs	r3, #1
 8004320:	4631      	mov	r1, r6
 8004322:	4628      	mov	r0, r5
 8004324:	4a19      	ldr	r2, [pc, #100]	; (800438c <_printf_float+0x2e0>)
 8004326:	47b8      	blx	r7
 8004328:	3001      	adds	r0, #1
 800432a:	f43f af1a 	beq.w	8004162 <_printf_float+0xb6>
 800432e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004332:	4313      	orrs	r3, r2
 8004334:	d102      	bne.n	800433c <_printf_float+0x290>
 8004336:	6823      	ldr	r3, [r4, #0]
 8004338:	07d9      	lsls	r1, r3, #31
 800433a:	d5d8      	bpl.n	80042ee <_printf_float+0x242>
 800433c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004340:	4631      	mov	r1, r6
 8004342:	4628      	mov	r0, r5
 8004344:	47b8      	blx	r7
 8004346:	3001      	adds	r0, #1
 8004348:	f43f af0b 	beq.w	8004162 <_printf_float+0xb6>
 800434c:	f04f 0900 	mov.w	r9, #0
 8004350:	f104 0a1a 	add.w	sl, r4, #26
 8004354:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004356:	425b      	negs	r3, r3
 8004358:	454b      	cmp	r3, r9
 800435a:	dc01      	bgt.n	8004360 <_printf_float+0x2b4>
 800435c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800435e:	e794      	b.n	800428a <_printf_float+0x1de>
 8004360:	2301      	movs	r3, #1
 8004362:	4652      	mov	r2, sl
 8004364:	4631      	mov	r1, r6
 8004366:	4628      	mov	r0, r5
 8004368:	47b8      	blx	r7
 800436a:	3001      	adds	r0, #1
 800436c:	f43f aef9 	beq.w	8004162 <_printf_float+0xb6>
 8004370:	f109 0901 	add.w	r9, r9, #1
 8004374:	e7ee      	b.n	8004354 <_printf_float+0x2a8>
 8004376:	bf00      	nop
 8004378:	7fefffff 	.word	0x7fefffff
 800437c:	08009dc8 	.word	0x08009dc8
 8004380:	08009dcc 	.word	0x08009dcc
 8004384:	08009dd4 	.word	0x08009dd4
 8004388:	08009dd0 	.word	0x08009dd0
 800438c:	08009dd8 	.word	0x08009dd8
 8004390:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004392:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004394:	429a      	cmp	r2, r3
 8004396:	bfa8      	it	ge
 8004398:	461a      	movge	r2, r3
 800439a:	2a00      	cmp	r2, #0
 800439c:	4691      	mov	r9, r2
 800439e:	dc37      	bgt.n	8004410 <_printf_float+0x364>
 80043a0:	f04f 0b00 	mov.w	fp, #0
 80043a4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80043a8:	f104 021a 	add.w	r2, r4, #26
 80043ac:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80043b0:	ebaa 0309 	sub.w	r3, sl, r9
 80043b4:	455b      	cmp	r3, fp
 80043b6:	dc33      	bgt.n	8004420 <_printf_float+0x374>
 80043b8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80043bc:	429a      	cmp	r2, r3
 80043be:	db3b      	blt.n	8004438 <_printf_float+0x38c>
 80043c0:	6823      	ldr	r3, [r4, #0]
 80043c2:	07da      	lsls	r2, r3, #31
 80043c4:	d438      	bmi.n	8004438 <_printf_float+0x38c>
 80043c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80043c8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80043ca:	eba3 020a 	sub.w	r2, r3, sl
 80043ce:	eba3 0901 	sub.w	r9, r3, r1
 80043d2:	4591      	cmp	r9, r2
 80043d4:	bfa8      	it	ge
 80043d6:	4691      	movge	r9, r2
 80043d8:	f1b9 0f00 	cmp.w	r9, #0
 80043dc:	dc34      	bgt.n	8004448 <_printf_float+0x39c>
 80043de:	f04f 0800 	mov.w	r8, #0
 80043e2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80043e6:	f104 0a1a 	add.w	sl, r4, #26
 80043ea:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80043ee:	1a9b      	subs	r3, r3, r2
 80043f0:	eba3 0309 	sub.w	r3, r3, r9
 80043f4:	4543      	cmp	r3, r8
 80043f6:	f77f af7a 	ble.w	80042ee <_printf_float+0x242>
 80043fa:	2301      	movs	r3, #1
 80043fc:	4652      	mov	r2, sl
 80043fe:	4631      	mov	r1, r6
 8004400:	4628      	mov	r0, r5
 8004402:	47b8      	blx	r7
 8004404:	3001      	adds	r0, #1
 8004406:	f43f aeac 	beq.w	8004162 <_printf_float+0xb6>
 800440a:	f108 0801 	add.w	r8, r8, #1
 800440e:	e7ec      	b.n	80043ea <_printf_float+0x33e>
 8004410:	4613      	mov	r3, r2
 8004412:	4631      	mov	r1, r6
 8004414:	4642      	mov	r2, r8
 8004416:	4628      	mov	r0, r5
 8004418:	47b8      	blx	r7
 800441a:	3001      	adds	r0, #1
 800441c:	d1c0      	bne.n	80043a0 <_printf_float+0x2f4>
 800441e:	e6a0      	b.n	8004162 <_printf_float+0xb6>
 8004420:	2301      	movs	r3, #1
 8004422:	4631      	mov	r1, r6
 8004424:	4628      	mov	r0, r5
 8004426:	920b      	str	r2, [sp, #44]	; 0x2c
 8004428:	47b8      	blx	r7
 800442a:	3001      	adds	r0, #1
 800442c:	f43f ae99 	beq.w	8004162 <_printf_float+0xb6>
 8004430:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004432:	f10b 0b01 	add.w	fp, fp, #1
 8004436:	e7b9      	b.n	80043ac <_printf_float+0x300>
 8004438:	4631      	mov	r1, r6
 800443a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800443e:	4628      	mov	r0, r5
 8004440:	47b8      	blx	r7
 8004442:	3001      	adds	r0, #1
 8004444:	d1bf      	bne.n	80043c6 <_printf_float+0x31a>
 8004446:	e68c      	b.n	8004162 <_printf_float+0xb6>
 8004448:	464b      	mov	r3, r9
 800444a:	4631      	mov	r1, r6
 800444c:	4628      	mov	r0, r5
 800444e:	eb08 020a 	add.w	r2, r8, sl
 8004452:	47b8      	blx	r7
 8004454:	3001      	adds	r0, #1
 8004456:	d1c2      	bne.n	80043de <_printf_float+0x332>
 8004458:	e683      	b.n	8004162 <_printf_float+0xb6>
 800445a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800445c:	2a01      	cmp	r2, #1
 800445e:	dc01      	bgt.n	8004464 <_printf_float+0x3b8>
 8004460:	07db      	lsls	r3, r3, #31
 8004462:	d537      	bpl.n	80044d4 <_printf_float+0x428>
 8004464:	2301      	movs	r3, #1
 8004466:	4642      	mov	r2, r8
 8004468:	4631      	mov	r1, r6
 800446a:	4628      	mov	r0, r5
 800446c:	47b8      	blx	r7
 800446e:	3001      	adds	r0, #1
 8004470:	f43f ae77 	beq.w	8004162 <_printf_float+0xb6>
 8004474:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004478:	4631      	mov	r1, r6
 800447a:	4628      	mov	r0, r5
 800447c:	47b8      	blx	r7
 800447e:	3001      	adds	r0, #1
 8004480:	f43f ae6f 	beq.w	8004162 <_printf_float+0xb6>
 8004484:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004488:	2200      	movs	r2, #0
 800448a:	2300      	movs	r3, #0
 800448c:	f7fc fa8c 	bl	80009a8 <__aeabi_dcmpeq>
 8004490:	b9d8      	cbnz	r0, 80044ca <_printf_float+0x41e>
 8004492:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004494:	f108 0201 	add.w	r2, r8, #1
 8004498:	3b01      	subs	r3, #1
 800449a:	4631      	mov	r1, r6
 800449c:	4628      	mov	r0, r5
 800449e:	47b8      	blx	r7
 80044a0:	3001      	adds	r0, #1
 80044a2:	d10e      	bne.n	80044c2 <_printf_float+0x416>
 80044a4:	e65d      	b.n	8004162 <_printf_float+0xb6>
 80044a6:	2301      	movs	r3, #1
 80044a8:	464a      	mov	r2, r9
 80044aa:	4631      	mov	r1, r6
 80044ac:	4628      	mov	r0, r5
 80044ae:	47b8      	blx	r7
 80044b0:	3001      	adds	r0, #1
 80044b2:	f43f ae56 	beq.w	8004162 <_printf_float+0xb6>
 80044b6:	f108 0801 	add.w	r8, r8, #1
 80044ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80044bc:	3b01      	subs	r3, #1
 80044be:	4543      	cmp	r3, r8
 80044c0:	dcf1      	bgt.n	80044a6 <_printf_float+0x3fa>
 80044c2:	4653      	mov	r3, sl
 80044c4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80044c8:	e6e0      	b.n	800428c <_printf_float+0x1e0>
 80044ca:	f04f 0800 	mov.w	r8, #0
 80044ce:	f104 091a 	add.w	r9, r4, #26
 80044d2:	e7f2      	b.n	80044ba <_printf_float+0x40e>
 80044d4:	2301      	movs	r3, #1
 80044d6:	4642      	mov	r2, r8
 80044d8:	e7df      	b.n	800449a <_printf_float+0x3ee>
 80044da:	2301      	movs	r3, #1
 80044dc:	464a      	mov	r2, r9
 80044de:	4631      	mov	r1, r6
 80044e0:	4628      	mov	r0, r5
 80044e2:	47b8      	blx	r7
 80044e4:	3001      	adds	r0, #1
 80044e6:	f43f ae3c 	beq.w	8004162 <_printf_float+0xb6>
 80044ea:	f108 0801 	add.w	r8, r8, #1
 80044ee:	68e3      	ldr	r3, [r4, #12]
 80044f0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80044f2:	1a5b      	subs	r3, r3, r1
 80044f4:	4543      	cmp	r3, r8
 80044f6:	dcf0      	bgt.n	80044da <_printf_float+0x42e>
 80044f8:	e6fd      	b.n	80042f6 <_printf_float+0x24a>
 80044fa:	f04f 0800 	mov.w	r8, #0
 80044fe:	f104 0919 	add.w	r9, r4, #25
 8004502:	e7f4      	b.n	80044ee <_printf_float+0x442>

08004504 <_printf_common>:
 8004504:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004508:	4616      	mov	r6, r2
 800450a:	4699      	mov	r9, r3
 800450c:	688a      	ldr	r2, [r1, #8]
 800450e:	690b      	ldr	r3, [r1, #16]
 8004510:	4607      	mov	r7, r0
 8004512:	4293      	cmp	r3, r2
 8004514:	bfb8      	it	lt
 8004516:	4613      	movlt	r3, r2
 8004518:	6033      	str	r3, [r6, #0]
 800451a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800451e:	460c      	mov	r4, r1
 8004520:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004524:	b10a      	cbz	r2, 800452a <_printf_common+0x26>
 8004526:	3301      	adds	r3, #1
 8004528:	6033      	str	r3, [r6, #0]
 800452a:	6823      	ldr	r3, [r4, #0]
 800452c:	0699      	lsls	r1, r3, #26
 800452e:	bf42      	ittt	mi
 8004530:	6833      	ldrmi	r3, [r6, #0]
 8004532:	3302      	addmi	r3, #2
 8004534:	6033      	strmi	r3, [r6, #0]
 8004536:	6825      	ldr	r5, [r4, #0]
 8004538:	f015 0506 	ands.w	r5, r5, #6
 800453c:	d106      	bne.n	800454c <_printf_common+0x48>
 800453e:	f104 0a19 	add.w	sl, r4, #25
 8004542:	68e3      	ldr	r3, [r4, #12]
 8004544:	6832      	ldr	r2, [r6, #0]
 8004546:	1a9b      	subs	r3, r3, r2
 8004548:	42ab      	cmp	r3, r5
 800454a:	dc28      	bgt.n	800459e <_printf_common+0x9a>
 800454c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004550:	1e13      	subs	r3, r2, #0
 8004552:	6822      	ldr	r2, [r4, #0]
 8004554:	bf18      	it	ne
 8004556:	2301      	movne	r3, #1
 8004558:	0692      	lsls	r2, r2, #26
 800455a:	d42d      	bmi.n	80045b8 <_printf_common+0xb4>
 800455c:	4649      	mov	r1, r9
 800455e:	4638      	mov	r0, r7
 8004560:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004564:	47c0      	blx	r8
 8004566:	3001      	adds	r0, #1
 8004568:	d020      	beq.n	80045ac <_printf_common+0xa8>
 800456a:	6823      	ldr	r3, [r4, #0]
 800456c:	68e5      	ldr	r5, [r4, #12]
 800456e:	f003 0306 	and.w	r3, r3, #6
 8004572:	2b04      	cmp	r3, #4
 8004574:	bf18      	it	ne
 8004576:	2500      	movne	r5, #0
 8004578:	6832      	ldr	r2, [r6, #0]
 800457a:	f04f 0600 	mov.w	r6, #0
 800457e:	68a3      	ldr	r3, [r4, #8]
 8004580:	bf08      	it	eq
 8004582:	1aad      	subeq	r5, r5, r2
 8004584:	6922      	ldr	r2, [r4, #16]
 8004586:	bf08      	it	eq
 8004588:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800458c:	4293      	cmp	r3, r2
 800458e:	bfc4      	itt	gt
 8004590:	1a9b      	subgt	r3, r3, r2
 8004592:	18ed      	addgt	r5, r5, r3
 8004594:	341a      	adds	r4, #26
 8004596:	42b5      	cmp	r5, r6
 8004598:	d11a      	bne.n	80045d0 <_printf_common+0xcc>
 800459a:	2000      	movs	r0, #0
 800459c:	e008      	b.n	80045b0 <_printf_common+0xac>
 800459e:	2301      	movs	r3, #1
 80045a0:	4652      	mov	r2, sl
 80045a2:	4649      	mov	r1, r9
 80045a4:	4638      	mov	r0, r7
 80045a6:	47c0      	blx	r8
 80045a8:	3001      	adds	r0, #1
 80045aa:	d103      	bne.n	80045b4 <_printf_common+0xb0>
 80045ac:	f04f 30ff 	mov.w	r0, #4294967295
 80045b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045b4:	3501      	adds	r5, #1
 80045b6:	e7c4      	b.n	8004542 <_printf_common+0x3e>
 80045b8:	2030      	movs	r0, #48	; 0x30
 80045ba:	18e1      	adds	r1, r4, r3
 80045bc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80045c0:	1c5a      	adds	r2, r3, #1
 80045c2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80045c6:	4422      	add	r2, r4
 80045c8:	3302      	adds	r3, #2
 80045ca:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80045ce:	e7c5      	b.n	800455c <_printf_common+0x58>
 80045d0:	2301      	movs	r3, #1
 80045d2:	4622      	mov	r2, r4
 80045d4:	4649      	mov	r1, r9
 80045d6:	4638      	mov	r0, r7
 80045d8:	47c0      	blx	r8
 80045da:	3001      	adds	r0, #1
 80045dc:	d0e6      	beq.n	80045ac <_printf_common+0xa8>
 80045de:	3601      	adds	r6, #1
 80045e0:	e7d9      	b.n	8004596 <_printf_common+0x92>
	...

080045e4 <_printf_i>:
 80045e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80045e8:	7e0f      	ldrb	r7, [r1, #24]
 80045ea:	4691      	mov	r9, r2
 80045ec:	2f78      	cmp	r7, #120	; 0x78
 80045ee:	4680      	mov	r8, r0
 80045f0:	460c      	mov	r4, r1
 80045f2:	469a      	mov	sl, r3
 80045f4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80045f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80045fa:	d807      	bhi.n	800460c <_printf_i+0x28>
 80045fc:	2f62      	cmp	r7, #98	; 0x62
 80045fe:	d80a      	bhi.n	8004616 <_printf_i+0x32>
 8004600:	2f00      	cmp	r7, #0
 8004602:	f000 80d9 	beq.w	80047b8 <_printf_i+0x1d4>
 8004606:	2f58      	cmp	r7, #88	; 0x58
 8004608:	f000 80a4 	beq.w	8004754 <_printf_i+0x170>
 800460c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004610:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004614:	e03a      	b.n	800468c <_printf_i+0xa8>
 8004616:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800461a:	2b15      	cmp	r3, #21
 800461c:	d8f6      	bhi.n	800460c <_printf_i+0x28>
 800461e:	a101      	add	r1, pc, #4	; (adr r1, 8004624 <_printf_i+0x40>)
 8004620:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004624:	0800467d 	.word	0x0800467d
 8004628:	08004691 	.word	0x08004691
 800462c:	0800460d 	.word	0x0800460d
 8004630:	0800460d 	.word	0x0800460d
 8004634:	0800460d 	.word	0x0800460d
 8004638:	0800460d 	.word	0x0800460d
 800463c:	08004691 	.word	0x08004691
 8004640:	0800460d 	.word	0x0800460d
 8004644:	0800460d 	.word	0x0800460d
 8004648:	0800460d 	.word	0x0800460d
 800464c:	0800460d 	.word	0x0800460d
 8004650:	0800479f 	.word	0x0800479f
 8004654:	080046c1 	.word	0x080046c1
 8004658:	08004781 	.word	0x08004781
 800465c:	0800460d 	.word	0x0800460d
 8004660:	0800460d 	.word	0x0800460d
 8004664:	080047c1 	.word	0x080047c1
 8004668:	0800460d 	.word	0x0800460d
 800466c:	080046c1 	.word	0x080046c1
 8004670:	0800460d 	.word	0x0800460d
 8004674:	0800460d 	.word	0x0800460d
 8004678:	08004789 	.word	0x08004789
 800467c:	682b      	ldr	r3, [r5, #0]
 800467e:	1d1a      	adds	r2, r3, #4
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	602a      	str	r2, [r5, #0]
 8004684:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004688:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800468c:	2301      	movs	r3, #1
 800468e:	e0a4      	b.n	80047da <_printf_i+0x1f6>
 8004690:	6820      	ldr	r0, [r4, #0]
 8004692:	6829      	ldr	r1, [r5, #0]
 8004694:	0606      	lsls	r6, r0, #24
 8004696:	f101 0304 	add.w	r3, r1, #4
 800469a:	d50a      	bpl.n	80046b2 <_printf_i+0xce>
 800469c:	680e      	ldr	r6, [r1, #0]
 800469e:	602b      	str	r3, [r5, #0]
 80046a0:	2e00      	cmp	r6, #0
 80046a2:	da03      	bge.n	80046ac <_printf_i+0xc8>
 80046a4:	232d      	movs	r3, #45	; 0x2d
 80046a6:	4276      	negs	r6, r6
 80046a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046ac:	230a      	movs	r3, #10
 80046ae:	485e      	ldr	r0, [pc, #376]	; (8004828 <_printf_i+0x244>)
 80046b0:	e019      	b.n	80046e6 <_printf_i+0x102>
 80046b2:	680e      	ldr	r6, [r1, #0]
 80046b4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80046b8:	602b      	str	r3, [r5, #0]
 80046ba:	bf18      	it	ne
 80046bc:	b236      	sxthne	r6, r6
 80046be:	e7ef      	b.n	80046a0 <_printf_i+0xbc>
 80046c0:	682b      	ldr	r3, [r5, #0]
 80046c2:	6820      	ldr	r0, [r4, #0]
 80046c4:	1d19      	adds	r1, r3, #4
 80046c6:	6029      	str	r1, [r5, #0]
 80046c8:	0601      	lsls	r1, r0, #24
 80046ca:	d501      	bpl.n	80046d0 <_printf_i+0xec>
 80046cc:	681e      	ldr	r6, [r3, #0]
 80046ce:	e002      	b.n	80046d6 <_printf_i+0xf2>
 80046d0:	0646      	lsls	r6, r0, #25
 80046d2:	d5fb      	bpl.n	80046cc <_printf_i+0xe8>
 80046d4:	881e      	ldrh	r6, [r3, #0]
 80046d6:	2f6f      	cmp	r7, #111	; 0x6f
 80046d8:	bf0c      	ite	eq
 80046da:	2308      	moveq	r3, #8
 80046dc:	230a      	movne	r3, #10
 80046de:	4852      	ldr	r0, [pc, #328]	; (8004828 <_printf_i+0x244>)
 80046e0:	2100      	movs	r1, #0
 80046e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80046e6:	6865      	ldr	r5, [r4, #4]
 80046e8:	2d00      	cmp	r5, #0
 80046ea:	bfa8      	it	ge
 80046ec:	6821      	ldrge	r1, [r4, #0]
 80046ee:	60a5      	str	r5, [r4, #8]
 80046f0:	bfa4      	itt	ge
 80046f2:	f021 0104 	bicge.w	r1, r1, #4
 80046f6:	6021      	strge	r1, [r4, #0]
 80046f8:	b90e      	cbnz	r6, 80046fe <_printf_i+0x11a>
 80046fa:	2d00      	cmp	r5, #0
 80046fc:	d04d      	beq.n	800479a <_printf_i+0x1b6>
 80046fe:	4615      	mov	r5, r2
 8004700:	fbb6 f1f3 	udiv	r1, r6, r3
 8004704:	fb03 6711 	mls	r7, r3, r1, r6
 8004708:	5dc7      	ldrb	r7, [r0, r7]
 800470a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800470e:	4637      	mov	r7, r6
 8004710:	42bb      	cmp	r3, r7
 8004712:	460e      	mov	r6, r1
 8004714:	d9f4      	bls.n	8004700 <_printf_i+0x11c>
 8004716:	2b08      	cmp	r3, #8
 8004718:	d10b      	bne.n	8004732 <_printf_i+0x14e>
 800471a:	6823      	ldr	r3, [r4, #0]
 800471c:	07de      	lsls	r6, r3, #31
 800471e:	d508      	bpl.n	8004732 <_printf_i+0x14e>
 8004720:	6923      	ldr	r3, [r4, #16]
 8004722:	6861      	ldr	r1, [r4, #4]
 8004724:	4299      	cmp	r1, r3
 8004726:	bfde      	ittt	le
 8004728:	2330      	movle	r3, #48	; 0x30
 800472a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800472e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004732:	1b52      	subs	r2, r2, r5
 8004734:	6122      	str	r2, [r4, #16]
 8004736:	464b      	mov	r3, r9
 8004738:	4621      	mov	r1, r4
 800473a:	4640      	mov	r0, r8
 800473c:	f8cd a000 	str.w	sl, [sp]
 8004740:	aa03      	add	r2, sp, #12
 8004742:	f7ff fedf 	bl	8004504 <_printf_common>
 8004746:	3001      	adds	r0, #1
 8004748:	d14c      	bne.n	80047e4 <_printf_i+0x200>
 800474a:	f04f 30ff 	mov.w	r0, #4294967295
 800474e:	b004      	add	sp, #16
 8004750:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004754:	4834      	ldr	r0, [pc, #208]	; (8004828 <_printf_i+0x244>)
 8004756:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800475a:	6829      	ldr	r1, [r5, #0]
 800475c:	6823      	ldr	r3, [r4, #0]
 800475e:	f851 6b04 	ldr.w	r6, [r1], #4
 8004762:	6029      	str	r1, [r5, #0]
 8004764:	061d      	lsls	r5, r3, #24
 8004766:	d514      	bpl.n	8004792 <_printf_i+0x1ae>
 8004768:	07df      	lsls	r7, r3, #31
 800476a:	bf44      	itt	mi
 800476c:	f043 0320 	orrmi.w	r3, r3, #32
 8004770:	6023      	strmi	r3, [r4, #0]
 8004772:	b91e      	cbnz	r6, 800477c <_printf_i+0x198>
 8004774:	6823      	ldr	r3, [r4, #0]
 8004776:	f023 0320 	bic.w	r3, r3, #32
 800477a:	6023      	str	r3, [r4, #0]
 800477c:	2310      	movs	r3, #16
 800477e:	e7af      	b.n	80046e0 <_printf_i+0xfc>
 8004780:	6823      	ldr	r3, [r4, #0]
 8004782:	f043 0320 	orr.w	r3, r3, #32
 8004786:	6023      	str	r3, [r4, #0]
 8004788:	2378      	movs	r3, #120	; 0x78
 800478a:	4828      	ldr	r0, [pc, #160]	; (800482c <_printf_i+0x248>)
 800478c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004790:	e7e3      	b.n	800475a <_printf_i+0x176>
 8004792:	0659      	lsls	r1, r3, #25
 8004794:	bf48      	it	mi
 8004796:	b2b6      	uxthmi	r6, r6
 8004798:	e7e6      	b.n	8004768 <_printf_i+0x184>
 800479a:	4615      	mov	r5, r2
 800479c:	e7bb      	b.n	8004716 <_printf_i+0x132>
 800479e:	682b      	ldr	r3, [r5, #0]
 80047a0:	6826      	ldr	r6, [r4, #0]
 80047a2:	1d18      	adds	r0, r3, #4
 80047a4:	6961      	ldr	r1, [r4, #20]
 80047a6:	6028      	str	r0, [r5, #0]
 80047a8:	0635      	lsls	r5, r6, #24
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	d501      	bpl.n	80047b2 <_printf_i+0x1ce>
 80047ae:	6019      	str	r1, [r3, #0]
 80047b0:	e002      	b.n	80047b8 <_printf_i+0x1d4>
 80047b2:	0670      	lsls	r0, r6, #25
 80047b4:	d5fb      	bpl.n	80047ae <_printf_i+0x1ca>
 80047b6:	8019      	strh	r1, [r3, #0]
 80047b8:	2300      	movs	r3, #0
 80047ba:	4615      	mov	r5, r2
 80047bc:	6123      	str	r3, [r4, #16]
 80047be:	e7ba      	b.n	8004736 <_printf_i+0x152>
 80047c0:	682b      	ldr	r3, [r5, #0]
 80047c2:	2100      	movs	r1, #0
 80047c4:	1d1a      	adds	r2, r3, #4
 80047c6:	602a      	str	r2, [r5, #0]
 80047c8:	681d      	ldr	r5, [r3, #0]
 80047ca:	6862      	ldr	r2, [r4, #4]
 80047cc:	4628      	mov	r0, r5
 80047ce:	f002 faed 	bl	8006dac <memchr>
 80047d2:	b108      	cbz	r0, 80047d8 <_printf_i+0x1f4>
 80047d4:	1b40      	subs	r0, r0, r5
 80047d6:	6060      	str	r0, [r4, #4]
 80047d8:	6863      	ldr	r3, [r4, #4]
 80047da:	6123      	str	r3, [r4, #16]
 80047dc:	2300      	movs	r3, #0
 80047de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047e2:	e7a8      	b.n	8004736 <_printf_i+0x152>
 80047e4:	462a      	mov	r2, r5
 80047e6:	4649      	mov	r1, r9
 80047e8:	4640      	mov	r0, r8
 80047ea:	6923      	ldr	r3, [r4, #16]
 80047ec:	47d0      	blx	sl
 80047ee:	3001      	adds	r0, #1
 80047f0:	d0ab      	beq.n	800474a <_printf_i+0x166>
 80047f2:	6823      	ldr	r3, [r4, #0]
 80047f4:	079b      	lsls	r3, r3, #30
 80047f6:	d413      	bmi.n	8004820 <_printf_i+0x23c>
 80047f8:	68e0      	ldr	r0, [r4, #12]
 80047fa:	9b03      	ldr	r3, [sp, #12]
 80047fc:	4298      	cmp	r0, r3
 80047fe:	bfb8      	it	lt
 8004800:	4618      	movlt	r0, r3
 8004802:	e7a4      	b.n	800474e <_printf_i+0x16a>
 8004804:	2301      	movs	r3, #1
 8004806:	4632      	mov	r2, r6
 8004808:	4649      	mov	r1, r9
 800480a:	4640      	mov	r0, r8
 800480c:	47d0      	blx	sl
 800480e:	3001      	adds	r0, #1
 8004810:	d09b      	beq.n	800474a <_printf_i+0x166>
 8004812:	3501      	adds	r5, #1
 8004814:	68e3      	ldr	r3, [r4, #12]
 8004816:	9903      	ldr	r1, [sp, #12]
 8004818:	1a5b      	subs	r3, r3, r1
 800481a:	42ab      	cmp	r3, r5
 800481c:	dcf2      	bgt.n	8004804 <_printf_i+0x220>
 800481e:	e7eb      	b.n	80047f8 <_printf_i+0x214>
 8004820:	2500      	movs	r5, #0
 8004822:	f104 0619 	add.w	r6, r4, #25
 8004826:	e7f5      	b.n	8004814 <_printf_i+0x230>
 8004828:	08009dda 	.word	0x08009dda
 800482c:	08009deb 	.word	0x08009deb

08004830 <_scanf_float>:
 8004830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004834:	b087      	sub	sp, #28
 8004836:	9303      	str	r3, [sp, #12]
 8004838:	688b      	ldr	r3, [r1, #8]
 800483a:	4617      	mov	r7, r2
 800483c:	1e5a      	subs	r2, r3, #1
 800483e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004842:	bf85      	ittet	hi
 8004844:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8004848:	195b      	addhi	r3, r3, r5
 800484a:	2300      	movls	r3, #0
 800484c:	9302      	strhi	r3, [sp, #8]
 800484e:	bf88      	it	hi
 8004850:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004854:	468b      	mov	fp, r1
 8004856:	f04f 0500 	mov.w	r5, #0
 800485a:	bf8c      	ite	hi
 800485c:	608b      	strhi	r3, [r1, #8]
 800485e:	9302      	strls	r3, [sp, #8]
 8004860:	680b      	ldr	r3, [r1, #0]
 8004862:	4680      	mov	r8, r0
 8004864:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8004868:	f84b 3b1c 	str.w	r3, [fp], #28
 800486c:	460c      	mov	r4, r1
 800486e:	465e      	mov	r6, fp
 8004870:	46aa      	mov	sl, r5
 8004872:	46a9      	mov	r9, r5
 8004874:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004878:	9501      	str	r5, [sp, #4]
 800487a:	68a2      	ldr	r2, [r4, #8]
 800487c:	b152      	cbz	r2, 8004894 <_scanf_float+0x64>
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	781b      	ldrb	r3, [r3, #0]
 8004882:	2b4e      	cmp	r3, #78	; 0x4e
 8004884:	d864      	bhi.n	8004950 <_scanf_float+0x120>
 8004886:	2b40      	cmp	r3, #64	; 0x40
 8004888:	d83c      	bhi.n	8004904 <_scanf_float+0xd4>
 800488a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800488e:	b2c8      	uxtb	r0, r1
 8004890:	280e      	cmp	r0, #14
 8004892:	d93a      	bls.n	800490a <_scanf_float+0xda>
 8004894:	f1b9 0f00 	cmp.w	r9, #0
 8004898:	d003      	beq.n	80048a2 <_scanf_float+0x72>
 800489a:	6823      	ldr	r3, [r4, #0]
 800489c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80048a0:	6023      	str	r3, [r4, #0]
 80048a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80048a6:	f1ba 0f01 	cmp.w	sl, #1
 80048aa:	f200 8113 	bhi.w	8004ad4 <_scanf_float+0x2a4>
 80048ae:	455e      	cmp	r6, fp
 80048b0:	f200 8105 	bhi.w	8004abe <_scanf_float+0x28e>
 80048b4:	2501      	movs	r5, #1
 80048b6:	4628      	mov	r0, r5
 80048b8:	b007      	add	sp, #28
 80048ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048be:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80048c2:	2a0d      	cmp	r2, #13
 80048c4:	d8e6      	bhi.n	8004894 <_scanf_float+0x64>
 80048c6:	a101      	add	r1, pc, #4	; (adr r1, 80048cc <_scanf_float+0x9c>)
 80048c8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80048cc:	08004a0b 	.word	0x08004a0b
 80048d0:	08004895 	.word	0x08004895
 80048d4:	08004895 	.word	0x08004895
 80048d8:	08004895 	.word	0x08004895
 80048dc:	08004a6b 	.word	0x08004a6b
 80048e0:	08004a43 	.word	0x08004a43
 80048e4:	08004895 	.word	0x08004895
 80048e8:	08004895 	.word	0x08004895
 80048ec:	08004a19 	.word	0x08004a19
 80048f0:	08004895 	.word	0x08004895
 80048f4:	08004895 	.word	0x08004895
 80048f8:	08004895 	.word	0x08004895
 80048fc:	08004895 	.word	0x08004895
 8004900:	080049d1 	.word	0x080049d1
 8004904:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8004908:	e7db      	b.n	80048c2 <_scanf_float+0x92>
 800490a:	290e      	cmp	r1, #14
 800490c:	d8c2      	bhi.n	8004894 <_scanf_float+0x64>
 800490e:	a001      	add	r0, pc, #4	; (adr r0, 8004914 <_scanf_float+0xe4>)
 8004910:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004914:	080049c3 	.word	0x080049c3
 8004918:	08004895 	.word	0x08004895
 800491c:	080049c3 	.word	0x080049c3
 8004920:	08004a57 	.word	0x08004a57
 8004924:	08004895 	.word	0x08004895
 8004928:	08004971 	.word	0x08004971
 800492c:	080049ad 	.word	0x080049ad
 8004930:	080049ad 	.word	0x080049ad
 8004934:	080049ad 	.word	0x080049ad
 8004938:	080049ad 	.word	0x080049ad
 800493c:	080049ad 	.word	0x080049ad
 8004940:	080049ad 	.word	0x080049ad
 8004944:	080049ad 	.word	0x080049ad
 8004948:	080049ad 	.word	0x080049ad
 800494c:	080049ad 	.word	0x080049ad
 8004950:	2b6e      	cmp	r3, #110	; 0x6e
 8004952:	d809      	bhi.n	8004968 <_scanf_float+0x138>
 8004954:	2b60      	cmp	r3, #96	; 0x60
 8004956:	d8b2      	bhi.n	80048be <_scanf_float+0x8e>
 8004958:	2b54      	cmp	r3, #84	; 0x54
 800495a:	d077      	beq.n	8004a4c <_scanf_float+0x21c>
 800495c:	2b59      	cmp	r3, #89	; 0x59
 800495e:	d199      	bne.n	8004894 <_scanf_float+0x64>
 8004960:	2d07      	cmp	r5, #7
 8004962:	d197      	bne.n	8004894 <_scanf_float+0x64>
 8004964:	2508      	movs	r5, #8
 8004966:	e029      	b.n	80049bc <_scanf_float+0x18c>
 8004968:	2b74      	cmp	r3, #116	; 0x74
 800496a:	d06f      	beq.n	8004a4c <_scanf_float+0x21c>
 800496c:	2b79      	cmp	r3, #121	; 0x79
 800496e:	e7f6      	b.n	800495e <_scanf_float+0x12e>
 8004970:	6821      	ldr	r1, [r4, #0]
 8004972:	05c8      	lsls	r0, r1, #23
 8004974:	d51a      	bpl.n	80049ac <_scanf_float+0x17c>
 8004976:	9b02      	ldr	r3, [sp, #8]
 8004978:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800497c:	6021      	str	r1, [r4, #0]
 800497e:	f109 0901 	add.w	r9, r9, #1
 8004982:	b11b      	cbz	r3, 800498c <_scanf_float+0x15c>
 8004984:	3b01      	subs	r3, #1
 8004986:	3201      	adds	r2, #1
 8004988:	9302      	str	r3, [sp, #8]
 800498a:	60a2      	str	r2, [r4, #8]
 800498c:	68a3      	ldr	r3, [r4, #8]
 800498e:	3b01      	subs	r3, #1
 8004990:	60a3      	str	r3, [r4, #8]
 8004992:	6923      	ldr	r3, [r4, #16]
 8004994:	3301      	adds	r3, #1
 8004996:	6123      	str	r3, [r4, #16]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	3b01      	subs	r3, #1
 800499c:	2b00      	cmp	r3, #0
 800499e:	607b      	str	r3, [r7, #4]
 80049a0:	f340 8084 	ble.w	8004aac <_scanf_float+0x27c>
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	3301      	adds	r3, #1
 80049a8:	603b      	str	r3, [r7, #0]
 80049aa:	e766      	b.n	800487a <_scanf_float+0x4a>
 80049ac:	eb1a 0f05 	cmn.w	sl, r5
 80049b0:	f47f af70 	bne.w	8004894 <_scanf_float+0x64>
 80049b4:	6822      	ldr	r2, [r4, #0]
 80049b6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80049ba:	6022      	str	r2, [r4, #0]
 80049bc:	f806 3b01 	strb.w	r3, [r6], #1
 80049c0:	e7e4      	b.n	800498c <_scanf_float+0x15c>
 80049c2:	6822      	ldr	r2, [r4, #0]
 80049c4:	0610      	lsls	r0, r2, #24
 80049c6:	f57f af65 	bpl.w	8004894 <_scanf_float+0x64>
 80049ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80049ce:	e7f4      	b.n	80049ba <_scanf_float+0x18a>
 80049d0:	f1ba 0f00 	cmp.w	sl, #0
 80049d4:	d10e      	bne.n	80049f4 <_scanf_float+0x1c4>
 80049d6:	f1b9 0f00 	cmp.w	r9, #0
 80049da:	d10e      	bne.n	80049fa <_scanf_float+0x1ca>
 80049dc:	6822      	ldr	r2, [r4, #0]
 80049de:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80049e2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80049e6:	d108      	bne.n	80049fa <_scanf_float+0x1ca>
 80049e8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80049ec:	f04f 0a01 	mov.w	sl, #1
 80049f0:	6022      	str	r2, [r4, #0]
 80049f2:	e7e3      	b.n	80049bc <_scanf_float+0x18c>
 80049f4:	f1ba 0f02 	cmp.w	sl, #2
 80049f8:	d055      	beq.n	8004aa6 <_scanf_float+0x276>
 80049fa:	2d01      	cmp	r5, #1
 80049fc:	d002      	beq.n	8004a04 <_scanf_float+0x1d4>
 80049fe:	2d04      	cmp	r5, #4
 8004a00:	f47f af48 	bne.w	8004894 <_scanf_float+0x64>
 8004a04:	3501      	adds	r5, #1
 8004a06:	b2ed      	uxtb	r5, r5
 8004a08:	e7d8      	b.n	80049bc <_scanf_float+0x18c>
 8004a0a:	f1ba 0f01 	cmp.w	sl, #1
 8004a0e:	f47f af41 	bne.w	8004894 <_scanf_float+0x64>
 8004a12:	f04f 0a02 	mov.w	sl, #2
 8004a16:	e7d1      	b.n	80049bc <_scanf_float+0x18c>
 8004a18:	b97d      	cbnz	r5, 8004a3a <_scanf_float+0x20a>
 8004a1a:	f1b9 0f00 	cmp.w	r9, #0
 8004a1e:	f47f af3c 	bne.w	800489a <_scanf_float+0x6a>
 8004a22:	6822      	ldr	r2, [r4, #0]
 8004a24:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004a28:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004a2c:	f47f af39 	bne.w	80048a2 <_scanf_float+0x72>
 8004a30:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004a34:	2501      	movs	r5, #1
 8004a36:	6022      	str	r2, [r4, #0]
 8004a38:	e7c0      	b.n	80049bc <_scanf_float+0x18c>
 8004a3a:	2d03      	cmp	r5, #3
 8004a3c:	d0e2      	beq.n	8004a04 <_scanf_float+0x1d4>
 8004a3e:	2d05      	cmp	r5, #5
 8004a40:	e7de      	b.n	8004a00 <_scanf_float+0x1d0>
 8004a42:	2d02      	cmp	r5, #2
 8004a44:	f47f af26 	bne.w	8004894 <_scanf_float+0x64>
 8004a48:	2503      	movs	r5, #3
 8004a4a:	e7b7      	b.n	80049bc <_scanf_float+0x18c>
 8004a4c:	2d06      	cmp	r5, #6
 8004a4e:	f47f af21 	bne.w	8004894 <_scanf_float+0x64>
 8004a52:	2507      	movs	r5, #7
 8004a54:	e7b2      	b.n	80049bc <_scanf_float+0x18c>
 8004a56:	6822      	ldr	r2, [r4, #0]
 8004a58:	0591      	lsls	r1, r2, #22
 8004a5a:	f57f af1b 	bpl.w	8004894 <_scanf_float+0x64>
 8004a5e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8004a62:	6022      	str	r2, [r4, #0]
 8004a64:	f8cd 9004 	str.w	r9, [sp, #4]
 8004a68:	e7a8      	b.n	80049bc <_scanf_float+0x18c>
 8004a6a:	6822      	ldr	r2, [r4, #0]
 8004a6c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8004a70:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8004a74:	d006      	beq.n	8004a84 <_scanf_float+0x254>
 8004a76:	0550      	lsls	r0, r2, #21
 8004a78:	f57f af0c 	bpl.w	8004894 <_scanf_float+0x64>
 8004a7c:	f1b9 0f00 	cmp.w	r9, #0
 8004a80:	f43f af0f 	beq.w	80048a2 <_scanf_float+0x72>
 8004a84:	0591      	lsls	r1, r2, #22
 8004a86:	bf58      	it	pl
 8004a88:	9901      	ldrpl	r1, [sp, #4]
 8004a8a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004a8e:	bf58      	it	pl
 8004a90:	eba9 0101 	subpl.w	r1, r9, r1
 8004a94:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8004a98:	f04f 0900 	mov.w	r9, #0
 8004a9c:	bf58      	it	pl
 8004a9e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8004aa2:	6022      	str	r2, [r4, #0]
 8004aa4:	e78a      	b.n	80049bc <_scanf_float+0x18c>
 8004aa6:	f04f 0a03 	mov.w	sl, #3
 8004aaa:	e787      	b.n	80049bc <_scanf_float+0x18c>
 8004aac:	4639      	mov	r1, r7
 8004aae:	4640      	mov	r0, r8
 8004ab0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004ab4:	4798      	blx	r3
 8004ab6:	2800      	cmp	r0, #0
 8004ab8:	f43f aedf 	beq.w	800487a <_scanf_float+0x4a>
 8004abc:	e6ea      	b.n	8004894 <_scanf_float+0x64>
 8004abe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004ac2:	463a      	mov	r2, r7
 8004ac4:	4640      	mov	r0, r8
 8004ac6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004aca:	4798      	blx	r3
 8004acc:	6923      	ldr	r3, [r4, #16]
 8004ace:	3b01      	subs	r3, #1
 8004ad0:	6123      	str	r3, [r4, #16]
 8004ad2:	e6ec      	b.n	80048ae <_scanf_float+0x7e>
 8004ad4:	1e6b      	subs	r3, r5, #1
 8004ad6:	2b06      	cmp	r3, #6
 8004ad8:	d825      	bhi.n	8004b26 <_scanf_float+0x2f6>
 8004ada:	2d02      	cmp	r5, #2
 8004adc:	d836      	bhi.n	8004b4c <_scanf_float+0x31c>
 8004ade:	455e      	cmp	r6, fp
 8004ae0:	f67f aee8 	bls.w	80048b4 <_scanf_float+0x84>
 8004ae4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004ae8:	463a      	mov	r2, r7
 8004aea:	4640      	mov	r0, r8
 8004aec:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004af0:	4798      	blx	r3
 8004af2:	6923      	ldr	r3, [r4, #16]
 8004af4:	3b01      	subs	r3, #1
 8004af6:	6123      	str	r3, [r4, #16]
 8004af8:	e7f1      	b.n	8004ade <_scanf_float+0x2ae>
 8004afa:	9802      	ldr	r0, [sp, #8]
 8004afc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004b00:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8004b04:	463a      	mov	r2, r7
 8004b06:	9002      	str	r0, [sp, #8]
 8004b08:	4640      	mov	r0, r8
 8004b0a:	4798      	blx	r3
 8004b0c:	6923      	ldr	r3, [r4, #16]
 8004b0e:	3b01      	subs	r3, #1
 8004b10:	6123      	str	r3, [r4, #16]
 8004b12:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004b16:	fa5f fa8a 	uxtb.w	sl, sl
 8004b1a:	f1ba 0f02 	cmp.w	sl, #2
 8004b1e:	d1ec      	bne.n	8004afa <_scanf_float+0x2ca>
 8004b20:	3d03      	subs	r5, #3
 8004b22:	b2ed      	uxtb	r5, r5
 8004b24:	1b76      	subs	r6, r6, r5
 8004b26:	6823      	ldr	r3, [r4, #0]
 8004b28:	05da      	lsls	r2, r3, #23
 8004b2a:	d52f      	bpl.n	8004b8c <_scanf_float+0x35c>
 8004b2c:	055b      	lsls	r3, r3, #21
 8004b2e:	d510      	bpl.n	8004b52 <_scanf_float+0x322>
 8004b30:	455e      	cmp	r6, fp
 8004b32:	f67f aebf 	bls.w	80048b4 <_scanf_float+0x84>
 8004b36:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004b3a:	463a      	mov	r2, r7
 8004b3c:	4640      	mov	r0, r8
 8004b3e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004b42:	4798      	blx	r3
 8004b44:	6923      	ldr	r3, [r4, #16]
 8004b46:	3b01      	subs	r3, #1
 8004b48:	6123      	str	r3, [r4, #16]
 8004b4a:	e7f1      	b.n	8004b30 <_scanf_float+0x300>
 8004b4c:	46aa      	mov	sl, r5
 8004b4e:	9602      	str	r6, [sp, #8]
 8004b50:	e7df      	b.n	8004b12 <_scanf_float+0x2e2>
 8004b52:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8004b56:	6923      	ldr	r3, [r4, #16]
 8004b58:	2965      	cmp	r1, #101	; 0x65
 8004b5a:	f103 33ff 	add.w	r3, r3, #4294967295
 8004b5e:	f106 35ff 	add.w	r5, r6, #4294967295
 8004b62:	6123      	str	r3, [r4, #16]
 8004b64:	d00c      	beq.n	8004b80 <_scanf_float+0x350>
 8004b66:	2945      	cmp	r1, #69	; 0x45
 8004b68:	d00a      	beq.n	8004b80 <_scanf_float+0x350>
 8004b6a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004b6e:	463a      	mov	r2, r7
 8004b70:	4640      	mov	r0, r8
 8004b72:	4798      	blx	r3
 8004b74:	6923      	ldr	r3, [r4, #16]
 8004b76:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8004b7a:	3b01      	subs	r3, #1
 8004b7c:	1eb5      	subs	r5, r6, #2
 8004b7e:	6123      	str	r3, [r4, #16]
 8004b80:	463a      	mov	r2, r7
 8004b82:	4640      	mov	r0, r8
 8004b84:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004b88:	4798      	blx	r3
 8004b8a:	462e      	mov	r6, r5
 8004b8c:	6825      	ldr	r5, [r4, #0]
 8004b8e:	f015 0510 	ands.w	r5, r5, #16
 8004b92:	d155      	bne.n	8004c40 <_scanf_float+0x410>
 8004b94:	7035      	strb	r5, [r6, #0]
 8004b96:	6823      	ldr	r3, [r4, #0]
 8004b98:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004b9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ba0:	d11b      	bne.n	8004bda <_scanf_float+0x3aa>
 8004ba2:	9b01      	ldr	r3, [sp, #4]
 8004ba4:	454b      	cmp	r3, r9
 8004ba6:	eba3 0209 	sub.w	r2, r3, r9
 8004baa:	d123      	bne.n	8004bf4 <_scanf_float+0x3c4>
 8004bac:	2200      	movs	r2, #0
 8004bae:	4659      	mov	r1, fp
 8004bb0:	4640      	mov	r0, r8
 8004bb2:	f000 fe79 	bl	80058a8 <_strtod_r>
 8004bb6:	6822      	ldr	r2, [r4, #0]
 8004bb8:	9b03      	ldr	r3, [sp, #12]
 8004bba:	f012 0f02 	tst.w	r2, #2
 8004bbe:	4606      	mov	r6, r0
 8004bc0:	460f      	mov	r7, r1
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	d021      	beq.n	8004c0a <_scanf_float+0x3da>
 8004bc6:	1d1a      	adds	r2, r3, #4
 8004bc8:	9903      	ldr	r1, [sp, #12]
 8004bca:	600a      	str	r2, [r1, #0]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	e9c3 6700 	strd	r6, r7, [r3]
 8004bd2:	68e3      	ldr	r3, [r4, #12]
 8004bd4:	3301      	adds	r3, #1
 8004bd6:	60e3      	str	r3, [r4, #12]
 8004bd8:	e66d      	b.n	80048b6 <_scanf_float+0x86>
 8004bda:	9b04      	ldr	r3, [sp, #16]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d0e5      	beq.n	8004bac <_scanf_float+0x37c>
 8004be0:	9905      	ldr	r1, [sp, #20]
 8004be2:	230a      	movs	r3, #10
 8004be4:	462a      	mov	r2, r5
 8004be6:	4640      	mov	r0, r8
 8004be8:	3101      	adds	r1, #1
 8004bea:	f000 fedf 	bl	80059ac <_strtol_r>
 8004bee:	9b04      	ldr	r3, [sp, #16]
 8004bf0:	9e05      	ldr	r6, [sp, #20]
 8004bf2:	1ac2      	subs	r2, r0, r3
 8004bf4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8004bf8:	429e      	cmp	r6, r3
 8004bfa:	bf28      	it	cs
 8004bfc:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8004c00:	4630      	mov	r0, r6
 8004c02:	4910      	ldr	r1, [pc, #64]	; (8004c44 <_scanf_float+0x414>)
 8004c04:	f000 f826 	bl	8004c54 <siprintf>
 8004c08:	e7d0      	b.n	8004bac <_scanf_float+0x37c>
 8004c0a:	f012 0f04 	tst.w	r2, #4
 8004c0e:	f103 0204 	add.w	r2, r3, #4
 8004c12:	d1d9      	bne.n	8004bc8 <_scanf_float+0x398>
 8004c14:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8004c18:	f8cc 2000 	str.w	r2, [ip]
 8004c1c:	f8d3 8000 	ldr.w	r8, [r3]
 8004c20:	4602      	mov	r2, r0
 8004c22:	460b      	mov	r3, r1
 8004c24:	f7fb fef2 	bl	8000a0c <__aeabi_dcmpun>
 8004c28:	b128      	cbz	r0, 8004c36 <_scanf_float+0x406>
 8004c2a:	4807      	ldr	r0, [pc, #28]	; (8004c48 <_scanf_float+0x418>)
 8004c2c:	f000 f80e 	bl	8004c4c <nanf>
 8004c30:	f8c8 0000 	str.w	r0, [r8]
 8004c34:	e7cd      	b.n	8004bd2 <_scanf_float+0x3a2>
 8004c36:	4630      	mov	r0, r6
 8004c38:	4639      	mov	r1, r7
 8004c3a:	f7fb ff45 	bl	8000ac8 <__aeabi_d2f>
 8004c3e:	e7f7      	b.n	8004c30 <_scanf_float+0x400>
 8004c40:	2500      	movs	r5, #0
 8004c42:	e638      	b.n	80048b6 <_scanf_float+0x86>
 8004c44:	08009dfc 	.word	0x08009dfc
 8004c48:	0800a208 	.word	0x0800a208

08004c4c <nanf>:
 8004c4c:	4800      	ldr	r0, [pc, #0]	; (8004c50 <nanf+0x4>)
 8004c4e:	4770      	bx	lr
 8004c50:	7fc00000 	.word	0x7fc00000

08004c54 <siprintf>:
 8004c54:	b40e      	push	{r1, r2, r3}
 8004c56:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004c5a:	b500      	push	{lr}
 8004c5c:	b09c      	sub	sp, #112	; 0x70
 8004c5e:	ab1d      	add	r3, sp, #116	; 0x74
 8004c60:	9002      	str	r0, [sp, #8]
 8004c62:	9006      	str	r0, [sp, #24]
 8004c64:	9107      	str	r1, [sp, #28]
 8004c66:	9104      	str	r1, [sp, #16]
 8004c68:	4808      	ldr	r0, [pc, #32]	; (8004c8c <siprintf+0x38>)
 8004c6a:	4909      	ldr	r1, [pc, #36]	; (8004c90 <siprintf+0x3c>)
 8004c6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c70:	9105      	str	r1, [sp, #20]
 8004c72:	6800      	ldr	r0, [r0, #0]
 8004c74:	a902      	add	r1, sp, #8
 8004c76:	9301      	str	r3, [sp, #4]
 8004c78:	f002 feaa 	bl	80079d0 <_svfiprintf_r>
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	9b02      	ldr	r3, [sp, #8]
 8004c80:	701a      	strb	r2, [r3, #0]
 8004c82:	b01c      	add	sp, #112	; 0x70
 8004c84:	f85d eb04 	ldr.w	lr, [sp], #4
 8004c88:	b003      	add	sp, #12
 8004c8a:	4770      	bx	lr
 8004c8c:	2000001c 	.word	0x2000001c
 8004c90:	ffff0208 	.word	0xffff0208

08004c94 <sulp>:
 8004c94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c98:	460f      	mov	r7, r1
 8004c9a:	4690      	mov	r8, r2
 8004c9c:	f002 fc04 	bl	80074a8 <__ulp>
 8004ca0:	4604      	mov	r4, r0
 8004ca2:	460d      	mov	r5, r1
 8004ca4:	f1b8 0f00 	cmp.w	r8, #0
 8004ca8:	d011      	beq.n	8004cce <sulp+0x3a>
 8004caa:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8004cae:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	dd0b      	ble.n	8004cce <sulp+0x3a>
 8004cb6:	2400      	movs	r4, #0
 8004cb8:	051b      	lsls	r3, r3, #20
 8004cba:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8004cbe:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8004cc2:	4622      	mov	r2, r4
 8004cc4:	462b      	mov	r3, r5
 8004cc6:	f7fb fc07 	bl	80004d8 <__aeabi_dmul>
 8004cca:	4604      	mov	r4, r0
 8004ccc:	460d      	mov	r5, r1
 8004cce:	4620      	mov	r0, r4
 8004cd0:	4629      	mov	r1, r5
 8004cd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08004cd8 <_strtod_l>:
 8004cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cdc:	469b      	mov	fp, r3
 8004cde:	2300      	movs	r3, #0
 8004ce0:	b09f      	sub	sp, #124	; 0x7c
 8004ce2:	931a      	str	r3, [sp, #104]	; 0x68
 8004ce4:	4b9e      	ldr	r3, [pc, #632]	; (8004f60 <_strtod_l+0x288>)
 8004ce6:	4682      	mov	sl, r0
 8004ce8:	681f      	ldr	r7, [r3, #0]
 8004cea:	460e      	mov	r6, r1
 8004cec:	4638      	mov	r0, r7
 8004cee:	9215      	str	r2, [sp, #84]	; 0x54
 8004cf0:	f7fb fa2e 	bl	8000150 <strlen>
 8004cf4:	f04f 0800 	mov.w	r8, #0
 8004cf8:	4604      	mov	r4, r0
 8004cfa:	f04f 0900 	mov.w	r9, #0
 8004cfe:	9619      	str	r6, [sp, #100]	; 0x64
 8004d00:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004d02:	781a      	ldrb	r2, [r3, #0]
 8004d04:	2a2b      	cmp	r2, #43	; 0x2b
 8004d06:	d04c      	beq.n	8004da2 <_strtod_l+0xca>
 8004d08:	d83a      	bhi.n	8004d80 <_strtod_l+0xa8>
 8004d0a:	2a0d      	cmp	r2, #13
 8004d0c:	d833      	bhi.n	8004d76 <_strtod_l+0x9e>
 8004d0e:	2a08      	cmp	r2, #8
 8004d10:	d833      	bhi.n	8004d7a <_strtod_l+0xa2>
 8004d12:	2a00      	cmp	r2, #0
 8004d14:	d03d      	beq.n	8004d92 <_strtod_l+0xba>
 8004d16:	2300      	movs	r3, #0
 8004d18:	930a      	str	r3, [sp, #40]	; 0x28
 8004d1a:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8004d1c:	782b      	ldrb	r3, [r5, #0]
 8004d1e:	2b30      	cmp	r3, #48	; 0x30
 8004d20:	f040 80aa 	bne.w	8004e78 <_strtod_l+0x1a0>
 8004d24:	786b      	ldrb	r3, [r5, #1]
 8004d26:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8004d2a:	2b58      	cmp	r3, #88	; 0x58
 8004d2c:	d166      	bne.n	8004dfc <_strtod_l+0x124>
 8004d2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d30:	4650      	mov	r0, sl
 8004d32:	9301      	str	r3, [sp, #4]
 8004d34:	ab1a      	add	r3, sp, #104	; 0x68
 8004d36:	9300      	str	r3, [sp, #0]
 8004d38:	4a8a      	ldr	r2, [pc, #552]	; (8004f64 <_strtod_l+0x28c>)
 8004d3a:	f8cd b008 	str.w	fp, [sp, #8]
 8004d3e:	ab1b      	add	r3, sp, #108	; 0x6c
 8004d40:	a919      	add	r1, sp, #100	; 0x64
 8004d42:	f001 fd17 	bl	8006774 <__gethex>
 8004d46:	f010 0607 	ands.w	r6, r0, #7
 8004d4a:	4604      	mov	r4, r0
 8004d4c:	d005      	beq.n	8004d5a <_strtod_l+0x82>
 8004d4e:	2e06      	cmp	r6, #6
 8004d50:	d129      	bne.n	8004da6 <_strtod_l+0xce>
 8004d52:	2300      	movs	r3, #0
 8004d54:	3501      	adds	r5, #1
 8004d56:	9519      	str	r5, [sp, #100]	; 0x64
 8004d58:	930a      	str	r3, [sp, #40]	; 0x28
 8004d5a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	f040 858a 	bne.w	8005876 <_strtod_l+0xb9e>
 8004d62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d64:	b1d3      	cbz	r3, 8004d9c <_strtod_l+0xc4>
 8004d66:	4642      	mov	r2, r8
 8004d68:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8004d6c:	4610      	mov	r0, r2
 8004d6e:	4619      	mov	r1, r3
 8004d70:	b01f      	add	sp, #124	; 0x7c
 8004d72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d76:	2a20      	cmp	r2, #32
 8004d78:	d1cd      	bne.n	8004d16 <_strtod_l+0x3e>
 8004d7a:	3301      	adds	r3, #1
 8004d7c:	9319      	str	r3, [sp, #100]	; 0x64
 8004d7e:	e7bf      	b.n	8004d00 <_strtod_l+0x28>
 8004d80:	2a2d      	cmp	r2, #45	; 0x2d
 8004d82:	d1c8      	bne.n	8004d16 <_strtod_l+0x3e>
 8004d84:	2201      	movs	r2, #1
 8004d86:	920a      	str	r2, [sp, #40]	; 0x28
 8004d88:	1c5a      	adds	r2, r3, #1
 8004d8a:	9219      	str	r2, [sp, #100]	; 0x64
 8004d8c:	785b      	ldrb	r3, [r3, #1]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d1c3      	bne.n	8004d1a <_strtod_l+0x42>
 8004d92:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004d94:	9619      	str	r6, [sp, #100]	; 0x64
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	f040 856b 	bne.w	8005872 <_strtod_l+0xb9a>
 8004d9c:	4642      	mov	r2, r8
 8004d9e:	464b      	mov	r3, r9
 8004da0:	e7e4      	b.n	8004d6c <_strtod_l+0x94>
 8004da2:	2200      	movs	r2, #0
 8004da4:	e7ef      	b.n	8004d86 <_strtod_l+0xae>
 8004da6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8004da8:	b13a      	cbz	r2, 8004dba <_strtod_l+0xe2>
 8004daa:	2135      	movs	r1, #53	; 0x35
 8004dac:	a81c      	add	r0, sp, #112	; 0x70
 8004dae:	f002 fc7f 	bl	80076b0 <__copybits>
 8004db2:	4650      	mov	r0, sl
 8004db4:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004db6:	f002 f847 	bl	8006e48 <_Bfree>
 8004dba:	3e01      	subs	r6, #1
 8004dbc:	2e04      	cmp	r6, #4
 8004dbe:	d806      	bhi.n	8004dce <_strtod_l+0xf6>
 8004dc0:	e8df f006 	tbb	[pc, r6]
 8004dc4:	1714030a 	.word	0x1714030a
 8004dc8:	0a          	.byte	0x0a
 8004dc9:	00          	.byte	0x00
 8004dca:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8004dce:	0721      	lsls	r1, r4, #28
 8004dd0:	d5c3      	bpl.n	8004d5a <_strtod_l+0x82>
 8004dd2:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8004dd6:	e7c0      	b.n	8004d5a <_strtod_l+0x82>
 8004dd8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8004dda:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8004dde:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8004de2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004de6:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8004dea:	e7f0      	b.n	8004dce <_strtod_l+0xf6>
 8004dec:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8004f68 <_strtod_l+0x290>
 8004df0:	e7ed      	b.n	8004dce <_strtod_l+0xf6>
 8004df2:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8004df6:	f04f 38ff 	mov.w	r8, #4294967295
 8004dfa:	e7e8      	b.n	8004dce <_strtod_l+0xf6>
 8004dfc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004dfe:	1c5a      	adds	r2, r3, #1
 8004e00:	9219      	str	r2, [sp, #100]	; 0x64
 8004e02:	785b      	ldrb	r3, [r3, #1]
 8004e04:	2b30      	cmp	r3, #48	; 0x30
 8004e06:	d0f9      	beq.n	8004dfc <_strtod_l+0x124>
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d0a6      	beq.n	8004d5a <_strtod_l+0x82>
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	9307      	str	r3, [sp, #28]
 8004e10:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004e12:	220a      	movs	r2, #10
 8004e14:	9308      	str	r3, [sp, #32]
 8004e16:	2300      	movs	r3, #0
 8004e18:	469b      	mov	fp, r3
 8004e1a:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8004e1e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8004e20:	7805      	ldrb	r5, [r0, #0]
 8004e22:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8004e26:	b2d9      	uxtb	r1, r3
 8004e28:	2909      	cmp	r1, #9
 8004e2a:	d927      	bls.n	8004e7c <_strtod_l+0x1a4>
 8004e2c:	4622      	mov	r2, r4
 8004e2e:	4639      	mov	r1, r7
 8004e30:	f002 fee4 	bl	8007bfc <strncmp>
 8004e34:	2800      	cmp	r0, #0
 8004e36:	d033      	beq.n	8004ea0 <_strtod_l+0x1c8>
 8004e38:	2000      	movs	r0, #0
 8004e3a:	462a      	mov	r2, r5
 8004e3c:	465c      	mov	r4, fp
 8004e3e:	4603      	mov	r3, r0
 8004e40:	9004      	str	r0, [sp, #16]
 8004e42:	2a65      	cmp	r2, #101	; 0x65
 8004e44:	d001      	beq.n	8004e4a <_strtod_l+0x172>
 8004e46:	2a45      	cmp	r2, #69	; 0x45
 8004e48:	d114      	bne.n	8004e74 <_strtod_l+0x19c>
 8004e4a:	b91c      	cbnz	r4, 8004e54 <_strtod_l+0x17c>
 8004e4c:	9a07      	ldr	r2, [sp, #28]
 8004e4e:	4302      	orrs	r2, r0
 8004e50:	d09f      	beq.n	8004d92 <_strtod_l+0xba>
 8004e52:	2400      	movs	r4, #0
 8004e54:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8004e56:	1c72      	adds	r2, r6, #1
 8004e58:	9219      	str	r2, [sp, #100]	; 0x64
 8004e5a:	7872      	ldrb	r2, [r6, #1]
 8004e5c:	2a2b      	cmp	r2, #43	; 0x2b
 8004e5e:	d079      	beq.n	8004f54 <_strtod_l+0x27c>
 8004e60:	2a2d      	cmp	r2, #45	; 0x2d
 8004e62:	f000 8083 	beq.w	8004f6c <_strtod_l+0x294>
 8004e66:	2700      	movs	r7, #0
 8004e68:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8004e6c:	2909      	cmp	r1, #9
 8004e6e:	f240 8083 	bls.w	8004f78 <_strtod_l+0x2a0>
 8004e72:	9619      	str	r6, [sp, #100]	; 0x64
 8004e74:	2500      	movs	r5, #0
 8004e76:	e09f      	b.n	8004fb8 <_strtod_l+0x2e0>
 8004e78:	2300      	movs	r3, #0
 8004e7a:	e7c8      	b.n	8004e0e <_strtod_l+0x136>
 8004e7c:	f1bb 0f08 	cmp.w	fp, #8
 8004e80:	bfd5      	itete	le
 8004e82:	9906      	ldrle	r1, [sp, #24]
 8004e84:	9905      	ldrgt	r1, [sp, #20]
 8004e86:	fb02 3301 	mlale	r3, r2, r1, r3
 8004e8a:	fb02 3301 	mlagt	r3, r2, r1, r3
 8004e8e:	f100 0001 	add.w	r0, r0, #1
 8004e92:	bfd4      	ite	le
 8004e94:	9306      	strle	r3, [sp, #24]
 8004e96:	9305      	strgt	r3, [sp, #20]
 8004e98:	f10b 0b01 	add.w	fp, fp, #1
 8004e9c:	9019      	str	r0, [sp, #100]	; 0x64
 8004e9e:	e7be      	b.n	8004e1e <_strtod_l+0x146>
 8004ea0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004ea2:	191a      	adds	r2, r3, r4
 8004ea4:	9219      	str	r2, [sp, #100]	; 0x64
 8004ea6:	5d1a      	ldrb	r2, [r3, r4]
 8004ea8:	f1bb 0f00 	cmp.w	fp, #0
 8004eac:	d036      	beq.n	8004f1c <_strtod_l+0x244>
 8004eae:	465c      	mov	r4, fp
 8004eb0:	9004      	str	r0, [sp, #16]
 8004eb2:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8004eb6:	2b09      	cmp	r3, #9
 8004eb8:	d912      	bls.n	8004ee0 <_strtod_l+0x208>
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e7c1      	b.n	8004e42 <_strtod_l+0x16a>
 8004ebe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004ec0:	3001      	adds	r0, #1
 8004ec2:	1c5a      	adds	r2, r3, #1
 8004ec4:	9219      	str	r2, [sp, #100]	; 0x64
 8004ec6:	785a      	ldrb	r2, [r3, #1]
 8004ec8:	2a30      	cmp	r2, #48	; 0x30
 8004eca:	d0f8      	beq.n	8004ebe <_strtod_l+0x1e6>
 8004ecc:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8004ed0:	2b08      	cmp	r3, #8
 8004ed2:	f200 84d5 	bhi.w	8005880 <_strtod_l+0xba8>
 8004ed6:	9004      	str	r0, [sp, #16]
 8004ed8:	2000      	movs	r0, #0
 8004eda:	4604      	mov	r4, r0
 8004edc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004ede:	9308      	str	r3, [sp, #32]
 8004ee0:	3a30      	subs	r2, #48	; 0x30
 8004ee2:	f100 0301 	add.w	r3, r0, #1
 8004ee6:	d013      	beq.n	8004f10 <_strtod_l+0x238>
 8004ee8:	9904      	ldr	r1, [sp, #16]
 8004eea:	1905      	adds	r5, r0, r4
 8004eec:	4419      	add	r1, r3
 8004eee:	9104      	str	r1, [sp, #16]
 8004ef0:	4623      	mov	r3, r4
 8004ef2:	210a      	movs	r1, #10
 8004ef4:	42ab      	cmp	r3, r5
 8004ef6:	d113      	bne.n	8004f20 <_strtod_l+0x248>
 8004ef8:	1823      	adds	r3, r4, r0
 8004efa:	2b08      	cmp	r3, #8
 8004efc:	f104 0401 	add.w	r4, r4, #1
 8004f00:	4404      	add	r4, r0
 8004f02:	dc1b      	bgt.n	8004f3c <_strtod_l+0x264>
 8004f04:	230a      	movs	r3, #10
 8004f06:	9906      	ldr	r1, [sp, #24]
 8004f08:	fb03 2301 	mla	r3, r3, r1, r2
 8004f0c:	9306      	str	r3, [sp, #24]
 8004f0e:	2300      	movs	r3, #0
 8004f10:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8004f12:	4618      	mov	r0, r3
 8004f14:	1c51      	adds	r1, r2, #1
 8004f16:	9119      	str	r1, [sp, #100]	; 0x64
 8004f18:	7852      	ldrb	r2, [r2, #1]
 8004f1a:	e7ca      	b.n	8004eb2 <_strtod_l+0x1da>
 8004f1c:	4658      	mov	r0, fp
 8004f1e:	e7d3      	b.n	8004ec8 <_strtod_l+0x1f0>
 8004f20:	2b08      	cmp	r3, #8
 8004f22:	dc04      	bgt.n	8004f2e <_strtod_l+0x256>
 8004f24:	9f06      	ldr	r7, [sp, #24]
 8004f26:	434f      	muls	r7, r1
 8004f28:	9706      	str	r7, [sp, #24]
 8004f2a:	3301      	adds	r3, #1
 8004f2c:	e7e2      	b.n	8004ef4 <_strtod_l+0x21c>
 8004f2e:	1c5f      	adds	r7, r3, #1
 8004f30:	2f10      	cmp	r7, #16
 8004f32:	bfde      	ittt	le
 8004f34:	9f05      	ldrle	r7, [sp, #20]
 8004f36:	434f      	mulle	r7, r1
 8004f38:	9705      	strle	r7, [sp, #20]
 8004f3a:	e7f6      	b.n	8004f2a <_strtod_l+0x252>
 8004f3c:	2c10      	cmp	r4, #16
 8004f3e:	bfdf      	itttt	le
 8004f40:	230a      	movle	r3, #10
 8004f42:	9905      	ldrle	r1, [sp, #20]
 8004f44:	fb03 2301 	mlale	r3, r3, r1, r2
 8004f48:	9305      	strle	r3, [sp, #20]
 8004f4a:	e7e0      	b.n	8004f0e <_strtod_l+0x236>
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	9304      	str	r3, [sp, #16]
 8004f50:	2301      	movs	r3, #1
 8004f52:	e77b      	b.n	8004e4c <_strtod_l+0x174>
 8004f54:	2700      	movs	r7, #0
 8004f56:	1cb2      	adds	r2, r6, #2
 8004f58:	9219      	str	r2, [sp, #100]	; 0x64
 8004f5a:	78b2      	ldrb	r2, [r6, #2]
 8004f5c:	e784      	b.n	8004e68 <_strtod_l+0x190>
 8004f5e:	bf00      	nop
 8004f60:	0800a050 	.word	0x0800a050
 8004f64:	08009e04 	.word	0x08009e04
 8004f68:	7ff00000 	.word	0x7ff00000
 8004f6c:	2701      	movs	r7, #1
 8004f6e:	e7f2      	b.n	8004f56 <_strtod_l+0x27e>
 8004f70:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8004f72:	1c51      	adds	r1, r2, #1
 8004f74:	9119      	str	r1, [sp, #100]	; 0x64
 8004f76:	7852      	ldrb	r2, [r2, #1]
 8004f78:	2a30      	cmp	r2, #48	; 0x30
 8004f7a:	d0f9      	beq.n	8004f70 <_strtod_l+0x298>
 8004f7c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8004f80:	2908      	cmp	r1, #8
 8004f82:	f63f af77 	bhi.w	8004e74 <_strtod_l+0x19c>
 8004f86:	f04f 0e0a 	mov.w	lr, #10
 8004f8a:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8004f8e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8004f90:	9209      	str	r2, [sp, #36]	; 0x24
 8004f92:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8004f94:	1c51      	adds	r1, r2, #1
 8004f96:	9119      	str	r1, [sp, #100]	; 0x64
 8004f98:	7852      	ldrb	r2, [r2, #1]
 8004f9a:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8004f9e:	2d09      	cmp	r5, #9
 8004fa0:	d935      	bls.n	800500e <_strtod_l+0x336>
 8004fa2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8004fa4:	1b49      	subs	r1, r1, r5
 8004fa6:	2908      	cmp	r1, #8
 8004fa8:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8004fac:	dc02      	bgt.n	8004fb4 <_strtod_l+0x2dc>
 8004fae:	4565      	cmp	r5, ip
 8004fb0:	bfa8      	it	ge
 8004fb2:	4665      	movge	r5, ip
 8004fb4:	b107      	cbz	r7, 8004fb8 <_strtod_l+0x2e0>
 8004fb6:	426d      	negs	r5, r5
 8004fb8:	2c00      	cmp	r4, #0
 8004fba:	d14c      	bne.n	8005056 <_strtod_l+0x37e>
 8004fbc:	9907      	ldr	r1, [sp, #28]
 8004fbe:	4301      	orrs	r1, r0
 8004fc0:	f47f aecb 	bne.w	8004d5a <_strtod_l+0x82>
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	f47f aee4 	bne.w	8004d92 <_strtod_l+0xba>
 8004fca:	2a69      	cmp	r2, #105	; 0x69
 8004fcc:	d026      	beq.n	800501c <_strtod_l+0x344>
 8004fce:	dc23      	bgt.n	8005018 <_strtod_l+0x340>
 8004fd0:	2a49      	cmp	r2, #73	; 0x49
 8004fd2:	d023      	beq.n	800501c <_strtod_l+0x344>
 8004fd4:	2a4e      	cmp	r2, #78	; 0x4e
 8004fd6:	f47f aedc 	bne.w	8004d92 <_strtod_l+0xba>
 8004fda:	499d      	ldr	r1, [pc, #628]	; (8005250 <_strtod_l+0x578>)
 8004fdc:	a819      	add	r0, sp, #100	; 0x64
 8004fde:	f001 fe17 	bl	8006c10 <__match>
 8004fe2:	2800      	cmp	r0, #0
 8004fe4:	f43f aed5 	beq.w	8004d92 <_strtod_l+0xba>
 8004fe8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004fea:	781b      	ldrb	r3, [r3, #0]
 8004fec:	2b28      	cmp	r3, #40	; 0x28
 8004fee:	d12c      	bne.n	800504a <_strtod_l+0x372>
 8004ff0:	4998      	ldr	r1, [pc, #608]	; (8005254 <_strtod_l+0x57c>)
 8004ff2:	aa1c      	add	r2, sp, #112	; 0x70
 8004ff4:	a819      	add	r0, sp, #100	; 0x64
 8004ff6:	f001 fe1f 	bl	8006c38 <__hexnan>
 8004ffa:	2805      	cmp	r0, #5
 8004ffc:	d125      	bne.n	800504a <_strtod_l+0x372>
 8004ffe:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005000:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8005004:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8005008:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800500c:	e6a5      	b.n	8004d5a <_strtod_l+0x82>
 800500e:	fb0e 2c0c 	mla	ip, lr, ip, r2
 8005012:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8005016:	e7bc      	b.n	8004f92 <_strtod_l+0x2ba>
 8005018:	2a6e      	cmp	r2, #110	; 0x6e
 800501a:	e7dc      	b.n	8004fd6 <_strtod_l+0x2fe>
 800501c:	498e      	ldr	r1, [pc, #568]	; (8005258 <_strtod_l+0x580>)
 800501e:	a819      	add	r0, sp, #100	; 0x64
 8005020:	f001 fdf6 	bl	8006c10 <__match>
 8005024:	2800      	cmp	r0, #0
 8005026:	f43f aeb4 	beq.w	8004d92 <_strtod_l+0xba>
 800502a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800502c:	498b      	ldr	r1, [pc, #556]	; (800525c <_strtod_l+0x584>)
 800502e:	3b01      	subs	r3, #1
 8005030:	a819      	add	r0, sp, #100	; 0x64
 8005032:	9319      	str	r3, [sp, #100]	; 0x64
 8005034:	f001 fdec 	bl	8006c10 <__match>
 8005038:	b910      	cbnz	r0, 8005040 <_strtod_l+0x368>
 800503a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800503c:	3301      	adds	r3, #1
 800503e:	9319      	str	r3, [sp, #100]	; 0x64
 8005040:	f04f 0800 	mov.w	r8, #0
 8005044:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8005260 <_strtod_l+0x588>
 8005048:	e687      	b.n	8004d5a <_strtod_l+0x82>
 800504a:	4886      	ldr	r0, [pc, #536]	; (8005264 <_strtod_l+0x58c>)
 800504c:	f002 fdc0 	bl	8007bd0 <nan>
 8005050:	4680      	mov	r8, r0
 8005052:	4689      	mov	r9, r1
 8005054:	e681      	b.n	8004d5a <_strtod_l+0x82>
 8005056:	9b04      	ldr	r3, [sp, #16]
 8005058:	f1bb 0f00 	cmp.w	fp, #0
 800505c:	bf08      	it	eq
 800505e:	46a3      	moveq	fp, r4
 8005060:	1aeb      	subs	r3, r5, r3
 8005062:	2c10      	cmp	r4, #16
 8005064:	9806      	ldr	r0, [sp, #24]
 8005066:	4626      	mov	r6, r4
 8005068:	9307      	str	r3, [sp, #28]
 800506a:	bfa8      	it	ge
 800506c:	2610      	movge	r6, #16
 800506e:	f7fb f9b9 	bl	80003e4 <__aeabi_ui2d>
 8005072:	2c09      	cmp	r4, #9
 8005074:	4680      	mov	r8, r0
 8005076:	4689      	mov	r9, r1
 8005078:	dd13      	ble.n	80050a2 <_strtod_l+0x3ca>
 800507a:	4b7b      	ldr	r3, [pc, #492]	; (8005268 <_strtod_l+0x590>)
 800507c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005080:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8005084:	f7fb fa28 	bl	80004d8 <__aeabi_dmul>
 8005088:	4680      	mov	r8, r0
 800508a:	9805      	ldr	r0, [sp, #20]
 800508c:	4689      	mov	r9, r1
 800508e:	f7fb f9a9 	bl	80003e4 <__aeabi_ui2d>
 8005092:	4602      	mov	r2, r0
 8005094:	460b      	mov	r3, r1
 8005096:	4640      	mov	r0, r8
 8005098:	4649      	mov	r1, r9
 800509a:	f7fb f867 	bl	800016c <__adddf3>
 800509e:	4680      	mov	r8, r0
 80050a0:	4689      	mov	r9, r1
 80050a2:	2c0f      	cmp	r4, #15
 80050a4:	dc36      	bgt.n	8005114 <_strtod_l+0x43c>
 80050a6:	9b07      	ldr	r3, [sp, #28]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	f43f ae56 	beq.w	8004d5a <_strtod_l+0x82>
 80050ae:	dd22      	ble.n	80050f6 <_strtod_l+0x41e>
 80050b0:	2b16      	cmp	r3, #22
 80050b2:	dc09      	bgt.n	80050c8 <_strtod_l+0x3f0>
 80050b4:	496c      	ldr	r1, [pc, #432]	; (8005268 <_strtod_l+0x590>)
 80050b6:	4642      	mov	r2, r8
 80050b8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80050bc:	464b      	mov	r3, r9
 80050be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80050c2:	f7fb fa09 	bl	80004d8 <__aeabi_dmul>
 80050c6:	e7c3      	b.n	8005050 <_strtod_l+0x378>
 80050c8:	9a07      	ldr	r2, [sp, #28]
 80050ca:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80050ce:	4293      	cmp	r3, r2
 80050d0:	db20      	blt.n	8005114 <_strtod_l+0x43c>
 80050d2:	4d65      	ldr	r5, [pc, #404]	; (8005268 <_strtod_l+0x590>)
 80050d4:	f1c4 040f 	rsb	r4, r4, #15
 80050d8:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80050dc:	4642      	mov	r2, r8
 80050de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80050e2:	464b      	mov	r3, r9
 80050e4:	f7fb f9f8 	bl	80004d8 <__aeabi_dmul>
 80050e8:	9b07      	ldr	r3, [sp, #28]
 80050ea:	1b1c      	subs	r4, r3, r4
 80050ec:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80050f0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80050f4:	e7e5      	b.n	80050c2 <_strtod_l+0x3ea>
 80050f6:	9b07      	ldr	r3, [sp, #28]
 80050f8:	3316      	adds	r3, #22
 80050fa:	db0b      	blt.n	8005114 <_strtod_l+0x43c>
 80050fc:	9b04      	ldr	r3, [sp, #16]
 80050fe:	4640      	mov	r0, r8
 8005100:	1b5d      	subs	r5, r3, r5
 8005102:	4b59      	ldr	r3, [pc, #356]	; (8005268 <_strtod_l+0x590>)
 8005104:	4649      	mov	r1, r9
 8005106:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800510a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800510e:	f7fb fb0d 	bl	800072c <__aeabi_ddiv>
 8005112:	e79d      	b.n	8005050 <_strtod_l+0x378>
 8005114:	9b07      	ldr	r3, [sp, #28]
 8005116:	1ba6      	subs	r6, r4, r6
 8005118:	441e      	add	r6, r3
 800511a:	2e00      	cmp	r6, #0
 800511c:	dd74      	ble.n	8005208 <_strtod_l+0x530>
 800511e:	f016 030f 	ands.w	r3, r6, #15
 8005122:	d00a      	beq.n	800513a <_strtod_l+0x462>
 8005124:	4950      	ldr	r1, [pc, #320]	; (8005268 <_strtod_l+0x590>)
 8005126:	4642      	mov	r2, r8
 8005128:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800512c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005130:	464b      	mov	r3, r9
 8005132:	f7fb f9d1 	bl	80004d8 <__aeabi_dmul>
 8005136:	4680      	mov	r8, r0
 8005138:	4689      	mov	r9, r1
 800513a:	f036 060f 	bics.w	r6, r6, #15
 800513e:	d052      	beq.n	80051e6 <_strtod_l+0x50e>
 8005140:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8005144:	dd27      	ble.n	8005196 <_strtod_l+0x4be>
 8005146:	f04f 0b00 	mov.w	fp, #0
 800514a:	f8cd b010 	str.w	fp, [sp, #16]
 800514e:	f8cd b020 	str.w	fp, [sp, #32]
 8005152:	f8cd b018 	str.w	fp, [sp, #24]
 8005156:	2322      	movs	r3, #34	; 0x22
 8005158:	f04f 0800 	mov.w	r8, #0
 800515c:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8005260 <_strtod_l+0x588>
 8005160:	f8ca 3000 	str.w	r3, [sl]
 8005164:	9b08      	ldr	r3, [sp, #32]
 8005166:	2b00      	cmp	r3, #0
 8005168:	f43f adf7 	beq.w	8004d5a <_strtod_l+0x82>
 800516c:	4650      	mov	r0, sl
 800516e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005170:	f001 fe6a 	bl	8006e48 <_Bfree>
 8005174:	4650      	mov	r0, sl
 8005176:	9906      	ldr	r1, [sp, #24]
 8005178:	f001 fe66 	bl	8006e48 <_Bfree>
 800517c:	4650      	mov	r0, sl
 800517e:	9904      	ldr	r1, [sp, #16]
 8005180:	f001 fe62 	bl	8006e48 <_Bfree>
 8005184:	4650      	mov	r0, sl
 8005186:	9908      	ldr	r1, [sp, #32]
 8005188:	f001 fe5e 	bl	8006e48 <_Bfree>
 800518c:	4659      	mov	r1, fp
 800518e:	4650      	mov	r0, sl
 8005190:	f001 fe5a 	bl	8006e48 <_Bfree>
 8005194:	e5e1      	b.n	8004d5a <_strtod_l+0x82>
 8005196:	4b35      	ldr	r3, [pc, #212]	; (800526c <_strtod_l+0x594>)
 8005198:	4640      	mov	r0, r8
 800519a:	9305      	str	r3, [sp, #20]
 800519c:	2300      	movs	r3, #0
 800519e:	4649      	mov	r1, r9
 80051a0:	461f      	mov	r7, r3
 80051a2:	1136      	asrs	r6, r6, #4
 80051a4:	2e01      	cmp	r6, #1
 80051a6:	dc21      	bgt.n	80051ec <_strtod_l+0x514>
 80051a8:	b10b      	cbz	r3, 80051ae <_strtod_l+0x4d6>
 80051aa:	4680      	mov	r8, r0
 80051ac:	4689      	mov	r9, r1
 80051ae:	4b2f      	ldr	r3, [pc, #188]	; (800526c <_strtod_l+0x594>)
 80051b0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80051b4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80051b8:	4642      	mov	r2, r8
 80051ba:	e9d7 0100 	ldrd	r0, r1, [r7]
 80051be:	464b      	mov	r3, r9
 80051c0:	f7fb f98a 	bl	80004d8 <__aeabi_dmul>
 80051c4:	4b26      	ldr	r3, [pc, #152]	; (8005260 <_strtod_l+0x588>)
 80051c6:	460a      	mov	r2, r1
 80051c8:	400b      	ands	r3, r1
 80051ca:	4929      	ldr	r1, [pc, #164]	; (8005270 <_strtod_l+0x598>)
 80051cc:	4680      	mov	r8, r0
 80051ce:	428b      	cmp	r3, r1
 80051d0:	d8b9      	bhi.n	8005146 <_strtod_l+0x46e>
 80051d2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80051d6:	428b      	cmp	r3, r1
 80051d8:	bf86      	itte	hi
 80051da:	f04f 38ff 	movhi.w	r8, #4294967295
 80051de:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8005274 <_strtod_l+0x59c>
 80051e2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80051e6:	2300      	movs	r3, #0
 80051e8:	9305      	str	r3, [sp, #20]
 80051ea:	e07f      	b.n	80052ec <_strtod_l+0x614>
 80051ec:	07f2      	lsls	r2, r6, #31
 80051ee:	d505      	bpl.n	80051fc <_strtod_l+0x524>
 80051f0:	9b05      	ldr	r3, [sp, #20]
 80051f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051f6:	f7fb f96f 	bl	80004d8 <__aeabi_dmul>
 80051fa:	2301      	movs	r3, #1
 80051fc:	9a05      	ldr	r2, [sp, #20]
 80051fe:	3701      	adds	r7, #1
 8005200:	3208      	adds	r2, #8
 8005202:	1076      	asrs	r6, r6, #1
 8005204:	9205      	str	r2, [sp, #20]
 8005206:	e7cd      	b.n	80051a4 <_strtod_l+0x4cc>
 8005208:	d0ed      	beq.n	80051e6 <_strtod_l+0x50e>
 800520a:	4276      	negs	r6, r6
 800520c:	f016 020f 	ands.w	r2, r6, #15
 8005210:	d00a      	beq.n	8005228 <_strtod_l+0x550>
 8005212:	4b15      	ldr	r3, [pc, #84]	; (8005268 <_strtod_l+0x590>)
 8005214:	4640      	mov	r0, r8
 8005216:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800521a:	4649      	mov	r1, r9
 800521c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005220:	f7fb fa84 	bl	800072c <__aeabi_ddiv>
 8005224:	4680      	mov	r8, r0
 8005226:	4689      	mov	r9, r1
 8005228:	1136      	asrs	r6, r6, #4
 800522a:	d0dc      	beq.n	80051e6 <_strtod_l+0x50e>
 800522c:	2e1f      	cmp	r6, #31
 800522e:	dd23      	ble.n	8005278 <_strtod_l+0x5a0>
 8005230:	f04f 0b00 	mov.w	fp, #0
 8005234:	f8cd b010 	str.w	fp, [sp, #16]
 8005238:	f8cd b020 	str.w	fp, [sp, #32]
 800523c:	f8cd b018 	str.w	fp, [sp, #24]
 8005240:	2322      	movs	r3, #34	; 0x22
 8005242:	f04f 0800 	mov.w	r8, #0
 8005246:	f04f 0900 	mov.w	r9, #0
 800524a:	f8ca 3000 	str.w	r3, [sl]
 800524e:	e789      	b.n	8005164 <_strtod_l+0x48c>
 8005250:	08009dd5 	.word	0x08009dd5
 8005254:	08009e18 	.word	0x08009e18
 8005258:	08009dcd 	.word	0x08009dcd
 800525c:	08009f5c 	.word	0x08009f5c
 8005260:	7ff00000 	.word	0x7ff00000
 8005264:	0800a208 	.word	0x0800a208
 8005268:	0800a0e8 	.word	0x0800a0e8
 800526c:	0800a0c0 	.word	0x0800a0c0
 8005270:	7ca00000 	.word	0x7ca00000
 8005274:	7fefffff 	.word	0x7fefffff
 8005278:	f016 0310 	ands.w	r3, r6, #16
 800527c:	bf18      	it	ne
 800527e:	236a      	movne	r3, #106	; 0x6a
 8005280:	4640      	mov	r0, r8
 8005282:	9305      	str	r3, [sp, #20]
 8005284:	4649      	mov	r1, r9
 8005286:	2300      	movs	r3, #0
 8005288:	4fb0      	ldr	r7, [pc, #704]	; (800554c <_strtod_l+0x874>)
 800528a:	07f2      	lsls	r2, r6, #31
 800528c:	d504      	bpl.n	8005298 <_strtod_l+0x5c0>
 800528e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005292:	f7fb f921 	bl	80004d8 <__aeabi_dmul>
 8005296:	2301      	movs	r3, #1
 8005298:	1076      	asrs	r6, r6, #1
 800529a:	f107 0708 	add.w	r7, r7, #8
 800529e:	d1f4      	bne.n	800528a <_strtod_l+0x5b2>
 80052a0:	b10b      	cbz	r3, 80052a6 <_strtod_l+0x5ce>
 80052a2:	4680      	mov	r8, r0
 80052a4:	4689      	mov	r9, r1
 80052a6:	9b05      	ldr	r3, [sp, #20]
 80052a8:	b1c3      	cbz	r3, 80052dc <_strtod_l+0x604>
 80052aa:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80052ae:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	4649      	mov	r1, r9
 80052b6:	dd11      	ble.n	80052dc <_strtod_l+0x604>
 80052b8:	2b1f      	cmp	r3, #31
 80052ba:	f340 8127 	ble.w	800550c <_strtod_l+0x834>
 80052be:	2b34      	cmp	r3, #52	; 0x34
 80052c0:	bfd8      	it	le
 80052c2:	f04f 33ff 	movle.w	r3, #4294967295
 80052c6:	f04f 0800 	mov.w	r8, #0
 80052ca:	bfcf      	iteee	gt
 80052cc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80052d0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80052d4:	fa03 f202 	lslle.w	r2, r3, r2
 80052d8:	ea02 0901 	andle.w	r9, r2, r1
 80052dc:	2200      	movs	r2, #0
 80052de:	2300      	movs	r3, #0
 80052e0:	4640      	mov	r0, r8
 80052e2:	4649      	mov	r1, r9
 80052e4:	f7fb fb60 	bl	80009a8 <__aeabi_dcmpeq>
 80052e8:	2800      	cmp	r0, #0
 80052ea:	d1a1      	bne.n	8005230 <_strtod_l+0x558>
 80052ec:	9b06      	ldr	r3, [sp, #24]
 80052ee:	465a      	mov	r2, fp
 80052f0:	9300      	str	r3, [sp, #0]
 80052f2:	4650      	mov	r0, sl
 80052f4:	4623      	mov	r3, r4
 80052f6:	9908      	ldr	r1, [sp, #32]
 80052f8:	f001 fe0e 	bl	8006f18 <__s2b>
 80052fc:	9008      	str	r0, [sp, #32]
 80052fe:	2800      	cmp	r0, #0
 8005300:	f43f af21 	beq.w	8005146 <_strtod_l+0x46e>
 8005304:	9b04      	ldr	r3, [sp, #16]
 8005306:	f04f 0b00 	mov.w	fp, #0
 800530a:	1b5d      	subs	r5, r3, r5
 800530c:	9b07      	ldr	r3, [sp, #28]
 800530e:	f8cd b010 	str.w	fp, [sp, #16]
 8005312:	2b00      	cmp	r3, #0
 8005314:	bfb4      	ite	lt
 8005316:	462b      	movlt	r3, r5
 8005318:	2300      	movge	r3, #0
 800531a:	930e      	str	r3, [sp, #56]	; 0x38
 800531c:	9b07      	ldr	r3, [sp, #28]
 800531e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005322:	9314      	str	r3, [sp, #80]	; 0x50
 8005324:	9b08      	ldr	r3, [sp, #32]
 8005326:	4650      	mov	r0, sl
 8005328:	6859      	ldr	r1, [r3, #4]
 800532a:	f001 fd4d 	bl	8006dc8 <_Balloc>
 800532e:	9006      	str	r0, [sp, #24]
 8005330:	2800      	cmp	r0, #0
 8005332:	f43f af10 	beq.w	8005156 <_strtod_l+0x47e>
 8005336:	9b08      	ldr	r3, [sp, #32]
 8005338:	300c      	adds	r0, #12
 800533a:	691a      	ldr	r2, [r3, #16]
 800533c:	f103 010c 	add.w	r1, r3, #12
 8005340:	3202      	adds	r2, #2
 8005342:	0092      	lsls	r2, r2, #2
 8005344:	f7fe fde4 	bl	8003f10 <memcpy>
 8005348:	ab1c      	add	r3, sp, #112	; 0x70
 800534a:	9301      	str	r3, [sp, #4]
 800534c:	ab1b      	add	r3, sp, #108	; 0x6c
 800534e:	9300      	str	r3, [sp, #0]
 8005350:	4642      	mov	r2, r8
 8005352:	464b      	mov	r3, r9
 8005354:	4650      	mov	r0, sl
 8005356:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 800535a:	f002 f91f 	bl	800759c <__d2b>
 800535e:	901a      	str	r0, [sp, #104]	; 0x68
 8005360:	2800      	cmp	r0, #0
 8005362:	f43f aef8 	beq.w	8005156 <_strtod_l+0x47e>
 8005366:	2101      	movs	r1, #1
 8005368:	4650      	mov	r0, sl
 800536a:	f001 fe6d 	bl	8007048 <__i2b>
 800536e:	4603      	mov	r3, r0
 8005370:	9004      	str	r0, [sp, #16]
 8005372:	2800      	cmp	r0, #0
 8005374:	f43f aeef 	beq.w	8005156 <_strtod_l+0x47e>
 8005378:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800537a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800537c:	2d00      	cmp	r5, #0
 800537e:	bfab      	itete	ge
 8005380:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8005382:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 8005384:	18ee      	addge	r6, r5, r3
 8005386:	1b5c      	sublt	r4, r3, r5
 8005388:	9b05      	ldr	r3, [sp, #20]
 800538a:	bfa8      	it	ge
 800538c:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 800538e:	eba5 0503 	sub.w	r5, r5, r3
 8005392:	4415      	add	r5, r2
 8005394:	4b6e      	ldr	r3, [pc, #440]	; (8005550 <_strtod_l+0x878>)
 8005396:	f105 35ff 	add.w	r5, r5, #4294967295
 800539a:	bfb8      	it	lt
 800539c:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800539e:	429d      	cmp	r5, r3
 80053a0:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80053a4:	f280 80c4 	bge.w	8005530 <_strtod_l+0x858>
 80053a8:	1b5b      	subs	r3, r3, r5
 80053aa:	2b1f      	cmp	r3, #31
 80053ac:	f04f 0701 	mov.w	r7, #1
 80053b0:	eba2 0203 	sub.w	r2, r2, r3
 80053b4:	f300 80b1 	bgt.w	800551a <_strtod_l+0x842>
 80053b8:	2500      	movs	r5, #0
 80053ba:	fa07 f303 	lsl.w	r3, r7, r3
 80053be:	930f      	str	r3, [sp, #60]	; 0x3c
 80053c0:	18b7      	adds	r7, r6, r2
 80053c2:	9b05      	ldr	r3, [sp, #20]
 80053c4:	42be      	cmp	r6, r7
 80053c6:	4414      	add	r4, r2
 80053c8:	441c      	add	r4, r3
 80053ca:	4633      	mov	r3, r6
 80053cc:	bfa8      	it	ge
 80053ce:	463b      	movge	r3, r7
 80053d0:	42a3      	cmp	r3, r4
 80053d2:	bfa8      	it	ge
 80053d4:	4623      	movge	r3, r4
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	bfc2      	ittt	gt
 80053da:	1aff      	subgt	r7, r7, r3
 80053dc:	1ae4      	subgt	r4, r4, r3
 80053de:	1af6      	subgt	r6, r6, r3
 80053e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	dd17      	ble.n	8005416 <_strtod_l+0x73e>
 80053e6:	461a      	mov	r2, r3
 80053e8:	4650      	mov	r0, sl
 80053ea:	9904      	ldr	r1, [sp, #16]
 80053ec:	f001 feea 	bl	80071c4 <__pow5mult>
 80053f0:	9004      	str	r0, [sp, #16]
 80053f2:	2800      	cmp	r0, #0
 80053f4:	f43f aeaf 	beq.w	8005156 <_strtod_l+0x47e>
 80053f8:	4601      	mov	r1, r0
 80053fa:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80053fc:	4650      	mov	r0, sl
 80053fe:	f001 fe39 	bl	8007074 <__multiply>
 8005402:	9009      	str	r0, [sp, #36]	; 0x24
 8005404:	2800      	cmp	r0, #0
 8005406:	f43f aea6 	beq.w	8005156 <_strtod_l+0x47e>
 800540a:	4650      	mov	r0, sl
 800540c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800540e:	f001 fd1b 	bl	8006e48 <_Bfree>
 8005412:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005414:	931a      	str	r3, [sp, #104]	; 0x68
 8005416:	2f00      	cmp	r7, #0
 8005418:	f300 808e 	bgt.w	8005538 <_strtod_l+0x860>
 800541c:	9b07      	ldr	r3, [sp, #28]
 800541e:	2b00      	cmp	r3, #0
 8005420:	dd08      	ble.n	8005434 <_strtod_l+0x75c>
 8005422:	4650      	mov	r0, sl
 8005424:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005426:	9906      	ldr	r1, [sp, #24]
 8005428:	f001 fecc 	bl	80071c4 <__pow5mult>
 800542c:	9006      	str	r0, [sp, #24]
 800542e:	2800      	cmp	r0, #0
 8005430:	f43f ae91 	beq.w	8005156 <_strtod_l+0x47e>
 8005434:	2c00      	cmp	r4, #0
 8005436:	dd08      	ble.n	800544a <_strtod_l+0x772>
 8005438:	4622      	mov	r2, r4
 800543a:	4650      	mov	r0, sl
 800543c:	9906      	ldr	r1, [sp, #24]
 800543e:	f001 ff1b 	bl	8007278 <__lshift>
 8005442:	9006      	str	r0, [sp, #24]
 8005444:	2800      	cmp	r0, #0
 8005446:	f43f ae86 	beq.w	8005156 <_strtod_l+0x47e>
 800544a:	2e00      	cmp	r6, #0
 800544c:	dd08      	ble.n	8005460 <_strtod_l+0x788>
 800544e:	4632      	mov	r2, r6
 8005450:	4650      	mov	r0, sl
 8005452:	9904      	ldr	r1, [sp, #16]
 8005454:	f001 ff10 	bl	8007278 <__lshift>
 8005458:	9004      	str	r0, [sp, #16]
 800545a:	2800      	cmp	r0, #0
 800545c:	f43f ae7b 	beq.w	8005156 <_strtod_l+0x47e>
 8005460:	4650      	mov	r0, sl
 8005462:	9a06      	ldr	r2, [sp, #24]
 8005464:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005466:	f001 ff93 	bl	8007390 <__mdiff>
 800546a:	4683      	mov	fp, r0
 800546c:	2800      	cmp	r0, #0
 800546e:	f43f ae72 	beq.w	8005156 <_strtod_l+0x47e>
 8005472:	2400      	movs	r4, #0
 8005474:	68c3      	ldr	r3, [r0, #12]
 8005476:	9904      	ldr	r1, [sp, #16]
 8005478:	60c4      	str	r4, [r0, #12]
 800547a:	930b      	str	r3, [sp, #44]	; 0x2c
 800547c:	f001 ff6c 	bl	8007358 <__mcmp>
 8005480:	42a0      	cmp	r0, r4
 8005482:	da6b      	bge.n	800555c <_strtod_l+0x884>
 8005484:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005486:	ea53 0308 	orrs.w	r3, r3, r8
 800548a:	f040 8091 	bne.w	80055b0 <_strtod_l+0x8d8>
 800548e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005492:	2b00      	cmp	r3, #0
 8005494:	f040 808c 	bne.w	80055b0 <_strtod_l+0x8d8>
 8005498:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800549c:	0d1b      	lsrs	r3, r3, #20
 800549e:	051b      	lsls	r3, r3, #20
 80054a0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80054a4:	f240 8084 	bls.w	80055b0 <_strtod_l+0x8d8>
 80054a8:	f8db 3014 	ldr.w	r3, [fp, #20]
 80054ac:	b91b      	cbnz	r3, 80054b6 <_strtod_l+0x7de>
 80054ae:	f8db 3010 	ldr.w	r3, [fp, #16]
 80054b2:	2b01      	cmp	r3, #1
 80054b4:	dd7c      	ble.n	80055b0 <_strtod_l+0x8d8>
 80054b6:	4659      	mov	r1, fp
 80054b8:	2201      	movs	r2, #1
 80054ba:	4650      	mov	r0, sl
 80054bc:	f001 fedc 	bl	8007278 <__lshift>
 80054c0:	9904      	ldr	r1, [sp, #16]
 80054c2:	4683      	mov	fp, r0
 80054c4:	f001 ff48 	bl	8007358 <__mcmp>
 80054c8:	2800      	cmp	r0, #0
 80054ca:	dd71      	ble.n	80055b0 <_strtod_l+0x8d8>
 80054cc:	9905      	ldr	r1, [sp, #20]
 80054ce:	464b      	mov	r3, r9
 80054d0:	4a20      	ldr	r2, [pc, #128]	; (8005554 <_strtod_l+0x87c>)
 80054d2:	2900      	cmp	r1, #0
 80054d4:	f000 808c 	beq.w	80055f0 <_strtod_l+0x918>
 80054d8:	ea02 0109 	and.w	r1, r2, r9
 80054dc:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80054e0:	f300 8086 	bgt.w	80055f0 <_strtod_l+0x918>
 80054e4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80054e8:	f77f aeaa 	ble.w	8005240 <_strtod_l+0x568>
 80054ec:	4640      	mov	r0, r8
 80054ee:	4649      	mov	r1, r9
 80054f0:	4b19      	ldr	r3, [pc, #100]	; (8005558 <_strtod_l+0x880>)
 80054f2:	2200      	movs	r2, #0
 80054f4:	f7fa fff0 	bl	80004d8 <__aeabi_dmul>
 80054f8:	460b      	mov	r3, r1
 80054fa:	4303      	orrs	r3, r0
 80054fc:	bf08      	it	eq
 80054fe:	2322      	moveq	r3, #34	; 0x22
 8005500:	4680      	mov	r8, r0
 8005502:	4689      	mov	r9, r1
 8005504:	bf08      	it	eq
 8005506:	f8ca 3000 	streq.w	r3, [sl]
 800550a:	e62f      	b.n	800516c <_strtod_l+0x494>
 800550c:	f04f 32ff 	mov.w	r2, #4294967295
 8005510:	fa02 f303 	lsl.w	r3, r2, r3
 8005514:	ea03 0808 	and.w	r8, r3, r8
 8005518:	e6e0      	b.n	80052dc <_strtod_l+0x604>
 800551a:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800551e:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8005522:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8005526:	35e2      	adds	r5, #226	; 0xe2
 8005528:	fa07 f505 	lsl.w	r5, r7, r5
 800552c:	970f      	str	r7, [sp, #60]	; 0x3c
 800552e:	e747      	b.n	80053c0 <_strtod_l+0x6e8>
 8005530:	2301      	movs	r3, #1
 8005532:	2500      	movs	r5, #0
 8005534:	930f      	str	r3, [sp, #60]	; 0x3c
 8005536:	e743      	b.n	80053c0 <_strtod_l+0x6e8>
 8005538:	463a      	mov	r2, r7
 800553a:	4650      	mov	r0, sl
 800553c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800553e:	f001 fe9b 	bl	8007278 <__lshift>
 8005542:	901a      	str	r0, [sp, #104]	; 0x68
 8005544:	2800      	cmp	r0, #0
 8005546:	f47f af69 	bne.w	800541c <_strtod_l+0x744>
 800554a:	e604      	b.n	8005156 <_strtod_l+0x47e>
 800554c:	08009e30 	.word	0x08009e30
 8005550:	fffffc02 	.word	0xfffffc02
 8005554:	7ff00000 	.word	0x7ff00000
 8005558:	39500000 	.word	0x39500000
 800555c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8005560:	d165      	bne.n	800562e <_strtod_l+0x956>
 8005562:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005564:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005568:	b35a      	cbz	r2, 80055c2 <_strtod_l+0x8ea>
 800556a:	4a99      	ldr	r2, [pc, #612]	; (80057d0 <_strtod_l+0xaf8>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d12b      	bne.n	80055c8 <_strtod_l+0x8f0>
 8005570:	9b05      	ldr	r3, [sp, #20]
 8005572:	4641      	mov	r1, r8
 8005574:	b303      	cbz	r3, 80055b8 <_strtod_l+0x8e0>
 8005576:	464a      	mov	r2, r9
 8005578:	4b96      	ldr	r3, [pc, #600]	; (80057d4 <_strtod_l+0xafc>)
 800557a:	4013      	ands	r3, r2
 800557c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005580:	f04f 32ff 	mov.w	r2, #4294967295
 8005584:	d81b      	bhi.n	80055be <_strtod_l+0x8e6>
 8005586:	0d1b      	lsrs	r3, r3, #20
 8005588:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800558c:	fa02 f303 	lsl.w	r3, r2, r3
 8005590:	4299      	cmp	r1, r3
 8005592:	d119      	bne.n	80055c8 <_strtod_l+0x8f0>
 8005594:	4b90      	ldr	r3, [pc, #576]	; (80057d8 <_strtod_l+0xb00>)
 8005596:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005598:	429a      	cmp	r2, r3
 800559a:	d102      	bne.n	80055a2 <_strtod_l+0x8ca>
 800559c:	3101      	adds	r1, #1
 800559e:	f43f adda 	beq.w	8005156 <_strtod_l+0x47e>
 80055a2:	f04f 0800 	mov.w	r8, #0
 80055a6:	4b8b      	ldr	r3, [pc, #556]	; (80057d4 <_strtod_l+0xafc>)
 80055a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80055aa:	401a      	ands	r2, r3
 80055ac:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 80055b0:	9b05      	ldr	r3, [sp, #20]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d19a      	bne.n	80054ec <_strtod_l+0x814>
 80055b6:	e5d9      	b.n	800516c <_strtod_l+0x494>
 80055b8:	f04f 33ff 	mov.w	r3, #4294967295
 80055bc:	e7e8      	b.n	8005590 <_strtod_l+0x8b8>
 80055be:	4613      	mov	r3, r2
 80055c0:	e7e6      	b.n	8005590 <_strtod_l+0x8b8>
 80055c2:	ea53 0308 	orrs.w	r3, r3, r8
 80055c6:	d081      	beq.n	80054cc <_strtod_l+0x7f4>
 80055c8:	b1e5      	cbz	r5, 8005604 <_strtod_l+0x92c>
 80055ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055cc:	421d      	tst	r5, r3
 80055ce:	d0ef      	beq.n	80055b0 <_strtod_l+0x8d8>
 80055d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80055d2:	4640      	mov	r0, r8
 80055d4:	4649      	mov	r1, r9
 80055d6:	9a05      	ldr	r2, [sp, #20]
 80055d8:	b1c3      	cbz	r3, 800560c <_strtod_l+0x934>
 80055da:	f7ff fb5b 	bl	8004c94 <sulp>
 80055de:	4602      	mov	r2, r0
 80055e0:	460b      	mov	r3, r1
 80055e2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80055e6:	f7fa fdc1 	bl	800016c <__adddf3>
 80055ea:	4680      	mov	r8, r0
 80055ec:	4689      	mov	r9, r1
 80055ee:	e7df      	b.n	80055b0 <_strtod_l+0x8d8>
 80055f0:	4013      	ands	r3, r2
 80055f2:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80055f6:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80055fa:	f04f 38ff 	mov.w	r8, #4294967295
 80055fe:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8005602:	e7d5      	b.n	80055b0 <_strtod_l+0x8d8>
 8005604:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005606:	ea13 0f08 	tst.w	r3, r8
 800560a:	e7e0      	b.n	80055ce <_strtod_l+0x8f6>
 800560c:	f7ff fb42 	bl	8004c94 <sulp>
 8005610:	4602      	mov	r2, r0
 8005612:	460b      	mov	r3, r1
 8005614:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005618:	f7fa fda6 	bl	8000168 <__aeabi_dsub>
 800561c:	2200      	movs	r2, #0
 800561e:	2300      	movs	r3, #0
 8005620:	4680      	mov	r8, r0
 8005622:	4689      	mov	r9, r1
 8005624:	f7fb f9c0 	bl	80009a8 <__aeabi_dcmpeq>
 8005628:	2800      	cmp	r0, #0
 800562a:	d0c1      	beq.n	80055b0 <_strtod_l+0x8d8>
 800562c:	e608      	b.n	8005240 <_strtod_l+0x568>
 800562e:	4658      	mov	r0, fp
 8005630:	9904      	ldr	r1, [sp, #16]
 8005632:	f002 f80f 	bl	8007654 <__ratio>
 8005636:	2200      	movs	r2, #0
 8005638:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800563c:	4606      	mov	r6, r0
 800563e:	460f      	mov	r7, r1
 8005640:	f7fb f9c6 	bl	80009d0 <__aeabi_dcmple>
 8005644:	2800      	cmp	r0, #0
 8005646:	d070      	beq.n	800572a <_strtod_l+0xa52>
 8005648:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800564a:	2b00      	cmp	r3, #0
 800564c:	d042      	beq.n	80056d4 <_strtod_l+0x9fc>
 800564e:	2600      	movs	r6, #0
 8005650:	4f62      	ldr	r7, [pc, #392]	; (80057dc <_strtod_l+0xb04>)
 8005652:	4d62      	ldr	r5, [pc, #392]	; (80057dc <_strtod_l+0xb04>)
 8005654:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005656:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800565a:	0d1b      	lsrs	r3, r3, #20
 800565c:	051b      	lsls	r3, r3, #20
 800565e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005660:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005662:	4b5f      	ldr	r3, [pc, #380]	; (80057e0 <_strtod_l+0xb08>)
 8005664:	429a      	cmp	r2, r3
 8005666:	f040 80c3 	bne.w	80057f0 <_strtod_l+0xb18>
 800566a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800566c:	4640      	mov	r0, r8
 800566e:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8005672:	4649      	mov	r1, r9
 8005674:	f001 ff18 	bl	80074a8 <__ulp>
 8005678:	4602      	mov	r2, r0
 800567a:	460b      	mov	r3, r1
 800567c:	4630      	mov	r0, r6
 800567e:	4639      	mov	r1, r7
 8005680:	f7fa ff2a 	bl	80004d8 <__aeabi_dmul>
 8005684:	4642      	mov	r2, r8
 8005686:	464b      	mov	r3, r9
 8005688:	f7fa fd70 	bl	800016c <__adddf3>
 800568c:	460b      	mov	r3, r1
 800568e:	4951      	ldr	r1, [pc, #324]	; (80057d4 <_strtod_l+0xafc>)
 8005690:	4a54      	ldr	r2, [pc, #336]	; (80057e4 <_strtod_l+0xb0c>)
 8005692:	4019      	ands	r1, r3
 8005694:	4291      	cmp	r1, r2
 8005696:	4680      	mov	r8, r0
 8005698:	d95d      	bls.n	8005756 <_strtod_l+0xa7e>
 800569a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800569c:	4b4e      	ldr	r3, [pc, #312]	; (80057d8 <_strtod_l+0xb00>)
 800569e:	429a      	cmp	r2, r3
 80056a0:	d103      	bne.n	80056aa <_strtod_l+0x9d2>
 80056a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80056a4:	3301      	adds	r3, #1
 80056a6:	f43f ad56 	beq.w	8005156 <_strtod_l+0x47e>
 80056aa:	f04f 38ff 	mov.w	r8, #4294967295
 80056ae:	f8df 9128 	ldr.w	r9, [pc, #296]	; 80057d8 <_strtod_l+0xb00>
 80056b2:	4650      	mov	r0, sl
 80056b4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80056b6:	f001 fbc7 	bl	8006e48 <_Bfree>
 80056ba:	4650      	mov	r0, sl
 80056bc:	9906      	ldr	r1, [sp, #24]
 80056be:	f001 fbc3 	bl	8006e48 <_Bfree>
 80056c2:	4650      	mov	r0, sl
 80056c4:	9904      	ldr	r1, [sp, #16]
 80056c6:	f001 fbbf 	bl	8006e48 <_Bfree>
 80056ca:	4659      	mov	r1, fp
 80056cc:	4650      	mov	r0, sl
 80056ce:	f001 fbbb 	bl	8006e48 <_Bfree>
 80056d2:	e627      	b.n	8005324 <_strtod_l+0x64c>
 80056d4:	f1b8 0f00 	cmp.w	r8, #0
 80056d8:	d119      	bne.n	800570e <_strtod_l+0xa36>
 80056da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80056e0:	b9e3      	cbnz	r3, 800571c <_strtod_l+0xa44>
 80056e2:	2200      	movs	r2, #0
 80056e4:	4630      	mov	r0, r6
 80056e6:	4639      	mov	r1, r7
 80056e8:	4b3c      	ldr	r3, [pc, #240]	; (80057dc <_strtod_l+0xb04>)
 80056ea:	f7fb f967 	bl	80009bc <__aeabi_dcmplt>
 80056ee:	b9c8      	cbnz	r0, 8005724 <_strtod_l+0xa4c>
 80056f0:	2200      	movs	r2, #0
 80056f2:	4630      	mov	r0, r6
 80056f4:	4639      	mov	r1, r7
 80056f6:	4b3c      	ldr	r3, [pc, #240]	; (80057e8 <_strtod_l+0xb10>)
 80056f8:	f7fa feee 	bl	80004d8 <__aeabi_dmul>
 80056fc:	4604      	mov	r4, r0
 80056fe:	460d      	mov	r5, r1
 8005700:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8005704:	9416      	str	r4, [sp, #88]	; 0x58
 8005706:	9317      	str	r3, [sp, #92]	; 0x5c
 8005708:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 800570c:	e7a2      	b.n	8005654 <_strtod_l+0x97c>
 800570e:	f1b8 0f01 	cmp.w	r8, #1
 8005712:	d103      	bne.n	800571c <_strtod_l+0xa44>
 8005714:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005716:	2b00      	cmp	r3, #0
 8005718:	f43f ad92 	beq.w	8005240 <_strtod_l+0x568>
 800571c:	2600      	movs	r6, #0
 800571e:	2400      	movs	r4, #0
 8005720:	4f32      	ldr	r7, [pc, #200]	; (80057ec <_strtod_l+0xb14>)
 8005722:	e796      	b.n	8005652 <_strtod_l+0x97a>
 8005724:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8005726:	4d30      	ldr	r5, [pc, #192]	; (80057e8 <_strtod_l+0xb10>)
 8005728:	e7ea      	b.n	8005700 <_strtod_l+0xa28>
 800572a:	4b2f      	ldr	r3, [pc, #188]	; (80057e8 <_strtod_l+0xb10>)
 800572c:	2200      	movs	r2, #0
 800572e:	4630      	mov	r0, r6
 8005730:	4639      	mov	r1, r7
 8005732:	f7fa fed1 	bl	80004d8 <__aeabi_dmul>
 8005736:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005738:	4604      	mov	r4, r0
 800573a:	460d      	mov	r5, r1
 800573c:	b933      	cbnz	r3, 800574c <_strtod_l+0xa74>
 800573e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005742:	9010      	str	r0, [sp, #64]	; 0x40
 8005744:	9311      	str	r3, [sp, #68]	; 0x44
 8005746:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800574a:	e783      	b.n	8005654 <_strtod_l+0x97c>
 800574c:	4602      	mov	r2, r0
 800574e:	460b      	mov	r3, r1
 8005750:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8005754:	e7f7      	b.n	8005746 <_strtod_l+0xa6e>
 8005756:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800575a:	9b05      	ldr	r3, [sp, #20]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d1a8      	bne.n	80056b2 <_strtod_l+0x9da>
 8005760:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005764:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005766:	0d1b      	lsrs	r3, r3, #20
 8005768:	051b      	lsls	r3, r3, #20
 800576a:	429a      	cmp	r2, r3
 800576c:	d1a1      	bne.n	80056b2 <_strtod_l+0x9da>
 800576e:	4620      	mov	r0, r4
 8005770:	4629      	mov	r1, r5
 8005772:	f7fb f9f9 	bl	8000b68 <__aeabi_d2lz>
 8005776:	f7fa fe81 	bl	800047c <__aeabi_l2d>
 800577a:	4602      	mov	r2, r0
 800577c:	460b      	mov	r3, r1
 800577e:	4620      	mov	r0, r4
 8005780:	4629      	mov	r1, r5
 8005782:	f7fa fcf1 	bl	8000168 <__aeabi_dsub>
 8005786:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005788:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800578c:	ea43 0308 	orr.w	r3, r3, r8
 8005790:	4313      	orrs	r3, r2
 8005792:	4604      	mov	r4, r0
 8005794:	460d      	mov	r5, r1
 8005796:	d066      	beq.n	8005866 <_strtod_l+0xb8e>
 8005798:	a309      	add	r3, pc, #36	; (adr r3, 80057c0 <_strtod_l+0xae8>)
 800579a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800579e:	f7fb f90d 	bl	80009bc <__aeabi_dcmplt>
 80057a2:	2800      	cmp	r0, #0
 80057a4:	f47f ace2 	bne.w	800516c <_strtod_l+0x494>
 80057a8:	a307      	add	r3, pc, #28	; (adr r3, 80057c8 <_strtod_l+0xaf0>)
 80057aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ae:	4620      	mov	r0, r4
 80057b0:	4629      	mov	r1, r5
 80057b2:	f7fb f921 	bl	80009f8 <__aeabi_dcmpgt>
 80057b6:	2800      	cmp	r0, #0
 80057b8:	f43f af7b 	beq.w	80056b2 <_strtod_l+0x9da>
 80057bc:	e4d6      	b.n	800516c <_strtod_l+0x494>
 80057be:	bf00      	nop
 80057c0:	94a03595 	.word	0x94a03595
 80057c4:	3fdfffff 	.word	0x3fdfffff
 80057c8:	35afe535 	.word	0x35afe535
 80057cc:	3fe00000 	.word	0x3fe00000
 80057d0:	000fffff 	.word	0x000fffff
 80057d4:	7ff00000 	.word	0x7ff00000
 80057d8:	7fefffff 	.word	0x7fefffff
 80057dc:	3ff00000 	.word	0x3ff00000
 80057e0:	7fe00000 	.word	0x7fe00000
 80057e4:	7c9fffff 	.word	0x7c9fffff
 80057e8:	3fe00000 	.word	0x3fe00000
 80057ec:	bff00000 	.word	0xbff00000
 80057f0:	9b05      	ldr	r3, [sp, #20]
 80057f2:	b313      	cbz	r3, 800583a <_strtod_l+0xb62>
 80057f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80057f6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80057fa:	d81e      	bhi.n	800583a <_strtod_l+0xb62>
 80057fc:	a326      	add	r3, pc, #152	; (adr r3, 8005898 <_strtod_l+0xbc0>)
 80057fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005802:	4620      	mov	r0, r4
 8005804:	4629      	mov	r1, r5
 8005806:	f7fb f8e3 	bl	80009d0 <__aeabi_dcmple>
 800580a:	b190      	cbz	r0, 8005832 <_strtod_l+0xb5a>
 800580c:	4629      	mov	r1, r5
 800580e:	4620      	mov	r0, r4
 8005810:	f7fb f93a 	bl	8000a88 <__aeabi_d2uiz>
 8005814:	2801      	cmp	r0, #1
 8005816:	bf38      	it	cc
 8005818:	2001      	movcc	r0, #1
 800581a:	f7fa fde3 	bl	80003e4 <__aeabi_ui2d>
 800581e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005820:	4604      	mov	r4, r0
 8005822:	460d      	mov	r5, r1
 8005824:	b9d3      	cbnz	r3, 800585c <_strtod_l+0xb84>
 8005826:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800582a:	9012      	str	r0, [sp, #72]	; 0x48
 800582c:	9313      	str	r3, [sp, #76]	; 0x4c
 800582e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8005832:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005834:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8005838:	1a9f      	subs	r7, r3, r2
 800583a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800583e:	f001 fe33 	bl	80074a8 <__ulp>
 8005842:	4602      	mov	r2, r0
 8005844:	460b      	mov	r3, r1
 8005846:	4630      	mov	r0, r6
 8005848:	4639      	mov	r1, r7
 800584a:	f7fa fe45 	bl	80004d8 <__aeabi_dmul>
 800584e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005852:	f7fa fc8b 	bl	800016c <__adddf3>
 8005856:	4680      	mov	r8, r0
 8005858:	4689      	mov	r9, r1
 800585a:	e77e      	b.n	800575a <_strtod_l+0xa82>
 800585c:	4602      	mov	r2, r0
 800585e:	460b      	mov	r3, r1
 8005860:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8005864:	e7e3      	b.n	800582e <_strtod_l+0xb56>
 8005866:	a30e      	add	r3, pc, #56	; (adr r3, 80058a0 <_strtod_l+0xbc8>)
 8005868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800586c:	f7fb f8a6 	bl	80009bc <__aeabi_dcmplt>
 8005870:	e7a1      	b.n	80057b6 <_strtod_l+0xade>
 8005872:	2300      	movs	r3, #0
 8005874:	930a      	str	r3, [sp, #40]	; 0x28
 8005876:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005878:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800587a:	6013      	str	r3, [r2, #0]
 800587c:	f7ff ba71 	b.w	8004d62 <_strtod_l+0x8a>
 8005880:	2a65      	cmp	r2, #101	; 0x65
 8005882:	f43f ab63 	beq.w	8004f4c <_strtod_l+0x274>
 8005886:	2a45      	cmp	r2, #69	; 0x45
 8005888:	f43f ab60 	beq.w	8004f4c <_strtod_l+0x274>
 800588c:	2301      	movs	r3, #1
 800588e:	f7ff bb95 	b.w	8004fbc <_strtod_l+0x2e4>
 8005892:	bf00      	nop
 8005894:	f3af 8000 	nop.w
 8005898:	ffc00000 	.word	0xffc00000
 800589c:	41dfffff 	.word	0x41dfffff
 80058a0:	94a03595 	.word	0x94a03595
 80058a4:	3fcfffff 	.word	0x3fcfffff

080058a8 <_strtod_r>:
 80058a8:	4b01      	ldr	r3, [pc, #4]	; (80058b0 <_strtod_r+0x8>)
 80058aa:	f7ff ba15 	b.w	8004cd8 <_strtod_l>
 80058ae:	bf00      	nop
 80058b0:	20000084 	.word	0x20000084

080058b4 <_strtol_l.constprop.0>:
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058ba:	4680      	mov	r8, r0
 80058bc:	d001      	beq.n	80058c2 <_strtol_l.constprop.0+0xe>
 80058be:	2b24      	cmp	r3, #36	; 0x24
 80058c0:	d906      	bls.n	80058d0 <_strtol_l.constprop.0+0x1c>
 80058c2:	f7fe fafb 	bl	8003ebc <__errno>
 80058c6:	2316      	movs	r3, #22
 80058c8:	6003      	str	r3, [r0, #0]
 80058ca:	2000      	movs	r0, #0
 80058cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058d0:	460d      	mov	r5, r1
 80058d2:	4f35      	ldr	r7, [pc, #212]	; (80059a8 <_strtol_l.constprop.0+0xf4>)
 80058d4:	4628      	mov	r0, r5
 80058d6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80058da:	5de6      	ldrb	r6, [r4, r7]
 80058dc:	f016 0608 	ands.w	r6, r6, #8
 80058e0:	d1f8      	bne.n	80058d4 <_strtol_l.constprop.0+0x20>
 80058e2:	2c2d      	cmp	r4, #45	; 0x2d
 80058e4:	d12f      	bne.n	8005946 <_strtol_l.constprop.0+0x92>
 80058e6:	2601      	movs	r6, #1
 80058e8:	782c      	ldrb	r4, [r5, #0]
 80058ea:	1c85      	adds	r5, r0, #2
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d057      	beq.n	80059a0 <_strtol_l.constprop.0+0xec>
 80058f0:	2b10      	cmp	r3, #16
 80058f2:	d109      	bne.n	8005908 <_strtol_l.constprop.0+0x54>
 80058f4:	2c30      	cmp	r4, #48	; 0x30
 80058f6:	d107      	bne.n	8005908 <_strtol_l.constprop.0+0x54>
 80058f8:	7828      	ldrb	r0, [r5, #0]
 80058fa:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80058fe:	2858      	cmp	r0, #88	; 0x58
 8005900:	d149      	bne.n	8005996 <_strtol_l.constprop.0+0xe2>
 8005902:	2310      	movs	r3, #16
 8005904:	786c      	ldrb	r4, [r5, #1]
 8005906:	3502      	adds	r5, #2
 8005908:	2700      	movs	r7, #0
 800590a:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800590e:	f10e 3eff 	add.w	lr, lr, #4294967295
 8005912:	fbbe f9f3 	udiv	r9, lr, r3
 8005916:	4638      	mov	r0, r7
 8005918:	fb03 ea19 	mls	sl, r3, r9, lr
 800591c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8005920:	f1bc 0f09 	cmp.w	ip, #9
 8005924:	d814      	bhi.n	8005950 <_strtol_l.constprop.0+0x9c>
 8005926:	4664      	mov	r4, ip
 8005928:	42a3      	cmp	r3, r4
 800592a:	dd22      	ble.n	8005972 <_strtol_l.constprop.0+0xbe>
 800592c:	2f00      	cmp	r7, #0
 800592e:	db1d      	blt.n	800596c <_strtol_l.constprop.0+0xb8>
 8005930:	4581      	cmp	r9, r0
 8005932:	d31b      	bcc.n	800596c <_strtol_l.constprop.0+0xb8>
 8005934:	d101      	bne.n	800593a <_strtol_l.constprop.0+0x86>
 8005936:	45a2      	cmp	sl, r4
 8005938:	db18      	blt.n	800596c <_strtol_l.constprop.0+0xb8>
 800593a:	2701      	movs	r7, #1
 800593c:	fb00 4003 	mla	r0, r0, r3, r4
 8005940:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005944:	e7ea      	b.n	800591c <_strtol_l.constprop.0+0x68>
 8005946:	2c2b      	cmp	r4, #43	; 0x2b
 8005948:	bf04      	itt	eq
 800594a:	782c      	ldrbeq	r4, [r5, #0]
 800594c:	1c85      	addeq	r5, r0, #2
 800594e:	e7cd      	b.n	80058ec <_strtol_l.constprop.0+0x38>
 8005950:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8005954:	f1bc 0f19 	cmp.w	ip, #25
 8005958:	d801      	bhi.n	800595e <_strtol_l.constprop.0+0xaa>
 800595a:	3c37      	subs	r4, #55	; 0x37
 800595c:	e7e4      	b.n	8005928 <_strtol_l.constprop.0+0x74>
 800595e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8005962:	f1bc 0f19 	cmp.w	ip, #25
 8005966:	d804      	bhi.n	8005972 <_strtol_l.constprop.0+0xbe>
 8005968:	3c57      	subs	r4, #87	; 0x57
 800596a:	e7dd      	b.n	8005928 <_strtol_l.constprop.0+0x74>
 800596c:	f04f 37ff 	mov.w	r7, #4294967295
 8005970:	e7e6      	b.n	8005940 <_strtol_l.constprop.0+0x8c>
 8005972:	2f00      	cmp	r7, #0
 8005974:	da07      	bge.n	8005986 <_strtol_l.constprop.0+0xd2>
 8005976:	2322      	movs	r3, #34	; 0x22
 8005978:	4670      	mov	r0, lr
 800597a:	f8c8 3000 	str.w	r3, [r8]
 800597e:	2a00      	cmp	r2, #0
 8005980:	d0a4      	beq.n	80058cc <_strtol_l.constprop.0+0x18>
 8005982:	1e69      	subs	r1, r5, #1
 8005984:	e005      	b.n	8005992 <_strtol_l.constprop.0+0xde>
 8005986:	b106      	cbz	r6, 800598a <_strtol_l.constprop.0+0xd6>
 8005988:	4240      	negs	r0, r0
 800598a:	2a00      	cmp	r2, #0
 800598c:	d09e      	beq.n	80058cc <_strtol_l.constprop.0+0x18>
 800598e:	2f00      	cmp	r7, #0
 8005990:	d1f7      	bne.n	8005982 <_strtol_l.constprop.0+0xce>
 8005992:	6011      	str	r1, [r2, #0]
 8005994:	e79a      	b.n	80058cc <_strtol_l.constprop.0+0x18>
 8005996:	2430      	movs	r4, #48	; 0x30
 8005998:	2b00      	cmp	r3, #0
 800599a:	d1b5      	bne.n	8005908 <_strtol_l.constprop.0+0x54>
 800599c:	2308      	movs	r3, #8
 800599e:	e7b3      	b.n	8005908 <_strtol_l.constprop.0+0x54>
 80059a0:	2c30      	cmp	r4, #48	; 0x30
 80059a2:	d0a9      	beq.n	80058f8 <_strtol_l.constprop.0+0x44>
 80059a4:	230a      	movs	r3, #10
 80059a6:	e7af      	b.n	8005908 <_strtol_l.constprop.0+0x54>
 80059a8:	08009e59 	.word	0x08009e59

080059ac <_strtol_r>:
 80059ac:	f7ff bf82 	b.w	80058b4 <_strtol_l.constprop.0>

080059b0 <quorem>:
 80059b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059b4:	6903      	ldr	r3, [r0, #16]
 80059b6:	690c      	ldr	r4, [r1, #16]
 80059b8:	4607      	mov	r7, r0
 80059ba:	42a3      	cmp	r3, r4
 80059bc:	f2c0 8082 	blt.w	8005ac4 <quorem+0x114>
 80059c0:	3c01      	subs	r4, #1
 80059c2:	f100 0514 	add.w	r5, r0, #20
 80059c6:	f101 0814 	add.w	r8, r1, #20
 80059ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80059ce:	9301      	str	r3, [sp, #4]
 80059d0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80059d4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80059d8:	3301      	adds	r3, #1
 80059da:	429a      	cmp	r2, r3
 80059dc:	fbb2 f6f3 	udiv	r6, r2, r3
 80059e0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80059e4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80059e8:	d331      	bcc.n	8005a4e <quorem+0x9e>
 80059ea:	f04f 0e00 	mov.w	lr, #0
 80059ee:	4640      	mov	r0, r8
 80059f0:	46ac      	mov	ip, r5
 80059f2:	46f2      	mov	sl, lr
 80059f4:	f850 2b04 	ldr.w	r2, [r0], #4
 80059f8:	b293      	uxth	r3, r2
 80059fa:	fb06 e303 	mla	r3, r6, r3, lr
 80059fe:	0c12      	lsrs	r2, r2, #16
 8005a00:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005a04:	b29b      	uxth	r3, r3
 8005a06:	fb06 e202 	mla	r2, r6, r2, lr
 8005a0a:	ebaa 0303 	sub.w	r3, sl, r3
 8005a0e:	f8dc a000 	ldr.w	sl, [ip]
 8005a12:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005a16:	fa1f fa8a 	uxth.w	sl, sl
 8005a1a:	4453      	add	r3, sl
 8005a1c:	f8dc a000 	ldr.w	sl, [ip]
 8005a20:	b292      	uxth	r2, r2
 8005a22:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005a26:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005a2a:	b29b      	uxth	r3, r3
 8005a2c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005a30:	4581      	cmp	r9, r0
 8005a32:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005a36:	f84c 3b04 	str.w	r3, [ip], #4
 8005a3a:	d2db      	bcs.n	80059f4 <quorem+0x44>
 8005a3c:	f855 300b 	ldr.w	r3, [r5, fp]
 8005a40:	b92b      	cbnz	r3, 8005a4e <quorem+0x9e>
 8005a42:	9b01      	ldr	r3, [sp, #4]
 8005a44:	3b04      	subs	r3, #4
 8005a46:	429d      	cmp	r5, r3
 8005a48:	461a      	mov	r2, r3
 8005a4a:	d32f      	bcc.n	8005aac <quorem+0xfc>
 8005a4c:	613c      	str	r4, [r7, #16]
 8005a4e:	4638      	mov	r0, r7
 8005a50:	f001 fc82 	bl	8007358 <__mcmp>
 8005a54:	2800      	cmp	r0, #0
 8005a56:	db25      	blt.n	8005aa4 <quorem+0xf4>
 8005a58:	4628      	mov	r0, r5
 8005a5a:	f04f 0c00 	mov.w	ip, #0
 8005a5e:	3601      	adds	r6, #1
 8005a60:	f858 1b04 	ldr.w	r1, [r8], #4
 8005a64:	f8d0 e000 	ldr.w	lr, [r0]
 8005a68:	b28b      	uxth	r3, r1
 8005a6a:	ebac 0303 	sub.w	r3, ip, r3
 8005a6e:	fa1f f28e 	uxth.w	r2, lr
 8005a72:	4413      	add	r3, r2
 8005a74:	0c0a      	lsrs	r2, r1, #16
 8005a76:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005a7a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005a7e:	b29b      	uxth	r3, r3
 8005a80:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005a84:	45c1      	cmp	r9, r8
 8005a86:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005a8a:	f840 3b04 	str.w	r3, [r0], #4
 8005a8e:	d2e7      	bcs.n	8005a60 <quorem+0xb0>
 8005a90:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005a94:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005a98:	b922      	cbnz	r2, 8005aa4 <quorem+0xf4>
 8005a9a:	3b04      	subs	r3, #4
 8005a9c:	429d      	cmp	r5, r3
 8005a9e:	461a      	mov	r2, r3
 8005aa0:	d30a      	bcc.n	8005ab8 <quorem+0x108>
 8005aa2:	613c      	str	r4, [r7, #16]
 8005aa4:	4630      	mov	r0, r6
 8005aa6:	b003      	add	sp, #12
 8005aa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005aac:	6812      	ldr	r2, [r2, #0]
 8005aae:	3b04      	subs	r3, #4
 8005ab0:	2a00      	cmp	r2, #0
 8005ab2:	d1cb      	bne.n	8005a4c <quorem+0x9c>
 8005ab4:	3c01      	subs	r4, #1
 8005ab6:	e7c6      	b.n	8005a46 <quorem+0x96>
 8005ab8:	6812      	ldr	r2, [r2, #0]
 8005aba:	3b04      	subs	r3, #4
 8005abc:	2a00      	cmp	r2, #0
 8005abe:	d1f0      	bne.n	8005aa2 <quorem+0xf2>
 8005ac0:	3c01      	subs	r4, #1
 8005ac2:	e7eb      	b.n	8005a9c <quorem+0xec>
 8005ac4:	2000      	movs	r0, #0
 8005ac6:	e7ee      	b.n	8005aa6 <quorem+0xf6>

08005ac8 <_dtoa_r>:
 8005ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005acc:	4616      	mov	r6, r2
 8005ace:	461f      	mov	r7, r3
 8005ad0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005ad2:	b099      	sub	sp, #100	; 0x64
 8005ad4:	4605      	mov	r5, r0
 8005ad6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005ada:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8005ade:	b974      	cbnz	r4, 8005afe <_dtoa_r+0x36>
 8005ae0:	2010      	movs	r0, #16
 8005ae2:	f001 f949 	bl	8006d78 <malloc>
 8005ae6:	4602      	mov	r2, r0
 8005ae8:	6268      	str	r0, [r5, #36]	; 0x24
 8005aea:	b920      	cbnz	r0, 8005af6 <_dtoa_r+0x2e>
 8005aec:	21ea      	movs	r1, #234	; 0xea
 8005aee:	4ba8      	ldr	r3, [pc, #672]	; (8005d90 <_dtoa_r+0x2c8>)
 8005af0:	48a8      	ldr	r0, [pc, #672]	; (8005d94 <_dtoa_r+0x2cc>)
 8005af2:	f002 f8a5 	bl	8007c40 <__assert_func>
 8005af6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005afa:	6004      	str	r4, [r0, #0]
 8005afc:	60c4      	str	r4, [r0, #12]
 8005afe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005b00:	6819      	ldr	r1, [r3, #0]
 8005b02:	b151      	cbz	r1, 8005b1a <_dtoa_r+0x52>
 8005b04:	685a      	ldr	r2, [r3, #4]
 8005b06:	2301      	movs	r3, #1
 8005b08:	4093      	lsls	r3, r2
 8005b0a:	604a      	str	r2, [r1, #4]
 8005b0c:	608b      	str	r3, [r1, #8]
 8005b0e:	4628      	mov	r0, r5
 8005b10:	f001 f99a 	bl	8006e48 <_Bfree>
 8005b14:	2200      	movs	r2, #0
 8005b16:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005b18:	601a      	str	r2, [r3, #0]
 8005b1a:	1e3b      	subs	r3, r7, #0
 8005b1c:	bfaf      	iteee	ge
 8005b1e:	2300      	movge	r3, #0
 8005b20:	2201      	movlt	r2, #1
 8005b22:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005b26:	9305      	strlt	r3, [sp, #20]
 8005b28:	bfa8      	it	ge
 8005b2a:	f8c8 3000 	strge.w	r3, [r8]
 8005b2e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8005b32:	4b99      	ldr	r3, [pc, #612]	; (8005d98 <_dtoa_r+0x2d0>)
 8005b34:	bfb8      	it	lt
 8005b36:	f8c8 2000 	strlt.w	r2, [r8]
 8005b3a:	ea33 0309 	bics.w	r3, r3, r9
 8005b3e:	d119      	bne.n	8005b74 <_dtoa_r+0xac>
 8005b40:	f242 730f 	movw	r3, #9999	; 0x270f
 8005b44:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005b46:	6013      	str	r3, [r2, #0]
 8005b48:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005b4c:	4333      	orrs	r3, r6
 8005b4e:	f000 857f 	beq.w	8006650 <_dtoa_r+0xb88>
 8005b52:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005b54:	b953      	cbnz	r3, 8005b6c <_dtoa_r+0xa4>
 8005b56:	4b91      	ldr	r3, [pc, #580]	; (8005d9c <_dtoa_r+0x2d4>)
 8005b58:	e022      	b.n	8005ba0 <_dtoa_r+0xd8>
 8005b5a:	4b91      	ldr	r3, [pc, #580]	; (8005da0 <_dtoa_r+0x2d8>)
 8005b5c:	9303      	str	r3, [sp, #12]
 8005b5e:	3308      	adds	r3, #8
 8005b60:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005b62:	6013      	str	r3, [r2, #0]
 8005b64:	9803      	ldr	r0, [sp, #12]
 8005b66:	b019      	add	sp, #100	; 0x64
 8005b68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b6c:	4b8b      	ldr	r3, [pc, #556]	; (8005d9c <_dtoa_r+0x2d4>)
 8005b6e:	9303      	str	r3, [sp, #12]
 8005b70:	3303      	adds	r3, #3
 8005b72:	e7f5      	b.n	8005b60 <_dtoa_r+0x98>
 8005b74:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005b78:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8005b7c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005b80:	2200      	movs	r2, #0
 8005b82:	2300      	movs	r3, #0
 8005b84:	f7fa ff10 	bl	80009a8 <__aeabi_dcmpeq>
 8005b88:	4680      	mov	r8, r0
 8005b8a:	b158      	cbz	r0, 8005ba4 <_dtoa_r+0xdc>
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005b90:	6013      	str	r3, [r2, #0]
 8005b92:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	f000 8558 	beq.w	800664a <_dtoa_r+0xb82>
 8005b9a:	4882      	ldr	r0, [pc, #520]	; (8005da4 <_dtoa_r+0x2dc>)
 8005b9c:	6018      	str	r0, [r3, #0]
 8005b9e:	1e43      	subs	r3, r0, #1
 8005ba0:	9303      	str	r3, [sp, #12]
 8005ba2:	e7df      	b.n	8005b64 <_dtoa_r+0x9c>
 8005ba4:	ab16      	add	r3, sp, #88	; 0x58
 8005ba6:	9301      	str	r3, [sp, #4]
 8005ba8:	ab17      	add	r3, sp, #92	; 0x5c
 8005baa:	9300      	str	r3, [sp, #0]
 8005bac:	4628      	mov	r0, r5
 8005bae:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005bb2:	f001 fcf3 	bl	800759c <__d2b>
 8005bb6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005bba:	4683      	mov	fp, r0
 8005bbc:	2c00      	cmp	r4, #0
 8005bbe:	d07f      	beq.n	8005cc0 <_dtoa_r+0x1f8>
 8005bc0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005bc4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005bc6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8005bca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005bce:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8005bd2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8005bd6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8005bda:	2200      	movs	r2, #0
 8005bdc:	4b72      	ldr	r3, [pc, #456]	; (8005da8 <_dtoa_r+0x2e0>)
 8005bde:	f7fa fac3 	bl	8000168 <__aeabi_dsub>
 8005be2:	a365      	add	r3, pc, #404	; (adr r3, 8005d78 <_dtoa_r+0x2b0>)
 8005be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005be8:	f7fa fc76 	bl	80004d8 <__aeabi_dmul>
 8005bec:	a364      	add	r3, pc, #400	; (adr r3, 8005d80 <_dtoa_r+0x2b8>)
 8005bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bf2:	f7fa fabb 	bl	800016c <__adddf3>
 8005bf6:	4606      	mov	r6, r0
 8005bf8:	4620      	mov	r0, r4
 8005bfa:	460f      	mov	r7, r1
 8005bfc:	f7fa fc02 	bl	8000404 <__aeabi_i2d>
 8005c00:	a361      	add	r3, pc, #388	; (adr r3, 8005d88 <_dtoa_r+0x2c0>)
 8005c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c06:	f7fa fc67 	bl	80004d8 <__aeabi_dmul>
 8005c0a:	4602      	mov	r2, r0
 8005c0c:	460b      	mov	r3, r1
 8005c0e:	4630      	mov	r0, r6
 8005c10:	4639      	mov	r1, r7
 8005c12:	f7fa faab 	bl	800016c <__adddf3>
 8005c16:	4606      	mov	r6, r0
 8005c18:	460f      	mov	r7, r1
 8005c1a:	f7fa ff0d 	bl	8000a38 <__aeabi_d2iz>
 8005c1e:	2200      	movs	r2, #0
 8005c20:	4682      	mov	sl, r0
 8005c22:	2300      	movs	r3, #0
 8005c24:	4630      	mov	r0, r6
 8005c26:	4639      	mov	r1, r7
 8005c28:	f7fa fec8 	bl	80009bc <__aeabi_dcmplt>
 8005c2c:	b148      	cbz	r0, 8005c42 <_dtoa_r+0x17a>
 8005c2e:	4650      	mov	r0, sl
 8005c30:	f7fa fbe8 	bl	8000404 <__aeabi_i2d>
 8005c34:	4632      	mov	r2, r6
 8005c36:	463b      	mov	r3, r7
 8005c38:	f7fa feb6 	bl	80009a8 <__aeabi_dcmpeq>
 8005c3c:	b908      	cbnz	r0, 8005c42 <_dtoa_r+0x17a>
 8005c3e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005c42:	f1ba 0f16 	cmp.w	sl, #22
 8005c46:	d858      	bhi.n	8005cfa <_dtoa_r+0x232>
 8005c48:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005c4c:	4b57      	ldr	r3, [pc, #348]	; (8005dac <_dtoa_r+0x2e4>)
 8005c4e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c56:	f7fa feb1 	bl	80009bc <__aeabi_dcmplt>
 8005c5a:	2800      	cmp	r0, #0
 8005c5c:	d04f      	beq.n	8005cfe <_dtoa_r+0x236>
 8005c5e:	2300      	movs	r3, #0
 8005c60:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005c64:	930f      	str	r3, [sp, #60]	; 0x3c
 8005c66:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005c68:	1b1c      	subs	r4, r3, r4
 8005c6a:	1e63      	subs	r3, r4, #1
 8005c6c:	9309      	str	r3, [sp, #36]	; 0x24
 8005c6e:	bf49      	itett	mi
 8005c70:	f1c4 0301 	rsbmi	r3, r4, #1
 8005c74:	2300      	movpl	r3, #0
 8005c76:	9306      	strmi	r3, [sp, #24]
 8005c78:	2300      	movmi	r3, #0
 8005c7a:	bf54      	ite	pl
 8005c7c:	9306      	strpl	r3, [sp, #24]
 8005c7e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005c80:	f1ba 0f00 	cmp.w	sl, #0
 8005c84:	db3d      	blt.n	8005d02 <_dtoa_r+0x23a>
 8005c86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c88:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8005c8c:	4453      	add	r3, sl
 8005c8e:	9309      	str	r3, [sp, #36]	; 0x24
 8005c90:	2300      	movs	r3, #0
 8005c92:	930a      	str	r3, [sp, #40]	; 0x28
 8005c94:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005c96:	2b09      	cmp	r3, #9
 8005c98:	f200 808c 	bhi.w	8005db4 <_dtoa_r+0x2ec>
 8005c9c:	2b05      	cmp	r3, #5
 8005c9e:	bfc4      	itt	gt
 8005ca0:	3b04      	subgt	r3, #4
 8005ca2:	9322      	strgt	r3, [sp, #136]	; 0x88
 8005ca4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005ca6:	bfc8      	it	gt
 8005ca8:	2400      	movgt	r4, #0
 8005caa:	f1a3 0302 	sub.w	r3, r3, #2
 8005cae:	bfd8      	it	le
 8005cb0:	2401      	movle	r4, #1
 8005cb2:	2b03      	cmp	r3, #3
 8005cb4:	f200 808a 	bhi.w	8005dcc <_dtoa_r+0x304>
 8005cb8:	e8df f003 	tbb	[pc, r3]
 8005cbc:	5b4d4f2d 	.word	0x5b4d4f2d
 8005cc0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8005cc4:	441c      	add	r4, r3
 8005cc6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8005cca:	2b20      	cmp	r3, #32
 8005ccc:	bfc3      	ittte	gt
 8005cce:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005cd2:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8005cd6:	fa09 f303 	lslgt.w	r3, r9, r3
 8005cda:	f1c3 0320 	rsble	r3, r3, #32
 8005cde:	bfc6      	itte	gt
 8005ce0:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005ce4:	4318      	orrgt	r0, r3
 8005ce6:	fa06 f003 	lslle.w	r0, r6, r3
 8005cea:	f7fa fb7b 	bl	80003e4 <__aeabi_ui2d>
 8005cee:	2301      	movs	r3, #1
 8005cf0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8005cf4:	3c01      	subs	r4, #1
 8005cf6:	9313      	str	r3, [sp, #76]	; 0x4c
 8005cf8:	e76f      	b.n	8005bda <_dtoa_r+0x112>
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	e7b2      	b.n	8005c64 <_dtoa_r+0x19c>
 8005cfe:	900f      	str	r0, [sp, #60]	; 0x3c
 8005d00:	e7b1      	b.n	8005c66 <_dtoa_r+0x19e>
 8005d02:	9b06      	ldr	r3, [sp, #24]
 8005d04:	eba3 030a 	sub.w	r3, r3, sl
 8005d08:	9306      	str	r3, [sp, #24]
 8005d0a:	f1ca 0300 	rsb	r3, sl, #0
 8005d0e:	930a      	str	r3, [sp, #40]	; 0x28
 8005d10:	2300      	movs	r3, #0
 8005d12:	930e      	str	r3, [sp, #56]	; 0x38
 8005d14:	e7be      	b.n	8005c94 <_dtoa_r+0x1cc>
 8005d16:	2300      	movs	r3, #0
 8005d18:	930b      	str	r3, [sp, #44]	; 0x2c
 8005d1a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	dc58      	bgt.n	8005dd2 <_dtoa_r+0x30a>
 8005d20:	f04f 0901 	mov.w	r9, #1
 8005d24:	464b      	mov	r3, r9
 8005d26:	f8cd 9020 	str.w	r9, [sp, #32]
 8005d2a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8005d2e:	2200      	movs	r2, #0
 8005d30:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8005d32:	6042      	str	r2, [r0, #4]
 8005d34:	2204      	movs	r2, #4
 8005d36:	f102 0614 	add.w	r6, r2, #20
 8005d3a:	429e      	cmp	r6, r3
 8005d3c:	6841      	ldr	r1, [r0, #4]
 8005d3e:	d94e      	bls.n	8005dde <_dtoa_r+0x316>
 8005d40:	4628      	mov	r0, r5
 8005d42:	f001 f841 	bl	8006dc8 <_Balloc>
 8005d46:	9003      	str	r0, [sp, #12]
 8005d48:	2800      	cmp	r0, #0
 8005d4a:	d14c      	bne.n	8005de6 <_dtoa_r+0x31e>
 8005d4c:	4602      	mov	r2, r0
 8005d4e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005d52:	4b17      	ldr	r3, [pc, #92]	; (8005db0 <_dtoa_r+0x2e8>)
 8005d54:	e6cc      	b.n	8005af0 <_dtoa_r+0x28>
 8005d56:	2301      	movs	r3, #1
 8005d58:	e7de      	b.n	8005d18 <_dtoa_r+0x250>
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	930b      	str	r3, [sp, #44]	; 0x2c
 8005d5e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005d60:	eb0a 0903 	add.w	r9, sl, r3
 8005d64:	f109 0301 	add.w	r3, r9, #1
 8005d68:	2b01      	cmp	r3, #1
 8005d6a:	9308      	str	r3, [sp, #32]
 8005d6c:	bfb8      	it	lt
 8005d6e:	2301      	movlt	r3, #1
 8005d70:	e7dd      	b.n	8005d2e <_dtoa_r+0x266>
 8005d72:	2301      	movs	r3, #1
 8005d74:	e7f2      	b.n	8005d5c <_dtoa_r+0x294>
 8005d76:	bf00      	nop
 8005d78:	636f4361 	.word	0x636f4361
 8005d7c:	3fd287a7 	.word	0x3fd287a7
 8005d80:	8b60c8b3 	.word	0x8b60c8b3
 8005d84:	3fc68a28 	.word	0x3fc68a28
 8005d88:	509f79fb 	.word	0x509f79fb
 8005d8c:	3fd34413 	.word	0x3fd34413
 8005d90:	08009f66 	.word	0x08009f66
 8005d94:	08009f7d 	.word	0x08009f7d
 8005d98:	7ff00000 	.word	0x7ff00000
 8005d9c:	08009f62 	.word	0x08009f62
 8005da0:	08009f59 	.word	0x08009f59
 8005da4:	08009dd9 	.word	0x08009dd9
 8005da8:	3ff80000 	.word	0x3ff80000
 8005dac:	0800a0e8 	.word	0x0800a0e8
 8005db0:	08009fd8 	.word	0x08009fd8
 8005db4:	2401      	movs	r4, #1
 8005db6:	2300      	movs	r3, #0
 8005db8:	940b      	str	r4, [sp, #44]	; 0x2c
 8005dba:	9322      	str	r3, [sp, #136]	; 0x88
 8005dbc:	f04f 39ff 	mov.w	r9, #4294967295
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	2312      	movs	r3, #18
 8005dc4:	f8cd 9020 	str.w	r9, [sp, #32]
 8005dc8:	9223      	str	r2, [sp, #140]	; 0x8c
 8005dca:	e7b0      	b.n	8005d2e <_dtoa_r+0x266>
 8005dcc:	2301      	movs	r3, #1
 8005dce:	930b      	str	r3, [sp, #44]	; 0x2c
 8005dd0:	e7f4      	b.n	8005dbc <_dtoa_r+0x2f4>
 8005dd2:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8005dd6:	464b      	mov	r3, r9
 8005dd8:	f8cd 9020 	str.w	r9, [sp, #32]
 8005ddc:	e7a7      	b.n	8005d2e <_dtoa_r+0x266>
 8005dde:	3101      	adds	r1, #1
 8005de0:	6041      	str	r1, [r0, #4]
 8005de2:	0052      	lsls	r2, r2, #1
 8005de4:	e7a7      	b.n	8005d36 <_dtoa_r+0x26e>
 8005de6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005de8:	9a03      	ldr	r2, [sp, #12]
 8005dea:	601a      	str	r2, [r3, #0]
 8005dec:	9b08      	ldr	r3, [sp, #32]
 8005dee:	2b0e      	cmp	r3, #14
 8005df0:	f200 80a8 	bhi.w	8005f44 <_dtoa_r+0x47c>
 8005df4:	2c00      	cmp	r4, #0
 8005df6:	f000 80a5 	beq.w	8005f44 <_dtoa_r+0x47c>
 8005dfa:	f1ba 0f00 	cmp.w	sl, #0
 8005dfe:	dd34      	ble.n	8005e6a <_dtoa_r+0x3a2>
 8005e00:	4a9a      	ldr	r2, [pc, #616]	; (800606c <_dtoa_r+0x5a4>)
 8005e02:	f00a 030f 	and.w	r3, sl, #15
 8005e06:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005e0a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8005e0e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005e12:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005e16:	ea4f 142a 	mov.w	r4, sl, asr #4
 8005e1a:	d016      	beq.n	8005e4a <_dtoa_r+0x382>
 8005e1c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005e20:	4b93      	ldr	r3, [pc, #588]	; (8006070 <_dtoa_r+0x5a8>)
 8005e22:	2703      	movs	r7, #3
 8005e24:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005e28:	f7fa fc80 	bl	800072c <__aeabi_ddiv>
 8005e2c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005e30:	f004 040f 	and.w	r4, r4, #15
 8005e34:	4e8e      	ldr	r6, [pc, #568]	; (8006070 <_dtoa_r+0x5a8>)
 8005e36:	b954      	cbnz	r4, 8005e4e <_dtoa_r+0x386>
 8005e38:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005e3c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005e40:	f7fa fc74 	bl	800072c <__aeabi_ddiv>
 8005e44:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005e48:	e029      	b.n	8005e9e <_dtoa_r+0x3d6>
 8005e4a:	2702      	movs	r7, #2
 8005e4c:	e7f2      	b.n	8005e34 <_dtoa_r+0x36c>
 8005e4e:	07e1      	lsls	r1, r4, #31
 8005e50:	d508      	bpl.n	8005e64 <_dtoa_r+0x39c>
 8005e52:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005e56:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005e5a:	f7fa fb3d 	bl	80004d8 <__aeabi_dmul>
 8005e5e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005e62:	3701      	adds	r7, #1
 8005e64:	1064      	asrs	r4, r4, #1
 8005e66:	3608      	adds	r6, #8
 8005e68:	e7e5      	b.n	8005e36 <_dtoa_r+0x36e>
 8005e6a:	f000 80a5 	beq.w	8005fb8 <_dtoa_r+0x4f0>
 8005e6e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005e72:	f1ca 0400 	rsb	r4, sl, #0
 8005e76:	4b7d      	ldr	r3, [pc, #500]	; (800606c <_dtoa_r+0x5a4>)
 8005e78:	f004 020f 	and.w	r2, r4, #15
 8005e7c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e84:	f7fa fb28 	bl	80004d8 <__aeabi_dmul>
 8005e88:	2702      	movs	r7, #2
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005e90:	4e77      	ldr	r6, [pc, #476]	; (8006070 <_dtoa_r+0x5a8>)
 8005e92:	1124      	asrs	r4, r4, #4
 8005e94:	2c00      	cmp	r4, #0
 8005e96:	f040 8084 	bne.w	8005fa2 <_dtoa_r+0x4da>
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d1d2      	bne.n	8005e44 <_dtoa_r+0x37c>
 8005e9e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	f000 808b 	beq.w	8005fbc <_dtoa_r+0x4f4>
 8005ea6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005eaa:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005eae:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	4b6f      	ldr	r3, [pc, #444]	; (8006074 <_dtoa_r+0x5ac>)
 8005eb6:	f7fa fd81 	bl	80009bc <__aeabi_dcmplt>
 8005eba:	2800      	cmp	r0, #0
 8005ebc:	d07e      	beq.n	8005fbc <_dtoa_r+0x4f4>
 8005ebe:	9b08      	ldr	r3, [sp, #32]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d07b      	beq.n	8005fbc <_dtoa_r+0x4f4>
 8005ec4:	f1b9 0f00 	cmp.w	r9, #0
 8005ec8:	dd38      	ble.n	8005f3c <_dtoa_r+0x474>
 8005eca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005ece:	2200      	movs	r2, #0
 8005ed0:	4b69      	ldr	r3, [pc, #420]	; (8006078 <_dtoa_r+0x5b0>)
 8005ed2:	f7fa fb01 	bl	80004d8 <__aeabi_dmul>
 8005ed6:	464c      	mov	r4, r9
 8005ed8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005edc:	f10a 38ff 	add.w	r8, sl, #4294967295
 8005ee0:	3701      	adds	r7, #1
 8005ee2:	4638      	mov	r0, r7
 8005ee4:	f7fa fa8e 	bl	8000404 <__aeabi_i2d>
 8005ee8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005eec:	f7fa faf4 	bl	80004d8 <__aeabi_dmul>
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	4b62      	ldr	r3, [pc, #392]	; (800607c <_dtoa_r+0x5b4>)
 8005ef4:	f7fa f93a 	bl	800016c <__adddf3>
 8005ef8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005efc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005f00:	9611      	str	r6, [sp, #68]	; 0x44
 8005f02:	2c00      	cmp	r4, #0
 8005f04:	d15d      	bne.n	8005fc2 <_dtoa_r+0x4fa>
 8005f06:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	4b5c      	ldr	r3, [pc, #368]	; (8006080 <_dtoa_r+0x5b8>)
 8005f0e:	f7fa f92b 	bl	8000168 <__aeabi_dsub>
 8005f12:	4602      	mov	r2, r0
 8005f14:	460b      	mov	r3, r1
 8005f16:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005f1a:	4633      	mov	r3, r6
 8005f1c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005f1e:	f7fa fd6b 	bl	80009f8 <__aeabi_dcmpgt>
 8005f22:	2800      	cmp	r0, #0
 8005f24:	f040 829c 	bne.w	8006460 <_dtoa_r+0x998>
 8005f28:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005f2c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005f2e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005f32:	f7fa fd43 	bl	80009bc <__aeabi_dcmplt>
 8005f36:	2800      	cmp	r0, #0
 8005f38:	f040 8290 	bne.w	800645c <_dtoa_r+0x994>
 8005f3c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005f40:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005f44:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	f2c0 8152 	blt.w	80061f0 <_dtoa_r+0x728>
 8005f4c:	f1ba 0f0e 	cmp.w	sl, #14
 8005f50:	f300 814e 	bgt.w	80061f0 <_dtoa_r+0x728>
 8005f54:	4b45      	ldr	r3, [pc, #276]	; (800606c <_dtoa_r+0x5a4>)
 8005f56:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005f5a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005f5e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005f62:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	f280 80db 	bge.w	8006120 <_dtoa_r+0x658>
 8005f6a:	9b08      	ldr	r3, [sp, #32]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	f300 80d7 	bgt.w	8006120 <_dtoa_r+0x658>
 8005f72:	f040 8272 	bne.w	800645a <_dtoa_r+0x992>
 8005f76:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	4b40      	ldr	r3, [pc, #256]	; (8006080 <_dtoa_r+0x5b8>)
 8005f7e:	f7fa faab 	bl	80004d8 <__aeabi_dmul>
 8005f82:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f86:	f7fa fd2d 	bl	80009e4 <__aeabi_dcmpge>
 8005f8a:	9c08      	ldr	r4, [sp, #32]
 8005f8c:	4626      	mov	r6, r4
 8005f8e:	2800      	cmp	r0, #0
 8005f90:	f040 8248 	bne.w	8006424 <_dtoa_r+0x95c>
 8005f94:	2331      	movs	r3, #49	; 0x31
 8005f96:	9f03      	ldr	r7, [sp, #12]
 8005f98:	f10a 0a01 	add.w	sl, sl, #1
 8005f9c:	f807 3b01 	strb.w	r3, [r7], #1
 8005fa0:	e244      	b.n	800642c <_dtoa_r+0x964>
 8005fa2:	07e2      	lsls	r2, r4, #31
 8005fa4:	d505      	bpl.n	8005fb2 <_dtoa_r+0x4ea>
 8005fa6:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005faa:	f7fa fa95 	bl	80004d8 <__aeabi_dmul>
 8005fae:	2301      	movs	r3, #1
 8005fb0:	3701      	adds	r7, #1
 8005fb2:	1064      	asrs	r4, r4, #1
 8005fb4:	3608      	adds	r6, #8
 8005fb6:	e76d      	b.n	8005e94 <_dtoa_r+0x3cc>
 8005fb8:	2702      	movs	r7, #2
 8005fba:	e770      	b.n	8005e9e <_dtoa_r+0x3d6>
 8005fbc:	46d0      	mov	r8, sl
 8005fbe:	9c08      	ldr	r4, [sp, #32]
 8005fc0:	e78f      	b.n	8005ee2 <_dtoa_r+0x41a>
 8005fc2:	9903      	ldr	r1, [sp, #12]
 8005fc4:	4b29      	ldr	r3, [pc, #164]	; (800606c <_dtoa_r+0x5a4>)
 8005fc6:	4421      	add	r1, r4
 8005fc8:	9112      	str	r1, [sp, #72]	; 0x48
 8005fca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005fcc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005fd0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005fd4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005fd8:	2900      	cmp	r1, #0
 8005fda:	d055      	beq.n	8006088 <_dtoa_r+0x5c0>
 8005fdc:	2000      	movs	r0, #0
 8005fde:	4929      	ldr	r1, [pc, #164]	; (8006084 <_dtoa_r+0x5bc>)
 8005fe0:	f7fa fba4 	bl	800072c <__aeabi_ddiv>
 8005fe4:	463b      	mov	r3, r7
 8005fe6:	4632      	mov	r2, r6
 8005fe8:	f7fa f8be 	bl	8000168 <__aeabi_dsub>
 8005fec:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005ff0:	9f03      	ldr	r7, [sp, #12]
 8005ff2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005ff6:	f7fa fd1f 	bl	8000a38 <__aeabi_d2iz>
 8005ffa:	4604      	mov	r4, r0
 8005ffc:	f7fa fa02 	bl	8000404 <__aeabi_i2d>
 8006000:	4602      	mov	r2, r0
 8006002:	460b      	mov	r3, r1
 8006004:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006008:	f7fa f8ae 	bl	8000168 <__aeabi_dsub>
 800600c:	4602      	mov	r2, r0
 800600e:	460b      	mov	r3, r1
 8006010:	3430      	adds	r4, #48	; 0x30
 8006012:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006016:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800601a:	f807 4b01 	strb.w	r4, [r7], #1
 800601e:	f7fa fccd 	bl	80009bc <__aeabi_dcmplt>
 8006022:	2800      	cmp	r0, #0
 8006024:	d174      	bne.n	8006110 <_dtoa_r+0x648>
 8006026:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800602a:	2000      	movs	r0, #0
 800602c:	4911      	ldr	r1, [pc, #68]	; (8006074 <_dtoa_r+0x5ac>)
 800602e:	f7fa f89b 	bl	8000168 <__aeabi_dsub>
 8006032:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006036:	f7fa fcc1 	bl	80009bc <__aeabi_dcmplt>
 800603a:	2800      	cmp	r0, #0
 800603c:	f040 80b7 	bne.w	80061ae <_dtoa_r+0x6e6>
 8006040:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006042:	429f      	cmp	r7, r3
 8006044:	f43f af7a 	beq.w	8005f3c <_dtoa_r+0x474>
 8006048:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800604c:	2200      	movs	r2, #0
 800604e:	4b0a      	ldr	r3, [pc, #40]	; (8006078 <_dtoa_r+0x5b0>)
 8006050:	f7fa fa42 	bl	80004d8 <__aeabi_dmul>
 8006054:	2200      	movs	r2, #0
 8006056:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800605a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800605e:	4b06      	ldr	r3, [pc, #24]	; (8006078 <_dtoa_r+0x5b0>)
 8006060:	f7fa fa3a 	bl	80004d8 <__aeabi_dmul>
 8006064:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006068:	e7c3      	b.n	8005ff2 <_dtoa_r+0x52a>
 800606a:	bf00      	nop
 800606c:	0800a0e8 	.word	0x0800a0e8
 8006070:	0800a0c0 	.word	0x0800a0c0
 8006074:	3ff00000 	.word	0x3ff00000
 8006078:	40240000 	.word	0x40240000
 800607c:	401c0000 	.word	0x401c0000
 8006080:	40140000 	.word	0x40140000
 8006084:	3fe00000 	.word	0x3fe00000
 8006088:	4630      	mov	r0, r6
 800608a:	4639      	mov	r1, r7
 800608c:	f7fa fa24 	bl	80004d8 <__aeabi_dmul>
 8006090:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006092:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006096:	9c03      	ldr	r4, [sp, #12]
 8006098:	9314      	str	r3, [sp, #80]	; 0x50
 800609a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800609e:	f7fa fccb 	bl	8000a38 <__aeabi_d2iz>
 80060a2:	9015      	str	r0, [sp, #84]	; 0x54
 80060a4:	f7fa f9ae 	bl	8000404 <__aeabi_i2d>
 80060a8:	4602      	mov	r2, r0
 80060aa:	460b      	mov	r3, r1
 80060ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80060b0:	f7fa f85a 	bl	8000168 <__aeabi_dsub>
 80060b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80060b6:	4606      	mov	r6, r0
 80060b8:	3330      	adds	r3, #48	; 0x30
 80060ba:	f804 3b01 	strb.w	r3, [r4], #1
 80060be:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80060c0:	460f      	mov	r7, r1
 80060c2:	429c      	cmp	r4, r3
 80060c4:	f04f 0200 	mov.w	r2, #0
 80060c8:	d124      	bne.n	8006114 <_dtoa_r+0x64c>
 80060ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80060ce:	4bb0      	ldr	r3, [pc, #704]	; (8006390 <_dtoa_r+0x8c8>)
 80060d0:	f7fa f84c 	bl	800016c <__adddf3>
 80060d4:	4602      	mov	r2, r0
 80060d6:	460b      	mov	r3, r1
 80060d8:	4630      	mov	r0, r6
 80060da:	4639      	mov	r1, r7
 80060dc:	f7fa fc8c 	bl	80009f8 <__aeabi_dcmpgt>
 80060e0:	2800      	cmp	r0, #0
 80060e2:	d163      	bne.n	80061ac <_dtoa_r+0x6e4>
 80060e4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80060e8:	2000      	movs	r0, #0
 80060ea:	49a9      	ldr	r1, [pc, #676]	; (8006390 <_dtoa_r+0x8c8>)
 80060ec:	f7fa f83c 	bl	8000168 <__aeabi_dsub>
 80060f0:	4602      	mov	r2, r0
 80060f2:	460b      	mov	r3, r1
 80060f4:	4630      	mov	r0, r6
 80060f6:	4639      	mov	r1, r7
 80060f8:	f7fa fc60 	bl	80009bc <__aeabi_dcmplt>
 80060fc:	2800      	cmp	r0, #0
 80060fe:	f43f af1d 	beq.w	8005f3c <_dtoa_r+0x474>
 8006102:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006104:	1e7b      	subs	r3, r7, #1
 8006106:	9314      	str	r3, [sp, #80]	; 0x50
 8006108:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800610c:	2b30      	cmp	r3, #48	; 0x30
 800610e:	d0f8      	beq.n	8006102 <_dtoa_r+0x63a>
 8006110:	46c2      	mov	sl, r8
 8006112:	e03b      	b.n	800618c <_dtoa_r+0x6c4>
 8006114:	4b9f      	ldr	r3, [pc, #636]	; (8006394 <_dtoa_r+0x8cc>)
 8006116:	f7fa f9df 	bl	80004d8 <__aeabi_dmul>
 800611a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800611e:	e7bc      	b.n	800609a <_dtoa_r+0x5d2>
 8006120:	9f03      	ldr	r7, [sp, #12]
 8006122:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8006126:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800612a:	4640      	mov	r0, r8
 800612c:	4649      	mov	r1, r9
 800612e:	f7fa fafd 	bl	800072c <__aeabi_ddiv>
 8006132:	f7fa fc81 	bl	8000a38 <__aeabi_d2iz>
 8006136:	4604      	mov	r4, r0
 8006138:	f7fa f964 	bl	8000404 <__aeabi_i2d>
 800613c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006140:	f7fa f9ca 	bl	80004d8 <__aeabi_dmul>
 8006144:	4602      	mov	r2, r0
 8006146:	460b      	mov	r3, r1
 8006148:	4640      	mov	r0, r8
 800614a:	4649      	mov	r1, r9
 800614c:	f7fa f80c 	bl	8000168 <__aeabi_dsub>
 8006150:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8006154:	f807 6b01 	strb.w	r6, [r7], #1
 8006158:	9e03      	ldr	r6, [sp, #12]
 800615a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800615e:	1bbe      	subs	r6, r7, r6
 8006160:	45b4      	cmp	ip, r6
 8006162:	4602      	mov	r2, r0
 8006164:	460b      	mov	r3, r1
 8006166:	d136      	bne.n	80061d6 <_dtoa_r+0x70e>
 8006168:	f7fa f800 	bl	800016c <__adddf3>
 800616c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006170:	4680      	mov	r8, r0
 8006172:	4689      	mov	r9, r1
 8006174:	f7fa fc40 	bl	80009f8 <__aeabi_dcmpgt>
 8006178:	bb58      	cbnz	r0, 80061d2 <_dtoa_r+0x70a>
 800617a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800617e:	4640      	mov	r0, r8
 8006180:	4649      	mov	r1, r9
 8006182:	f7fa fc11 	bl	80009a8 <__aeabi_dcmpeq>
 8006186:	b108      	cbz	r0, 800618c <_dtoa_r+0x6c4>
 8006188:	07e1      	lsls	r1, r4, #31
 800618a:	d422      	bmi.n	80061d2 <_dtoa_r+0x70a>
 800618c:	4628      	mov	r0, r5
 800618e:	4659      	mov	r1, fp
 8006190:	f000 fe5a 	bl	8006e48 <_Bfree>
 8006194:	2300      	movs	r3, #0
 8006196:	703b      	strb	r3, [r7, #0]
 8006198:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800619a:	f10a 0001 	add.w	r0, sl, #1
 800619e:	6018      	str	r0, [r3, #0]
 80061a0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	f43f acde 	beq.w	8005b64 <_dtoa_r+0x9c>
 80061a8:	601f      	str	r7, [r3, #0]
 80061aa:	e4db      	b.n	8005b64 <_dtoa_r+0x9c>
 80061ac:	4627      	mov	r7, r4
 80061ae:	463b      	mov	r3, r7
 80061b0:	461f      	mov	r7, r3
 80061b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80061b6:	2a39      	cmp	r2, #57	; 0x39
 80061b8:	d107      	bne.n	80061ca <_dtoa_r+0x702>
 80061ba:	9a03      	ldr	r2, [sp, #12]
 80061bc:	429a      	cmp	r2, r3
 80061be:	d1f7      	bne.n	80061b0 <_dtoa_r+0x6e8>
 80061c0:	2230      	movs	r2, #48	; 0x30
 80061c2:	9903      	ldr	r1, [sp, #12]
 80061c4:	f108 0801 	add.w	r8, r8, #1
 80061c8:	700a      	strb	r2, [r1, #0]
 80061ca:	781a      	ldrb	r2, [r3, #0]
 80061cc:	3201      	adds	r2, #1
 80061ce:	701a      	strb	r2, [r3, #0]
 80061d0:	e79e      	b.n	8006110 <_dtoa_r+0x648>
 80061d2:	46d0      	mov	r8, sl
 80061d4:	e7eb      	b.n	80061ae <_dtoa_r+0x6e6>
 80061d6:	2200      	movs	r2, #0
 80061d8:	4b6e      	ldr	r3, [pc, #440]	; (8006394 <_dtoa_r+0x8cc>)
 80061da:	f7fa f97d 	bl	80004d8 <__aeabi_dmul>
 80061de:	2200      	movs	r2, #0
 80061e0:	2300      	movs	r3, #0
 80061e2:	4680      	mov	r8, r0
 80061e4:	4689      	mov	r9, r1
 80061e6:	f7fa fbdf 	bl	80009a8 <__aeabi_dcmpeq>
 80061ea:	2800      	cmp	r0, #0
 80061ec:	d09b      	beq.n	8006126 <_dtoa_r+0x65e>
 80061ee:	e7cd      	b.n	800618c <_dtoa_r+0x6c4>
 80061f0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80061f2:	2a00      	cmp	r2, #0
 80061f4:	f000 80d0 	beq.w	8006398 <_dtoa_r+0x8d0>
 80061f8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80061fa:	2a01      	cmp	r2, #1
 80061fc:	f300 80ae 	bgt.w	800635c <_dtoa_r+0x894>
 8006200:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006202:	2a00      	cmp	r2, #0
 8006204:	f000 80a6 	beq.w	8006354 <_dtoa_r+0x88c>
 8006208:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800620c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800620e:	9f06      	ldr	r7, [sp, #24]
 8006210:	9a06      	ldr	r2, [sp, #24]
 8006212:	2101      	movs	r1, #1
 8006214:	441a      	add	r2, r3
 8006216:	9206      	str	r2, [sp, #24]
 8006218:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800621a:	4628      	mov	r0, r5
 800621c:	441a      	add	r2, r3
 800621e:	9209      	str	r2, [sp, #36]	; 0x24
 8006220:	f000 ff12 	bl	8007048 <__i2b>
 8006224:	4606      	mov	r6, r0
 8006226:	2f00      	cmp	r7, #0
 8006228:	dd0c      	ble.n	8006244 <_dtoa_r+0x77c>
 800622a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800622c:	2b00      	cmp	r3, #0
 800622e:	dd09      	ble.n	8006244 <_dtoa_r+0x77c>
 8006230:	42bb      	cmp	r3, r7
 8006232:	bfa8      	it	ge
 8006234:	463b      	movge	r3, r7
 8006236:	9a06      	ldr	r2, [sp, #24]
 8006238:	1aff      	subs	r7, r7, r3
 800623a:	1ad2      	subs	r2, r2, r3
 800623c:	9206      	str	r2, [sp, #24]
 800623e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006240:	1ad3      	subs	r3, r2, r3
 8006242:	9309      	str	r3, [sp, #36]	; 0x24
 8006244:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006246:	b1f3      	cbz	r3, 8006286 <_dtoa_r+0x7be>
 8006248:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800624a:	2b00      	cmp	r3, #0
 800624c:	f000 80a8 	beq.w	80063a0 <_dtoa_r+0x8d8>
 8006250:	2c00      	cmp	r4, #0
 8006252:	dd10      	ble.n	8006276 <_dtoa_r+0x7ae>
 8006254:	4631      	mov	r1, r6
 8006256:	4622      	mov	r2, r4
 8006258:	4628      	mov	r0, r5
 800625a:	f000 ffb3 	bl	80071c4 <__pow5mult>
 800625e:	465a      	mov	r2, fp
 8006260:	4601      	mov	r1, r0
 8006262:	4606      	mov	r6, r0
 8006264:	4628      	mov	r0, r5
 8006266:	f000 ff05 	bl	8007074 <__multiply>
 800626a:	4680      	mov	r8, r0
 800626c:	4659      	mov	r1, fp
 800626e:	4628      	mov	r0, r5
 8006270:	f000 fdea 	bl	8006e48 <_Bfree>
 8006274:	46c3      	mov	fp, r8
 8006276:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006278:	1b1a      	subs	r2, r3, r4
 800627a:	d004      	beq.n	8006286 <_dtoa_r+0x7be>
 800627c:	4659      	mov	r1, fp
 800627e:	4628      	mov	r0, r5
 8006280:	f000 ffa0 	bl	80071c4 <__pow5mult>
 8006284:	4683      	mov	fp, r0
 8006286:	2101      	movs	r1, #1
 8006288:	4628      	mov	r0, r5
 800628a:	f000 fedd 	bl	8007048 <__i2b>
 800628e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006290:	4604      	mov	r4, r0
 8006292:	2b00      	cmp	r3, #0
 8006294:	f340 8086 	ble.w	80063a4 <_dtoa_r+0x8dc>
 8006298:	461a      	mov	r2, r3
 800629a:	4601      	mov	r1, r0
 800629c:	4628      	mov	r0, r5
 800629e:	f000 ff91 	bl	80071c4 <__pow5mult>
 80062a2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80062a4:	4604      	mov	r4, r0
 80062a6:	2b01      	cmp	r3, #1
 80062a8:	dd7f      	ble.n	80063aa <_dtoa_r+0x8e2>
 80062aa:	f04f 0800 	mov.w	r8, #0
 80062ae:	6923      	ldr	r3, [r4, #16]
 80062b0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80062b4:	6918      	ldr	r0, [r3, #16]
 80062b6:	f000 fe79 	bl	8006fac <__hi0bits>
 80062ba:	f1c0 0020 	rsb	r0, r0, #32
 80062be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062c0:	4418      	add	r0, r3
 80062c2:	f010 001f 	ands.w	r0, r0, #31
 80062c6:	f000 8092 	beq.w	80063ee <_dtoa_r+0x926>
 80062ca:	f1c0 0320 	rsb	r3, r0, #32
 80062ce:	2b04      	cmp	r3, #4
 80062d0:	f340 808a 	ble.w	80063e8 <_dtoa_r+0x920>
 80062d4:	f1c0 001c 	rsb	r0, r0, #28
 80062d8:	9b06      	ldr	r3, [sp, #24]
 80062da:	4407      	add	r7, r0
 80062dc:	4403      	add	r3, r0
 80062de:	9306      	str	r3, [sp, #24]
 80062e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062e2:	4403      	add	r3, r0
 80062e4:	9309      	str	r3, [sp, #36]	; 0x24
 80062e6:	9b06      	ldr	r3, [sp, #24]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	dd05      	ble.n	80062f8 <_dtoa_r+0x830>
 80062ec:	4659      	mov	r1, fp
 80062ee:	461a      	mov	r2, r3
 80062f0:	4628      	mov	r0, r5
 80062f2:	f000 ffc1 	bl	8007278 <__lshift>
 80062f6:	4683      	mov	fp, r0
 80062f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	dd05      	ble.n	800630a <_dtoa_r+0x842>
 80062fe:	4621      	mov	r1, r4
 8006300:	461a      	mov	r2, r3
 8006302:	4628      	mov	r0, r5
 8006304:	f000 ffb8 	bl	8007278 <__lshift>
 8006308:	4604      	mov	r4, r0
 800630a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800630c:	2b00      	cmp	r3, #0
 800630e:	d070      	beq.n	80063f2 <_dtoa_r+0x92a>
 8006310:	4621      	mov	r1, r4
 8006312:	4658      	mov	r0, fp
 8006314:	f001 f820 	bl	8007358 <__mcmp>
 8006318:	2800      	cmp	r0, #0
 800631a:	da6a      	bge.n	80063f2 <_dtoa_r+0x92a>
 800631c:	2300      	movs	r3, #0
 800631e:	4659      	mov	r1, fp
 8006320:	220a      	movs	r2, #10
 8006322:	4628      	mov	r0, r5
 8006324:	f000 fdb2 	bl	8006e8c <__multadd>
 8006328:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800632a:	4683      	mov	fp, r0
 800632c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006330:	2b00      	cmp	r3, #0
 8006332:	f000 8194 	beq.w	800665e <_dtoa_r+0xb96>
 8006336:	4631      	mov	r1, r6
 8006338:	2300      	movs	r3, #0
 800633a:	220a      	movs	r2, #10
 800633c:	4628      	mov	r0, r5
 800633e:	f000 fda5 	bl	8006e8c <__multadd>
 8006342:	f1b9 0f00 	cmp.w	r9, #0
 8006346:	4606      	mov	r6, r0
 8006348:	f300 8093 	bgt.w	8006472 <_dtoa_r+0x9aa>
 800634c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800634e:	2b02      	cmp	r3, #2
 8006350:	dc57      	bgt.n	8006402 <_dtoa_r+0x93a>
 8006352:	e08e      	b.n	8006472 <_dtoa_r+0x9aa>
 8006354:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006356:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800635a:	e757      	b.n	800620c <_dtoa_r+0x744>
 800635c:	9b08      	ldr	r3, [sp, #32]
 800635e:	1e5c      	subs	r4, r3, #1
 8006360:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006362:	42a3      	cmp	r3, r4
 8006364:	bfb7      	itett	lt
 8006366:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006368:	1b1c      	subge	r4, r3, r4
 800636a:	1ae2      	sublt	r2, r4, r3
 800636c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800636e:	bfbe      	ittt	lt
 8006370:	940a      	strlt	r4, [sp, #40]	; 0x28
 8006372:	189b      	addlt	r3, r3, r2
 8006374:	930e      	strlt	r3, [sp, #56]	; 0x38
 8006376:	9b08      	ldr	r3, [sp, #32]
 8006378:	bfb8      	it	lt
 800637a:	2400      	movlt	r4, #0
 800637c:	2b00      	cmp	r3, #0
 800637e:	bfbb      	ittet	lt
 8006380:	9b06      	ldrlt	r3, [sp, #24]
 8006382:	9a08      	ldrlt	r2, [sp, #32]
 8006384:	9f06      	ldrge	r7, [sp, #24]
 8006386:	1a9f      	sublt	r7, r3, r2
 8006388:	bfac      	ite	ge
 800638a:	9b08      	ldrge	r3, [sp, #32]
 800638c:	2300      	movlt	r3, #0
 800638e:	e73f      	b.n	8006210 <_dtoa_r+0x748>
 8006390:	3fe00000 	.word	0x3fe00000
 8006394:	40240000 	.word	0x40240000
 8006398:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800639a:	9f06      	ldr	r7, [sp, #24]
 800639c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800639e:	e742      	b.n	8006226 <_dtoa_r+0x75e>
 80063a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80063a2:	e76b      	b.n	800627c <_dtoa_r+0x7b4>
 80063a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80063a6:	2b01      	cmp	r3, #1
 80063a8:	dc19      	bgt.n	80063de <_dtoa_r+0x916>
 80063aa:	9b04      	ldr	r3, [sp, #16]
 80063ac:	b9bb      	cbnz	r3, 80063de <_dtoa_r+0x916>
 80063ae:	9b05      	ldr	r3, [sp, #20]
 80063b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80063b4:	b99b      	cbnz	r3, 80063de <_dtoa_r+0x916>
 80063b6:	9b05      	ldr	r3, [sp, #20]
 80063b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80063bc:	0d1b      	lsrs	r3, r3, #20
 80063be:	051b      	lsls	r3, r3, #20
 80063c0:	b183      	cbz	r3, 80063e4 <_dtoa_r+0x91c>
 80063c2:	f04f 0801 	mov.w	r8, #1
 80063c6:	9b06      	ldr	r3, [sp, #24]
 80063c8:	3301      	adds	r3, #1
 80063ca:	9306      	str	r3, [sp, #24]
 80063cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063ce:	3301      	adds	r3, #1
 80063d0:	9309      	str	r3, [sp, #36]	; 0x24
 80063d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	f47f af6a 	bne.w	80062ae <_dtoa_r+0x7e6>
 80063da:	2001      	movs	r0, #1
 80063dc:	e76f      	b.n	80062be <_dtoa_r+0x7f6>
 80063de:	f04f 0800 	mov.w	r8, #0
 80063e2:	e7f6      	b.n	80063d2 <_dtoa_r+0x90a>
 80063e4:	4698      	mov	r8, r3
 80063e6:	e7f4      	b.n	80063d2 <_dtoa_r+0x90a>
 80063e8:	f43f af7d 	beq.w	80062e6 <_dtoa_r+0x81e>
 80063ec:	4618      	mov	r0, r3
 80063ee:	301c      	adds	r0, #28
 80063f0:	e772      	b.n	80062d8 <_dtoa_r+0x810>
 80063f2:	9b08      	ldr	r3, [sp, #32]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	dc36      	bgt.n	8006466 <_dtoa_r+0x99e>
 80063f8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80063fa:	2b02      	cmp	r3, #2
 80063fc:	dd33      	ble.n	8006466 <_dtoa_r+0x99e>
 80063fe:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006402:	f1b9 0f00 	cmp.w	r9, #0
 8006406:	d10d      	bne.n	8006424 <_dtoa_r+0x95c>
 8006408:	4621      	mov	r1, r4
 800640a:	464b      	mov	r3, r9
 800640c:	2205      	movs	r2, #5
 800640e:	4628      	mov	r0, r5
 8006410:	f000 fd3c 	bl	8006e8c <__multadd>
 8006414:	4601      	mov	r1, r0
 8006416:	4604      	mov	r4, r0
 8006418:	4658      	mov	r0, fp
 800641a:	f000 ff9d 	bl	8007358 <__mcmp>
 800641e:	2800      	cmp	r0, #0
 8006420:	f73f adb8 	bgt.w	8005f94 <_dtoa_r+0x4cc>
 8006424:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006426:	9f03      	ldr	r7, [sp, #12]
 8006428:	ea6f 0a03 	mvn.w	sl, r3
 800642c:	f04f 0800 	mov.w	r8, #0
 8006430:	4621      	mov	r1, r4
 8006432:	4628      	mov	r0, r5
 8006434:	f000 fd08 	bl	8006e48 <_Bfree>
 8006438:	2e00      	cmp	r6, #0
 800643a:	f43f aea7 	beq.w	800618c <_dtoa_r+0x6c4>
 800643e:	f1b8 0f00 	cmp.w	r8, #0
 8006442:	d005      	beq.n	8006450 <_dtoa_r+0x988>
 8006444:	45b0      	cmp	r8, r6
 8006446:	d003      	beq.n	8006450 <_dtoa_r+0x988>
 8006448:	4641      	mov	r1, r8
 800644a:	4628      	mov	r0, r5
 800644c:	f000 fcfc 	bl	8006e48 <_Bfree>
 8006450:	4631      	mov	r1, r6
 8006452:	4628      	mov	r0, r5
 8006454:	f000 fcf8 	bl	8006e48 <_Bfree>
 8006458:	e698      	b.n	800618c <_dtoa_r+0x6c4>
 800645a:	2400      	movs	r4, #0
 800645c:	4626      	mov	r6, r4
 800645e:	e7e1      	b.n	8006424 <_dtoa_r+0x95c>
 8006460:	46c2      	mov	sl, r8
 8006462:	4626      	mov	r6, r4
 8006464:	e596      	b.n	8005f94 <_dtoa_r+0x4cc>
 8006466:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006468:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800646c:	2b00      	cmp	r3, #0
 800646e:	f000 80fd 	beq.w	800666c <_dtoa_r+0xba4>
 8006472:	2f00      	cmp	r7, #0
 8006474:	dd05      	ble.n	8006482 <_dtoa_r+0x9ba>
 8006476:	4631      	mov	r1, r6
 8006478:	463a      	mov	r2, r7
 800647a:	4628      	mov	r0, r5
 800647c:	f000 fefc 	bl	8007278 <__lshift>
 8006480:	4606      	mov	r6, r0
 8006482:	f1b8 0f00 	cmp.w	r8, #0
 8006486:	d05c      	beq.n	8006542 <_dtoa_r+0xa7a>
 8006488:	4628      	mov	r0, r5
 800648a:	6871      	ldr	r1, [r6, #4]
 800648c:	f000 fc9c 	bl	8006dc8 <_Balloc>
 8006490:	4607      	mov	r7, r0
 8006492:	b928      	cbnz	r0, 80064a0 <_dtoa_r+0x9d8>
 8006494:	4602      	mov	r2, r0
 8006496:	f240 21ea 	movw	r1, #746	; 0x2ea
 800649a:	4b7f      	ldr	r3, [pc, #508]	; (8006698 <_dtoa_r+0xbd0>)
 800649c:	f7ff bb28 	b.w	8005af0 <_dtoa_r+0x28>
 80064a0:	6932      	ldr	r2, [r6, #16]
 80064a2:	f106 010c 	add.w	r1, r6, #12
 80064a6:	3202      	adds	r2, #2
 80064a8:	0092      	lsls	r2, r2, #2
 80064aa:	300c      	adds	r0, #12
 80064ac:	f7fd fd30 	bl	8003f10 <memcpy>
 80064b0:	2201      	movs	r2, #1
 80064b2:	4639      	mov	r1, r7
 80064b4:	4628      	mov	r0, r5
 80064b6:	f000 fedf 	bl	8007278 <__lshift>
 80064ba:	46b0      	mov	r8, r6
 80064bc:	4606      	mov	r6, r0
 80064be:	9b03      	ldr	r3, [sp, #12]
 80064c0:	3301      	adds	r3, #1
 80064c2:	9308      	str	r3, [sp, #32]
 80064c4:	9b03      	ldr	r3, [sp, #12]
 80064c6:	444b      	add	r3, r9
 80064c8:	930a      	str	r3, [sp, #40]	; 0x28
 80064ca:	9b04      	ldr	r3, [sp, #16]
 80064cc:	f003 0301 	and.w	r3, r3, #1
 80064d0:	9309      	str	r3, [sp, #36]	; 0x24
 80064d2:	9b08      	ldr	r3, [sp, #32]
 80064d4:	4621      	mov	r1, r4
 80064d6:	3b01      	subs	r3, #1
 80064d8:	4658      	mov	r0, fp
 80064da:	9304      	str	r3, [sp, #16]
 80064dc:	f7ff fa68 	bl	80059b0 <quorem>
 80064e0:	4603      	mov	r3, r0
 80064e2:	4641      	mov	r1, r8
 80064e4:	3330      	adds	r3, #48	; 0x30
 80064e6:	9006      	str	r0, [sp, #24]
 80064e8:	4658      	mov	r0, fp
 80064ea:	930b      	str	r3, [sp, #44]	; 0x2c
 80064ec:	f000 ff34 	bl	8007358 <__mcmp>
 80064f0:	4632      	mov	r2, r6
 80064f2:	4681      	mov	r9, r0
 80064f4:	4621      	mov	r1, r4
 80064f6:	4628      	mov	r0, r5
 80064f8:	f000 ff4a 	bl	8007390 <__mdiff>
 80064fc:	68c2      	ldr	r2, [r0, #12]
 80064fe:	4607      	mov	r7, r0
 8006500:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006502:	bb02      	cbnz	r2, 8006546 <_dtoa_r+0xa7e>
 8006504:	4601      	mov	r1, r0
 8006506:	4658      	mov	r0, fp
 8006508:	f000 ff26 	bl	8007358 <__mcmp>
 800650c:	4602      	mov	r2, r0
 800650e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006510:	4639      	mov	r1, r7
 8006512:	4628      	mov	r0, r5
 8006514:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8006518:	f000 fc96 	bl	8006e48 <_Bfree>
 800651c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800651e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006520:	9f08      	ldr	r7, [sp, #32]
 8006522:	ea43 0102 	orr.w	r1, r3, r2
 8006526:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006528:	430b      	orrs	r3, r1
 800652a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800652c:	d10d      	bne.n	800654a <_dtoa_r+0xa82>
 800652e:	2b39      	cmp	r3, #57	; 0x39
 8006530:	d029      	beq.n	8006586 <_dtoa_r+0xabe>
 8006532:	f1b9 0f00 	cmp.w	r9, #0
 8006536:	dd01      	ble.n	800653c <_dtoa_r+0xa74>
 8006538:	9b06      	ldr	r3, [sp, #24]
 800653a:	3331      	adds	r3, #49	; 0x31
 800653c:	9a04      	ldr	r2, [sp, #16]
 800653e:	7013      	strb	r3, [r2, #0]
 8006540:	e776      	b.n	8006430 <_dtoa_r+0x968>
 8006542:	4630      	mov	r0, r6
 8006544:	e7b9      	b.n	80064ba <_dtoa_r+0x9f2>
 8006546:	2201      	movs	r2, #1
 8006548:	e7e2      	b.n	8006510 <_dtoa_r+0xa48>
 800654a:	f1b9 0f00 	cmp.w	r9, #0
 800654e:	db06      	blt.n	800655e <_dtoa_r+0xa96>
 8006550:	9922      	ldr	r1, [sp, #136]	; 0x88
 8006552:	ea41 0909 	orr.w	r9, r1, r9
 8006556:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006558:	ea59 0101 	orrs.w	r1, r9, r1
 800655c:	d120      	bne.n	80065a0 <_dtoa_r+0xad8>
 800655e:	2a00      	cmp	r2, #0
 8006560:	ddec      	ble.n	800653c <_dtoa_r+0xa74>
 8006562:	4659      	mov	r1, fp
 8006564:	2201      	movs	r2, #1
 8006566:	4628      	mov	r0, r5
 8006568:	9308      	str	r3, [sp, #32]
 800656a:	f000 fe85 	bl	8007278 <__lshift>
 800656e:	4621      	mov	r1, r4
 8006570:	4683      	mov	fp, r0
 8006572:	f000 fef1 	bl	8007358 <__mcmp>
 8006576:	2800      	cmp	r0, #0
 8006578:	9b08      	ldr	r3, [sp, #32]
 800657a:	dc02      	bgt.n	8006582 <_dtoa_r+0xaba>
 800657c:	d1de      	bne.n	800653c <_dtoa_r+0xa74>
 800657e:	07da      	lsls	r2, r3, #31
 8006580:	d5dc      	bpl.n	800653c <_dtoa_r+0xa74>
 8006582:	2b39      	cmp	r3, #57	; 0x39
 8006584:	d1d8      	bne.n	8006538 <_dtoa_r+0xa70>
 8006586:	2339      	movs	r3, #57	; 0x39
 8006588:	9a04      	ldr	r2, [sp, #16]
 800658a:	7013      	strb	r3, [r2, #0]
 800658c:	463b      	mov	r3, r7
 800658e:	461f      	mov	r7, r3
 8006590:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8006594:	3b01      	subs	r3, #1
 8006596:	2a39      	cmp	r2, #57	; 0x39
 8006598:	d050      	beq.n	800663c <_dtoa_r+0xb74>
 800659a:	3201      	adds	r2, #1
 800659c:	701a      	strb	r2, [r3, #0]
 800659e:	e747      	b.n	8006430 <_dtoa_r+0x968>
 80065a0:	2a00      	cmp	r2, #0
 80065a2:	dd03      	ble.n	80065ac <_dtoa_r+0xae4>
 80065a4:	2b39      	cmp	r3, #57	; 0x39
 80065a6:	d0ee      	beq.n	8006586 <_dtoa_r+0xabe>
 80065a8:	3301      	adds	r3, #1
 80065aa:	e7c7      	b.n	800653c <_dtoa_r+0xa74>
 80065ac:	9a08      	ldr	r2, [sp, #32]
 80065ae:	990a      	ldr	r1, [sp, #40]	; 0x28
 80065b0:	f802 3c01 	strb.w	r3, [r2, #-1]
 80065b4:	428a      	cmp	r2, r1
 80065b6:	d02a      	beq.n	800660e <_dtoa_r+0xb46>
 80065b8:	4659      	mov	r1, fp
 80065ba:	2300      	movs	r3, #0
 80065bc:	220a      	movs	r2, #10
 80065be:	4628      	mov	r0, r5
 80065c0:	f000 fc64 	bl	8006e8c <__multadd>
 80065c4:	45b0      	cmp	r8, r6
 80065c6:	4683      	mov	fp, r0
 80065c8:	f04f 0300 	mov.w	r3, #0
 80065cc:	f04f 020a 	mov.w	r2, #10
 80065d0:	4641      	mov	r1, r8
 80065d2:	4628      	mov	r0, r5
 80065d4:	d107      	bne.n	80065e6 <_dtoa_r+0xb1e>
 80065d6:	f000 fc59 	bl	8006e8c <__multadd>
 80065da:	4680      	mov	r8, r0
 80065dc:	4606      	mov	r6, r0
 80065de:	9b08      	ldr	r3, [sp, #32]
 80065e0:	3301      	adds	r3, #1
 80065e2:	9308      	str	r3, [sp, #32]
 80065e4:	e775      	b.n	80064d2 <_dtoa_r+0xa0a>
 80065e6:	f000 fc51 	bl	8006e8c <__multadd>
 80065ea:	4631      	mov	r1, r6
 80065ec:	4680      	mov	r8, r0
 80065ee:	2300      	movs	r3, #0
 80065f0:	220a      	movs	r2, #10
 80065f2:	4628      	mov	r0, r5
 80065f4:	f000 fc4a 	bl	8006e8c <__multadd>
 80065f8:	4606      	mov	r6, r0
 80065fa:	e7f0      	b.n	80065de <_dtoa_r+0xb16>
 80065fc:	f1b9 0f00 	cmp.w	r9, #0
 8006600:	bfcc      	ite	gt
 8006602:	464f      	movgt	r7, r9
 8006604:	2701      	movle	r7, #1
 8006606:	f04f 0800 	mov.w	r8, #0
 800660a:	9a03      	ldr	r2, [sp, #12]
 800660c:	4417      	add	r7, r2
 800660e:	4659      	mov	r1, fp
 8006610:	2201      	movs	r2, #1
 8006612:	4628      	mov	r0, r5
 8006614:	9308      	str	r3, [sp, #32]
 8006616:	f000 fe2f 	bl	8007278 <__lshift>
 800661a:	4621      	mov	r1, r4
 800661c:	4683      	mov	fp, r0
 800661e:	f000 fe9b 	bl	8007358 <__mcmp>
 8006622:	2800      	cmp	r0, #0
 8006624:	dcb2      	bgt.n	800658c <_dtoa_r+0xac4>
 8006626:	d102      	bne.n	800662e <_dtoa_r+0xb66>
 8006628:	9b08      	ldr	r3, [sp, #32]
 800662a:	07db      	lsls	r3, r3, #31
 800662c:	d4ae      	bmi.n	800658c <_dtoa_r+0xac4>
 800662e:	463b      	mov	r3, r7
 8006630:	461f      	mov	r7, r3
 8006632:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006636:	2a30      	cmp	r2, #48	; 0x30
 8006638:	d0fa      	beq.n	8006630 <_dtoa_r+0xb68>
 800663a:	e6f9      	b.n	8006430 <_dtoa_r+0x968>
 800663c:	9a03      	ldr	r2, [sp, #12]
 800663e:	429a      	cmp	r2, r3
 8006640:	d1a5      	bne.n	800658e <_dtoa_r+0xac6>
 8006642:	2331      	movs	r3, #49	; 0x31
 8006644:	f10a 0a01 	add.w	sl, sl, #1
 8006648:	e779      	b.n	800653e <_dtoa_r+0xa76>
 800664a:	4b14      	ldr	r3, [pc, #80]	; (800669c <_dtoa_r+0xbd4>)
 800664c:	f7ff baa8 	b.w	8005ba0 <_dtoa_r+0xd8>
 8006650:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006652:	2b00      	cmp	r3, #0
 8006654:	f47f aa81 	bne.w	8005b5a <_dtoa_r+0x92>
 8006658:	4b11      	ldr	r3, [pc, #68]	; (80066a0 <_dtoa_r+0xbd8>)
 800665a:	f7ff baa1 	b.w	8005ba0 <_dtoa_r+0xd8>
 800665e:	f1b9 0f00 	cmp.w	r9, #0
 8006662:	dc03      	bgt.n	800666c <_dtoa_r+0xba4>
 8006664:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006666:	2b02      	cmp	r3, #2
 8006668:	f73f aecb 	bgt.w	8006402 <_dtoa_r+0x93a>
 800666c:	9f03      	ldr	r7, [sp, #12]
 800666e:	4621      	mov	r1, r4
 8006670:	4658      	mov	r0, fp
 8006672:	f7ff f99d 	bl	80059b0 <quorem>
 8006676:	9a03      	ldr	r2, [sp, #12]
 8006678:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800667c:	f807 3b01 	strb.w	r3, [r7], #1
 8006680:	1aba      	subs	r2, r7, r2
 8006682:	4591      	cmp	r9, r2
 8006684:	ddba      	ble.n	80065fc <_dtoa_r+0xb34>
 8006686:	4659      	mov	r1, fp
 8006688:	2300      	movs	r3, #0
 800668a:	220a      	movs	r2, #10
 800668c:	4628      	mov	r0, r5
 800668e:	f000 fbfd 	bl	8006e8c <__multadd>
 8006692:	4683      	mov	fp, r0
 8006694:	e7eb      	b.n	800666e <_dtoa_r+0xba6>
 8006696:	bf00      	nop
 8006698:	08009fd8 	.word	0x08009fd8
 800669c:	08009dd8 	.word	0x08009dd8
 80066a0:	08009f59 	.word	0x08009f59

080066a4 <rshift>:
 80066a4:	6903      	ldr	r3, [r0, #16]
 80066a6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80066aa:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80066ae:	f100 0414 	add.w	r4, r0, #20
 80066b2:	ea4f 1261 	mov.w	r2, r1, asr #5
 80066b6:	dd46      	ble.n	8006746 <rshift+0xa2>
 80066b8:	f011 011f 	ands.w	r1, r1, #31
 80066bc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80066c0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80066c4:	d10c      	bne.n	80066e0 <rshift+0x3c>
 80066c6:	4629      	mov	r1, r5
 80066c8:	f100 0710 	add.w	r7, r0, #16
 80066cc:	42b1      	cmp	r1, r6
 80066ce:	d335      	bcc.n	800673c <rshift+0x98>
 80066d0:	1a9b      	subs	r3, r3, r2
 80066d2:	009b      	lsls	r3, r3, #2
 80066d4:	1eea      	subs	r2, r5, #3
 80066d6:	4296      	cmp	r6, r2
 80066d8:	bf38      	it	cc
 80066da:	2300      	movcc	r3, #0
 80066dc:	4423      	add	r3, r4
 80066de:	e015      	b.n	800670c <rshift+0x68>
 80066e0:	46a1      	mov	r9, r4
 80066e2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80066e6:	f1c1 0820 	rsb	r8, r1, #32
 80066ea:	40cf      	lsrs	r7, r1
 80066ec:	f105 0e04 	add.w	lr, r5, #4
 80066f0:	4576      	cmp	r6, lr
 80066f2:	46f4      	mov	ip, lr
 80066f4:	d816      	bhi.n	8006724 <rshift+0x80>
 80066f6:	1a9a      	subs	r2, r3, r2
 80066f8:	0092      	lsls	r2, r2, #2
 80066fa:	3a04      	subs	r2, #4
 80066fc:	3501      	adds	r5, #1
 80066fe:	42ae      	cmp	r6, r5
 8006700:	bf38      	it	cc
 8006702:	2200      	movcc	r2, #0
 8006704:	18a3      	adds	r3, r4, r2
 8006706:	50a7      	str	r7, [r4, r2]
 8006708:	b107      	cbz	r7, 800670c <rshift+0x68>
 800670a:	3304      	adds	r3, #4
 800670c:	42a3      	cmp	r3, r4
 800670e:	eba3 0204 	sub.w	r2, r3, r4
 8006712:	bf08      	it	eq
 8006714:	2300      	moveq	r3, #0
 8006716:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800671a:	6102      	str	r2, [r0, #16]
 800671c:	bf08      	it	eq
 800671e:	6143      	streq	r3, [r0, #20]
 8006720:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006724:	f8dc c000 	ldr.w	ip, [ip]
 8006728:	fa0c fc08 	lsl.w	ip, ip, r8
 800672c:	ea4c 0707 	orr.w	r7, ip, r7
 8006730:	f849 7b04 	str.w	r7, [r9], #4
 8006734:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006738:	40cf      	lsrs	r7, r1
 800673a:	e7d9      	b.n	80066f0 <rshift+0x4c>
 800673c:	f851 cb04 	ldr.w	ip, [r1], #4
 8006740:	f847 cf04 	str.w	ip, [r7, #4]!
 8006744:	e7c2      	b.n	80066cc <rshift+0x28>
 8006746:	4623      	mov	r3, r4
 8006748:	e7e0      	b.n	800670c <rshift+0x68>

0800674a <__hexdig_fun>:
 800674a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800674e:	2b09      	cmp	r3, #9
 8006750:	d802      	bhi.n	8006758 <__hexdig_fun+0xe>
 8006752:	3820      	subs	r0, #32
 8006754:	b2c0      	uxtb	r0, r0
 8006756:	4770      	bx	lr
 8006758:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800675c:	2b05      	cmp	r3, #5
 800675e:	d801      	bhi.n	8006764 <__hexdig_fun+0x1a>
 8006760:	3847      	subs	r0, #71	; 0x47
 8006762:	e7f7      	b.n	8006754 <__hexdig_fun+0xa>
 8006764:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8006768:	2b05      	cmp	r3, #5
 800676a:	d801      	bhi.n	8006770 <__hexdig_fun+0x26>
 800676c:	3827      	subs	r0, #39	; 0x27
 800676e:	e7f1      	b.n	8006754 <__hexdig_fun+0xa>
 8006770:	2000      	movs	r0, #0
 8006772:	4770      	bx	lr

08006774 <__gethex>:
 8006774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006778:	b08b      	sub	sp, #44	; 0x2c
 800677a:	9305      	str	r3, [sp, #20]
 800677c:	4bb2      	ldr	r3, [pc, #712]	; (8006a48 <__gethex+0x2d4>)
 800677e:	9002      	str	r0, [sp, #8]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	468b      	mov	fp, r1
 8006784:	4618      	mov	r0, r3
 8006786:	4690      	mov	r8, r2
 8006788:	9303      	str	r3, [sp, #12]
 800678a:	f7f9 fce1 	bl	8000150 <strlen>
 800678e:	4682      	mov	sl, r0
 8006790:	9b03      	ldr	r3, [sp, #12]
 8006792:	f8db 2000 	ldr.w	r2, [fp]
 8006796:	4403      	add	r3, r0
 8006798:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800679c:	9306      	str	r3, [sp, #24]
 800679e:	1c93      	adds	r3, r2, #2
 80067a0:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80067a4:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80067a8:	32fe      	adds	r2, #254	; 0xfe
 80067aa:	18d1      	adds	r1, r2, r3
 80067ac:	461f      	mov	r7, r3
 80067ae:	f813 0b01 	ldrb.w	r0, [r3], #1
 80067b2:	9101      	str	r1, [sp, #4]
 80067b4:	2830      	cmp	r0, #48	; 0x30
 80067b6:	d0f8      	beq.n	80067aa <__gethex+0x36>
 80067b8:	f7ff ffc7 	bl	800674a <__hexdig_fun>
 80067bc:	4604      	mov	r4, r0
 80067be:	2800      	cmp	r0, #0
 80067c0:	d13a      	bne.n	8006838 <__gethex+0xc4>
 80067c2:	4652      	mov	r2, sl
 80067c4:	4638      	mov	r0, r7
 80067c6:	9903      	ldr	r1, [sp, #12]
 80067c8:	f001 fa18 	bl	8007bfc <strncmp>
 80067cc:	4605      	mov	r5, r0
 80067ce:	2800      	cmp	r0, #0
 80067d0:	d166      	bne.n	80068a0 <__gethex+0x12c>
 80067d2:	f817 000a 	ldrb.w	r0, [r7, sl]
 80067d6:	eb07 060a 	add.w	r6, r7, sl
 80067da:	f7ff ffb6 	bl	800674a <__hexdig_fun>
 80067de:	2800      	cmp	r0, #0
 80067e0:	d060      	beq.n	80068a4 <__gethex+0x130>
 80067e2:	4633      	mov	r3, r6
 80067e4:	7818      	ldrb	r0, [r3, #0]
 80067e6:	461f      	mov	r7, r3
 80067e8:	2830      	cmp	r0, #48	; 0x30
 80067ea:	f103 0301 	add.w	r3, r3, #1
 80067ee:	d0f9      	beq.n	80067e4 <__gethex+0x70>
 80067f0:	f7ff ffab 	bl	800674a <__hexdig_fun>
 80067f4:	2301      	movs	r3, #1
 80067f6:	fab0 f480 	clz	r4, r0
 80067fa:	4635      	mov	r5, r6
 80067fc:	0964      	lsrs	r4, r4, #5
 80067fe:	9301      	str	r3, [sp, #4]
 8006800:	463a      	mov	r2, r7
 8006802:	4616      	mov	r6, r2
 8006804:	7830      	ldrb	r0, [r6, #0]
 8006806:	3201      	adds	r2, #1
 8006808:	f7ff ff9f 	bl	800674a <__hexdig_fun>
 800680c:	2800      	cmp	r0, #0
 800680e:	d1f8      	bne.n	8006802 <__gethex+0x8e>
 8006810:	4652      	mov	r2, sl
 8006812:	4630      	mov	r0, r6
 8006814:	9903      	ldr	r1, [sp, #12]
 8006816:	f001 f9f1 	bl	8007bfc <strncmp>
 800681a:	b980      	cbnz	r0, 800683e <__gethex+0xca>
 800681c:	b94d      	cbnz	r5, 8006832 <__gethex+0xbe>
 800681e:	eb06 050a 	add.w	r5, r6, sl
 8006822:	462a      	mov	r2, r5
 8006824:	4616      	mov	r6, r2
 8006826:	7830      	ldrb	r0, [r6, #0]
 8006828:	3201      	adds	r2, #1
 800682a:	f7ff ff8e 	bl	800674a <__hexdig_fun>
 800682e:	2800      	cmp	r0, #0
 8006830:	d1f8      	bne.n	8006824 <__gethex+0xb0>
 8006832:	1bad      	subs	r5, r5, r6
 8006834:	00ad      	lsls	r5, r5, #2
 8006836:	e004      	b.n	8006842 <__gethex+0xce>
 8006838:	2400      	movs	r4, #0
 800683a:	4625      	mov	r5, r4
 800683c:	e7e0      	b.n	8006800 <__gethex+0x8c>
 800683e:	2d00      	cmp	r5, #0
 8006840:	d1f7      	bne.n	8006832 <__gethex+0xbe>
 8006842:	7833      	ldrb	r3, [r6, #0]
 8006844:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006848:	2b50      	cmp	r3, #80	; 0x50
 800684a:	d139      	bne.n	80068c0 <__gethex+0x14c>
 800684c:	7873      	ldrb	r3, [r6, #1]
 800684e:	2b2b      	cmp	r3, #43	; 0x2b
 8006850:	d02a      	beq.n	80068a8 <__gethex+0x134>
 8006852:	2b2d      	cmp	r3, #45	; 0x2d
 8006854:	d02c      	beq.n	80068b0 <__gethex+0x13c>
 8006856:	f04f 0900 	mov.w	r9, #0
 800685a:	1c71      	adds	r1, r6, #1
 800685c:	7808      	ldrb	r0, [r1, #0]
 800685e:	f7ff ff74 	bl	800674a <__hexdig_fun>
 8006862:	1e43      	subs	r3, r0, #1
 8006864:	b2db      	uxtb	r3, r3
 8006866:	2b18      	cmp	r3, #24
 8006868:	d82a      	bhi.n	80068c0 <__gethex+0x14c>
 800686a:	f1a0 0210 	sub.w	r2, r0, #16
 800686e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006872:	f7ff ff6a 	bl	800674a <__hexdig_fun>
 8006876:	1e43      	subs	r3, r0, #1
 8006878:	b2db      	uxtb	r3, r3
 800687a:	2b18      	cmp	r3, #24
 800687c:	d91b      	bls.n	80068b6 <__gethex+0x142>
 800687e:	f1b9 0f00 	cmp.w	r9, #0
 8006882:	d000      	beq.n	8006886 <__gethex+0x112>
 8006884:	4252      	negs	r2, r2
 8006886:	4415      	add	r5, r2
 8006888:	f8cb 1000 	str.w	r1, [fp]
 800688c:	b1d4      	cbz	r4, 80068c4 <__gethex+0x150>
 800688e:	9b01      	ldr	r3, [sp, #4]
 8006890:	2b00      	cmp	r3, #0
 8006892:	bf14      	ite	ne
 8006894:	2700      	movne	r7, #0
 8006896:	2706      	moveq	r7, #6
 8006898:	4638      	mov	r0, r7
 800689a:	b00b      	add	sp, #44	; 0x2c
 800689c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068a0:	463e      	mov	r6, r7
 80068a2:	4625      	mov	r5, r4
 80068a4:	2401      	movs	r4, #1
 80068a6:	e7cc      	b.n	8006842 <__gethex+0xce>
 80068a8:	f04f 0900 	mov.w	r9, #0
 80068ac:	1cb1      	adds	r1, r6, #2
 80068ae:	e7d5      	b.n	800685c <__gethex+0xe8>
 80068b0:	f04f 0901 	mov.w	r9, #1
 80068b4:	e7fa      	b.n	80068ac <__gethex+0x138>
 80068b6:	230a      	movs	r3, #10
 80068b8:	fb03 0202 	mla	r2, r3, r2, r0
 80068bc:	3a10      	subs	r2, #16
 80068be:	e7d6      	b.n	800686e <__gethex+0xfa>
 80068c0:	4631      	mov	r1, r6
 80068c2:	e7e1      	b.n	8006888 <__gethex+0x114>
 80068c4:	4621      	mov	r1, r4
 80068c6:	1bf3      	subs	r3, r6, r7
 80068c8:	3b01      	subs	r3, #1
 80068ca:	2b07      	cmp	r3, #7
 80068cc:	dc0a      	bgt.n	80068e4 <__gethex+0x170>
 80068ce:	9802      	ldr	r0, [sp, #8]
 80068d0:	f000 fa7a 	bl	8006dc8 <_Balloc>
 80068d4:	4604      	mov	r4, r0
 80068d6:	b940      	cbnz	r0, 80068ea <__gethex+0x176>
 80068d8:	4602      	mov	r2, r0
 80068da:	21de      	movs	r1, #222	; 0xde
 80068dc:	4b5b      	ldr	r3, [pc, #364]	; (8006a4c <__gethex+0x2d8>)
 80068de:	485c      	ldr	r0, [pc, #368]	; (8006a50 <__gethex+0x2dc>)
 80068e0:	f001 f9ae 	bl	8007c40 <__assert_func>
 80068e4:	3101      	adds	r1, #1
 80068e6:	105b      	asrs	r3, r3, #1
 80068e8:	e7ef      	b.n	80068ca <__gethex+0x156>
 80068ea:	f04f 0b00 	mov.w	fp, #0
 80068ee:	f100 0914 	add.w	r9, r0, #20
 80068f2:	f1ca 0301 	rsb	r3, sl, #1
 80068f6:	f8cd 9010 	str.w	r9, [sp, #16]
 80068fa:	f8cd b004 	str.w	fp, [sp, #4]
 80068fe:	9308      	str	r3, [sp, #32]
 8006900:	42b7      	cmp	r7, r6
 8006902:	d33f      	bcc.n	8006984 <__gethex+0x210>
 8006904:	9f04      	ldr	r7, [sp, #16]
 8006906:	9b01      	ldr	r3, [sp, #4]
 8006908:	f847 3b04 	str.w	r3, [r7], #4
 800690c:	eba7 0709 	sub.w	r7, r7, r9
 8006910:	10bf      	asrs	r7, r7, #2
 8006912:	6127      	str	r7, [r4, #16]
 8006914:	4618      	mov	r0, r3
 8006916:	f000 fb49 	bl	8006fac <__hi0bits>
 800691a:	017f      	lsls	r7, r7, #5
 800691c:	f8d8 6000 	ldr.w	r6, [r8]
 8006920:	1a3f      	subs	r7, r7, r0
 8006922:	42b7      	cmp	r7, r6
 8006924:	dd62      	ble.n	80069ec <__gethex+0x278>
 8006926:	1bbf      	subs	r7, r7, r6
 8006928:	4639      	mov	r1, r7
 800692a:	4620      	mov	r0, r4
 800692c:	f000 fee3 	bl	80076f6 <__any_on>
 8006930:	4682      	mov	sl, r0
 8006932:	b1a8      	cbz	r0, 8006960 <__gethex+0x1ec>
 8006934:	f04f 0a01 	mov.w	sl, #1
 8006938:	1e7b      	subs	r3, r7, #1
 800693a:	1159      	asrs	r1, r3, #5
 800693c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8006940:	f003 021f 	and.w	r2, r3, #31
 8006944:	fa0a f202 	lsl.w	r2, sl, r2
 8006948:	420a      	tst	r2, r1
 800694a:	d009      	beq.n	8006960 <__gethex+0x1ec>
 800694c:	4553      	cmp	r3, sl
 800694e:	dd05      	ble.n	800695c <__gethex+0x1e8>
 8006950:	4620      	mov	r0, r4
 8006952:	1eb9      	subs	r1, r7, #2
 8006954:	f000 fecf 	bl	80076f6 <__any_on>
 8006958:	2800      	cmp	r0, #0
 800695a:	d144      	bne.n	80069e6 <__gethex+0x272>
 800695c:	f04f 0a02 	mov.w	sl, #2
 8006960:	4639      	mov	r1, r7
 8006962:	4620      	mov	r0, r4
 8006964:	f7ff fe9e 	bl	80066a4 <rshift>
 8006968:	443d      	add	r5, r7
 800696a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800696e:	42ab      	cmp	r3, r5
 8006970:	da4a      	bge.n	8006a08 <__gethex+0x294>
 8006972:	4621      	mov	r1, r4
 8006974:	9802      	ldr	r0, [sp, #8]
 8006976:	f000 fa67 	bl	8006e48 <_Bfree>
 800697a:	2300      	movs	r3, #0
 800697c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800697e:	27a3      	movs	r7, #163	; 0xa3
 8006980:	6013      	str	r3, [r2, #0]
 8006982:	e789      	b.n	8006898 <__gethex+0x124>
 8006984:	1e73      	subs	r3, r6, #1
 8006986:	9a06      	ldr	r2, [sp, #24]
 8006988:	9307      	str	r3, [sp, #28]
 800698a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800698e:	4293      	cmp	r3, r2
 8006990:	d019      	beq.n	80069c6 <__gethex+0x252>
 8006992:	f1bb 0f20 	cmp.w	fp, #32
 8006996:	d107      	bne.n	80069a8 <__gethex+0x234>
 8006998:	9b04      	ldr	r3, [sp, #16]
 800699a:	9a01      	ldr	r2, [sp, #4]
 800699c:	f843 2b04 	str.w	r2, [r3], #4
 80069a0:	9304      	str	r3, [sp, #16]
 80069a2:	2300      	movs	r3, #0
 80069a4:	469b      	mov	fp, r3
 80069a6:	9301      	str	r3, [sp, #4]
 80069a8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80069ac:	f7ff fecd 	bl	800674a <__hexdig_fun>
 80069b0:	9b01      	ldr	r3, [sp, #4]
 80069b2:	f000 000f 	and.w	r0, r0, #15
 80069b6:	fa00 f00b 	lsl.w	r0, r0, fp
 80069ba:	4303      	orrs	r3, r0
 80069bc:	9301      	str	r3, [sp, #4]
 80069be:	f10b 0b04 	add.w	fp, fp, #4
 80069c2:	9b07      	ldr	r3, [sp, #28]
 80069c4:	e00d      	b.n	80069e2 <__gethex+0x26e>
 80069c6:	9a08      	ldr	r2, [sp, #32]
 80069c8:	1e73      	subs	r3, r6, #1
 80069ca:	4413      	add	r3, r2
 80069cc:	42bb      	cmp	r3, r7
 80069ce:	d3e0      	bcc.n	8006992 <__gethex+0x21e>
 80069d0:	4618      	mov	r0, r3
 80069d2:	4652      	mov	r2, sl
 80069d4:	9903      	ldr	r1, [sp, #12]
 80069d6:	9309      	str	r3, [sp, #36]	; 0x24
 80069d8:	f001 f910 	bl	8007bfc <strncmp>
 80069dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069de:	2800      	cmp	r0, #0
 80069e0:	d1d7      	bne.n	8006992 <__gethex+0x21e>
 80069e2:	461e      	mov	r6, r3
 80069e4:	e78c      	b.n	8006900 <__gethex+0x18c>
 80069e6:	f04f 0a03 	mov.w	sl, #3
 80069ea:	e7b9      	b.n	8006960 <__gethex+0x1ec>
 80069ec:	da09      	bge.n	8006a02 <__gethex+0x28e>
 80069ee:	1bf7      	subs	r7, r6, r7
 80069f0:	4621      	mov	r1, r4
 80069f2:	463a      	mov	r2, r7
 80069f4:	9802      	ldr	r0, [sp, #8]
 80069f6:	f000 fc3f 	bl	8007278 <__lshift>
 80069fa:	4604      	mov	r4, r0
 80069fc:	1bed      	subs	r5, r5, r7
 80069fe:	f100 0914 	add.w	r9, r0, #20
 8006a02:	f04f 0a00 	mov.w	sl, #0
 8006a06:	e7b0      	b.n	800696a <__gethex+0x1f6>
 8006a08:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8006a0c:	42a8      	cmp	r0, r5
 8006a0e:	dd72      	ble.n	8006af6 <__gethex+0x382>
 8006a10:	1b45      	subs	r5, r0, r5
 8006a12:	42ae      	cmp	r6, r5
 8006a14:	dc35      	bgt.n	8006a82 <__gethex+0x30e>
 8006a16:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006a1a:	2b02      	cmp	r3, #2
 8006a1c:	d029      	beq.n	8006a72 <__gethex+0x2fe>
 8006a1e:	2b03      	cmp	r3, #3
 8006a20:	d02b      	beq.n	8006a7a <__gethex+0x306>
 8006a22:	2b01      	cmp	r3, #1
 8006a24:	d11c      	bne.n	8006a60 <__gethex+0x2ec>
 8006a26:	42ae      	cmp	r6, r5
 8006a28:	d11a      	bne.n	8006a60 <__gethex+0x2ec>
 8006a2a:	2e01      	cmp	r6, #1
 8006a2c:	d112      	bne.n	8006a54 <__gethex+0x2e0>
 8006a2e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006a32:	9a05      	ldr	r2, [sp, #20]
 8006a34:	2762      	movs	r7, #98	; 0x62
 8006a36:	6013      	str	r3, [r2, #0]
 8006a38:	2301      	movs	r3, #1
 8006a3a:	6123      	str	r3, [r4, #16]
 8006a3c:	f8c9 3000 	str.w	r3, [r9]
 8006a40:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006a42:	601c      	str	r4, [r3, #0]
 8006a44:	e728      	b.n	8006898 <__gethex+0x124>
 8006a46:	bf00      	nop
 8006a48:	0800a050 	.word	0x0800a050
 8006a4c:	08009fd8 	.word	0x08009fd8
 8006a50:	08009fe9 	.word	0x08009fe9
 8006a54:	4620      	mov	r0, r4
 8006a56:	1e71      	subs	r1, r6, #1
 8006a58:	f000 fe4d 	bl	80076f6 <__any_on>
 8006a5c:	2800      	cmp	r0, #0
 8006a5e:	d1e6      	bne.n	8006a2e <__gethex+0x2ba>
 8006a60:	4621      	mov	r1, r4
 8006a62:	9802      	ldr	r0, [sp, #8]
 8006a64:	f000 f9f0 	bl	8006e48 <_Bfree>
 8006a68:	2300      	movs	r3, #0
 8006a6a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006a6c:	2750      	movs	r7, #80	; 0x50
 8006a6e:	6013      	str	r3, [r2, #0]
 8006a70:	e712      	b.n	8006898 <__gethex+0x124>
 8006a72:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d1f3      	bne.n	8006a60 <__gethex+0x2ec>
 8006a78:	e7d9      	b.n	8006a2e <__gethex+0x2ba>
 8006a7a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d1d6      	bne.n	8006a2e <__gethex+0x2ba>
 8006a80:	e7ee      	b.n	8006a60 <__gethex+0x2ec>
 8006a82:	1e6f      	subs	r7, r5, #1
 8006a84:	f1ba 0f00 	cmp.w	sl, #0
 8006a88:	d132      	bne.n	8006af0 <__gethex+0x37c>
 8006a8a:	b127      	cbz	r7, 8006a96 <__gethex+0x322>
 8006a8c:	4639      	mov	r1, r7
 8006a8e:	4620      	mov	r0, r4
 8006a90:	f000 fe31 	bl	80076f6 <__any_on>
 8006a94:	4682      	mov	sl, r0
 8006a96:	2101      	movs	r1, #1
 8006a98:	117b      	asrs	r3, r7, #5
 8006a9a:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8006a9e:	f007 071f 	and.w	r7, r7, #31
 8006aa2:	fa01 f707 	lsl.w	r7, r1, r7
 8006aa6:	421f      	tst	r7, r3
 8006aa8:	f04f 0702 	mov.w	r7, #2
 8006aac:	4629      	mov	r1, r5
 8006aae:	4620      	mov	r0, r4
 8006ab0:	bf18      	it	ne
 8006ab2:	f04a 0a02 	orrne.w	sl, sl, #2
 8006ab6:	1b76      	subs	r6, r6, r5
 8006ab8:	f7ff fdf4 	bl	80066a4 <rshift>
 8006abc:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8006ac0:	f1ba 0f00 	cmp.w	sl, #0
 8006ac4:	d048      	beq.n	8006b58 <__gethex+0x3e4>
 8006ac6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006aca:	2b02      	cmp	r3, #2
 8006acc:	d015      	beq.n	8006afa <__gethex+0x386>
 8006ace:	2b03      	cmp	r3, #3
 8006ad0:	d017      	beq.n	8006b02 <__gethex+0x38e>
 8006ad2:	2b01      	cmp	r3, #1
 8006ad4:	d109      	bne.n	8006aea <__gethex+0x376>
 8006ad6:	f01a 0f02 	tst.w	sl, #2
 8006ada:	d006      	beq.n	8006aea <__gethex+0x376>
 8006adc:	f8d9 0000 	ldr.w	r0, [r9]
 8006ae0:	ea4a 0a00 	orr.w	sl, sl, r0
 8006ae4:	f01a 0f01 	tst.w	sl, #1
 8006ae8:	d10e      	bne.n	8006b08 <__gethex+0x394>
 8006aea:	f047 0710 	orr.w	r7, r7, #16
 8006aee:	e033      	b.n	8006b58 <__gethex+0x3e4>
 8006af0:	f04f 0a01 	mov.w	sl, #1
 8006af4:	e7cf      	b.n	8006a96 <__gethex+0x322>
 8006af6:	2701      	movs	r7, #1
 8006af8:	e7e2      	b.n	8006ac0 <__gethex+0x34c>
 8006afa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006afc:	f1c3 0301 	rsb	r3, r3, #1
 8006b00:	9315      	str	r3, [sp, #84]	; 0x54
 8006b02:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d0f0      	beq.n	8006aea <__gethex+0x376>
 8006b08:	f04f 0c00 	mov.w	ip, #0
 8006b0c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8006b10:	f104 0314 	add.w	r3, r4, #20
 8006b14:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8006b18:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b22:	f1b2 3fff 	cmp.w	r2, #4294967295
 8006b26:	d01c      	beq.n	8006b62 <__gethex+0x3ee>
 8006b28:	3201      	adds	r2, #1
 8006b2a:	6002      	str	r2, [r0, #0]
 8006b2c:	2f02      	cmp	r7, #2
 8006b2e:	f104 0314 	add.w	r3, r4, #20
 8006b32:	d13d      	bne.n	8006bb0 <__gethex+0x43c>
 8006b34:	f8d8 2000 	ldr.w	r2, [r8]
 8006b38:	3a01      	subs	r2, #1
 8006b3a:	42b2      	cmp	r2, r6
 8006b3c:	d10a      	bne.n	8006b54 <__gethex+0x3e0>
 8006b3e:	2201      	movs	r2, #1
 8006b40:	1171      	asrs	r1, r6, #5
 8006b42:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006b46:	f006 061f 	and.w	r6, r6, #31
 8006b4a:	fa02 f606 	lsl.w	r6, r2, r6
 8006b4e:	421e      	tst	r6, r3
 8006b50:	bf18      	it	ne
 8006b52:	4617      	movne	r7, r2
 8006b54:	f047 0720 	orr.w	r7, r7, #32
 8006b58:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006b5a:	601c      	str	r4, [r3, #0]
 8006b5c:	9b05      	ldr	r3, [sp, #20]
 8006b5e:	601d      	str	r5, [r3, #0]
 8006b60:	e69a      	b.n	8006898 <__gethex+0x124>
 8006b62:	4299      	cmp	r1, r3
 8006b64:	f843 cc04 	str.w	ip, [r3, #-4]
 8006b68:	d8d8      	bhi.n	8006b1c <__gethex+0x3a8>
 8006b6a:	68a3      	ldr	r3, [r4, #8]
 8006b6c:	459b      	cmp	fp, r3
 8006b6e:	db17      	blt.n	8006ba0 <__gethex+0x42c>
 8006b70:	6861      	ldr	r1, [r4, #4]
 8006b72:	9802      	ldr	r0, [sp, #8]
 8006b74:	3101      	adds	r1, #1
 8006b76:	f000 f927 	bl	8006dc8 <_Balloc>
 8006b7a:	4681      	mov	r9, r0
 8006b7c:	b918      	cbnz	r0, 8006b86 <__gethex+0x412>
 8006b7e:	4602      	mov	r2, r0
 8006b80:	2184      	movs	r1, #132	; 0x84
 8006b82:	4b19      	ldr	r3, [pc, #100]	; (8006be8 <__gethex+0x474>)
 8006b84:	e6ab      	b.n	80068de <__gethex+0x16a>
 8006b86:	6922      	ldr	r2, [r4, #16]
 8006b88:	f104 010c 	add.w	r1, r4, #12
 8006b8c:	3202      	adds	r2, #2
 8006b8e:	0092      	lsls	r2, r2, #2
 8006b90:	300c      	adds	r0, #12
 8006b92:	f7fd f9bd 	bl	8003f10 <memcpy>
 8006b96:	4621      	mov	r1, r4
 8006b98:	9802      	ldr	r0, [sp, #8]
 8006b9a:	f000 f955 	bl	8006e48 <_Bfree>
 8006b9e:	464c      	mov	r4, r9
 8006ba0:	6923      	ldr	r3, [r4, #16]
 8006ba2:	1c5a      	adds	r2, r3, #1
 8006ba4:	6122      	str	r2, [r4, #16]
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006bac:	615a      	str	r2, [r3, #20]
 8006bae:	e7bd      	b.n	8006b2c <__gethex+0x3b8>
 8006bb0:	6922      	ldr	r2, [r4, #16]
 8006bb2:	455a      	cmp	r2, fp
 8006bb4:	dd0b      	ble.n	8006bce <__gethex+0x45a>
 8006bb6:	2101      	movs	r1, #1
 8006bb8:	4620      	mov	r0, r4
 8006bba:	f7ff fd73 	bl	80066a4 <rshift>
 8006bbe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006bc2:	3501      	adds	r5, #1
 8006bc4:	42ab      	cmp	r3, r5
 8006bc6:	f6ff aed4 	blt.w	8006972 <__gethex+0x1fe>
 8006bca:	2701      	movs	r7, #1
 8006bcc:	e7c2      	b.n	8006b54 <__gethex+0x3e0>
 8006bce:	f016 061f 	ands.w	r6, r6, #31
 8006bd2:	d0fa      	beq.n	8006bca <__gethex+0x456>
 8006bd4:	4453      	add	r3, sl
 8006bd6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8006bda:	f000 f9e7 	bl	8006fac <__hi0bits>
 8006bde:	f1c6 0620 	rsb	r6, r6, #32
 8006be2:	42b0      	cmp	r0, r6
 8006be4:	dbe7      	blt.n	8006bb6 <__gethex+0x442>
 8006be6:	e7f0      	b.n	8006bca <__gethex+0x456>
 8006be8:	08009fd8 	.word	0x08009fd8

08006bec <L_shift>:
 8006bec:	f1c2 0208 	rsb	r2, r2, #8
 8006bf0:	0092      	lsls	r2, r2, #2
 8006bf2:	b570      	push	{r4, r5, r6, lr}
 8006bf4:	f1c2 0620 	rsb	r6, r2, #32
 8006bf8:	6843      	ldr	r3, [r0, #4]
 8006bfa:	6804      	ldr	r4, [r0, #0]
 8006bfc:	fa03 f506 	lsl.w	r5, r3, r6
 8006c00:	432c      	orrs	r4, r5
 8006c02:	40d3      	lsrs	r3, r2
 8006c04:	6004      	str	r4, [r0, #0]
 8006c06:	f840 3f04 	str.w	r3, [r0, #4]!
 8006c0a:	4288      	cmp	r0, r1
 8006c0c:	d3f4      	bcc.n	8006bf8 <L_shift+0xc>
 8006c0e:	bd70      	pop	{r4, r5, r6, pc}

08006c10 <__match>:
 8006c10:	b530      	push	{r4, r5, lr}
 8006c12:	6803      	ldr	r3, [r0, #0]
 8006c14:	3301      	adds	r3, #1
 8006c16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c1a:	b914      	cbnz	r4, 8006c22 <__match+0x12>
 8006c1c:	6003      	str	r3, [r0, #0]
 8006c1e:	2001      	movs	r0, #1
 8006c20:	bd30      	pop	{r4, r5, pc}
 8006c22:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c26:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8006c2a:	2d19      	cmp	r5, #25
 8006c2c:	bf98      	it	ls
 8006c2e:	3220      	addls	r2, #32
 8006c30:	42a2      	cmp	r2, r4
 8006c32:	d0f0      	beq.n	8006c16 <__match+0x6>
 8006c34:	2000      	movs	r0, #0
 8006c36:	e7f3      	b.n	8006c20 <__match+0x10>

08006c38 <__hexnan>:
 8006c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c3c:	2500      	movs	r5, #0
 8006c3e:	680b      	ldr	r3, [r1, #0]
 8006c40:	4682      	mov	sl, r0
 8006c42:	115e      	asrs	r6, r3, #5
 8006c44:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8006c48:	f013 031f 	ands.w	r3, r3, #31
 8006c4c:	bf18      	it	ne
 8006c4e:	3604      	addne	r6, #4
 8006c50:	1f37      	subs	r7, r6, #4
 8006c52:	46b9      	mov	r9, r7
 8006c54:	463c      	mov	r4, r7
 8006c56:	46ab      	mov	fp, r5
 8006c58:	b087      	sub	sp, #28
 8006c5a:	4690      	mov	r8, r2
 8006c5c:	6802      	ldr	r2, [r0, #0]
 8006c5e:	9301      	str	r3, [sp, #4]
 8006c60:	f846 5c04 	str.w	r5, [r6, #-4]
 8006c64:	9502      	str	r5, [sp, #8]
 8006c66:	7851      	ldrb	r1, [r2, #1]
 8006c68:	1c53      	adds	r3, r2, #1
 8006c6a:	9303      	str	r3, [sp, #12]
 8006c6c:	b341      	cbz	r1, 8006cc0 <__hexnan+0x88>
 8006c6e:	4608      	mov	r0, r1
 8006c70:	9205      	str	r2, [sp, #20]
 8006c72:	9104      	str	r1, [sp, #16]
 8006c74:	f7ff fd69 	bl	800674a <__hexdig_fun>
 8006c78:	2800      	cmp	r0, #0
 8006c7a:	d14f      	bne.n	8006d1c <__hexnan+0xe4>
 8006c7c:	9904      	ldr	r1, [sp, #16]
 8006c7e:	9a05      	ldr	r2, [sp, #20]
 8006c80:	2920      	cmp	r1, #32
 8006c82:	d818      	bhi.n	8006cb6 <__hexnan+0x7e>
 8006c84:	9b02      	ldr	r3, [sp, #8]
 8006c86:	459b      	cmp	fp, r3
 8006c88:	dd13      	ble.n	8006cb2 <__hexnan+0x7a>
 8006c8a:	454c      	cmp	r4, r9
 8006c8c:	d206      	bcs.n	8006c9c <__hexnan+0x64>
 8006c8e:	2d07      	cmp	r5, #7
 8006c90:	dc04      	bgt.n	8006c9c <__hexnan+0x64>
 8006c92:	462a      	mov	r2, r5
 8006c94:	4649      	mov	r1, r9
 8006c96:	4620      	mov	r0, r4
 8006c98:	f7ff ffa8 	bl	8006bec <L_shift>
 8006c9c:	4544      	cmp	r4, r8
 8006c9e:	d950      	bls.n	8006d42 <__hexnan+0x10a>
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	f1a4 0904 	sub.w	r9, r4, #4
 8006ca6:	f844 3c04 	str.w	r3, [r4, #-4]
 8006caa:	461d      	mov	r5, r3
 8006cac:	464c      	mov	r4, r9
 8006cae:	f8cd b008 	str.w	fp, [sp, #8]
 8006cb2:	9a03      	ldr	r2, [sp, #12]
 8006cb4:	e7d7      	b.n	8006c66 <__hexnan+0x2e>
 8006cb6:	2929      	cmp	r1, #41	; 0x29
 8006cb8:	d156      	bne.n	8006d68 <__hexnan+0x130>
 8006cba:	3202      	adds	r2, #2
 8006cbc:	f8ca 2000 	str.w	r2, [sl]
 8006cc0:	f1bb 0f00 	cmp.w	fp, #0
 8006cc4:	d050      	beq.n	8006d68 <__hexnan+0x130>
 8006cc6:	454c      	cmp	r4, r9
 8006cc8:	d206      	bcs.n	8006cd8 <__hexnan+0xa0>
 8006cca:	2d07      	cmp	r5, #7
 8006ccc:	dc04      	bgt.n	8006cd8 <__hexnan+0xa0>
 8006cce:	462a      	mov	r2, r5
 8006cd0:	4649      	mov	r1, r9
 8006cd2:	4620      	mov	r0, r4
 8006cd4:	f7ff ff8a 	bl	8006bec <L_shift>
 8006cd8:	4544      	cmp	r4, r8
 8006cda:	d934      	bls.n	8006d46 <__hexnan+0x10e>
 8006cdc:	4623      	mov	r3, r4
 8006cde:	f1a8 0204 	sub.w	r2, r8, #4
 8006ce2:	f853 1b04 	ldr.w	r1, [r3], #4
 8006ce6:	429f      	cmp	r7, r3
 8006ce8:	f842 1f04 	str.w	r1, [r2, #4]!
 8006cec:	d2f9      	bcs.n	8006ce2 <__hexnan+0xaa>
 8006cee:	1b3b      	subs	r3, r7, r4
 8006cf0:	f023 0303 	bic.w	r3, r3, #3
 8006cf4:	3304      	adds	r3, #4
 8006cf6:	3401      	adds	r4, #1
 8006cf8:	3e03      	subs	r6, #3
 8006cfa:	42b4      	cmp	r4, r6
 8006cfc:	bf88      	it	hi
 8006cfe:	2304      	movhi	r3, #4
 8006d00:	2200      	movs	r2, #0
 8006d02:	4443      	add	r3, r8
 8006d04:	f843 2b04 	str.w	r2, [r3], #4
 8006d08:	429f      	cmp	r7, r3
 8006d0a:	d2fb      	bcs.n	8006d04 <__hexnan+0xcc>
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	b91b      	cbnz	r3, 8006d18 <__hexnan+0xe0>
 8006d10:	4547      	cmp	r7, r8
 8006d12:	d127      	bne.n	8006d64 <__hexnan+0x12c>
 8006d14:	2301      	movs	r3, #1
 8006d16:	603b      	str	r3, [r7, #0]
 8006d18:	2005      	movs	r0, #5
 8006d1a:	e026      	b.n	8006d6a <__hexnan+0x132>
 8006d1c:	3501      	adds	r5, #1
 8006d1e:	2d08      	cmp	r5, #8
 8006d20:	f10b 0b01 	add.w	fp, fp, #1
 8006d24:	dd06      	ble.n	8006d34 <__hexnan+0xfc>
 8006d26:	4544      	cmp	r4, r8
 8006d28:	d9c3      	bls.n	8006cb2 <__hexnan+0x7a>
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	2501      	movs	r5, #1
 8006d2e:	f844 3c04 	str.w	r3, [r4, #-4]
 8006d32:	3c04      	subs	r4, #4
 8006d34:	6822      	ldr	r2, [r4, #0]
 8006d36:	f000 000f 	and.w	r0, r0, #15
 8006d3a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8006d3e:	6022      	str	r2, [r4, #0]
 8006d40:	e7b7      	b.n	8006cb2 <__hexnan+0x7a>
 8006d42:	2508      	movs	r5, #8
 8006d44:	e7b5      	b.n	8006cb2 <__hexnan+0x7a>
 8006d46:	9b01      	ldr	r3, [sp, #4]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d0df      	beq.n	8006d0c <__hexnan+0xd4>
 8006d4c:	f04f 32ff 	mov.w	r2, #4294967295
 8006d50:	f1c3 0320 	rsb	r3, r3, #32
 8006d54:	fa22 f303 	lsr.w	r3, r2, r3
 8006d58:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8006d5c:	401a      	ands	r2, r3
 8006d5e:	f846 2c04 	str.w	r2, [r6, #-4]
 8006d62:	e7d3      	b.n	8006d0c <__hexnan+0xd4>
 8006d64:	3f04      	subs	r7, #4
 8006d66:	e7d1      	b.n	8006d0c <__hexnan+0xd4>
 8006d68:	2004      	movs	r0, #4
 8006d6a:	b007      	add	sp, #28
 8006d6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006d70 <_localeconv_r>:
 8006d70:	4800      	ldr	r0, [pc, #0]	; (8006d74 <_localeconv_r+0x4>)
 8006d72:	4770      	bx	lr
 8006d74:	20000174 	.word	0x20000174

08006d78 <malloc>:
 8006d78:	4b02      	ldr	r3, [pc, #8]	; (8006d84 <malloc+0xc>)
 8006d7a:	4601      	mov	r1, r0
 8006d7c:	6818      	ldr	r0, [r3, #0]
 8006d7e:	f000 bd57 	b.w	8007830 <_malloc_r>
 8006d82:	bf00      	nop
 8006d84:	2000001c 	.word	0x2000001c

08006d88 <__ascii_mbtowc>:
 8006d88:	b082      	sub	sp, #8
 8006d8a:	b901      	cbnz	r1, 8006d8e <__ascii_mbtowc+0x6>
 8006d8c:	a901      	add	r1, sp, #4
 8006d8e:	b142      	cbz	r2, 8006da2 <__ascii_mbtowc+0x1a>
 8006d90:	b14b      	cbz	r3, 8006da6 <__ascii_mbtowc+0x1e>
 8006d92:	7813      	ldrb	r3, [r2, #0]
 8006d94:	600b      	str	r3, [r1, #0]
 8006d96:	7812      	ldrb	r2, [r2, #0]
 8006d98:	1e10      	subs	r0, r2, #0
 8006d9a:	bf18      	it	ne
 8006d9c:	2001      	movne	r0, #1
 8006d9e:	b002      	add	sp, #8
 8006da0:	4770      	bx	lr
 8006da2:	4610      	mov	r0, r2
 8006da4:	e7fb      	b.n	8006d9e <__ascii_mbtowc+0x16>
 8006da6:	f06f 0001 	mvn.w	r0, #1
 8006daa:	e7f8      	b.n	8006d9e <__ascii_mbtowc+0x16>

08006dac <memchr>:
 8006dac:	4603      	mov	r3, r0
 8006dae:	b510      	push	{r4, lr}
 8006db0:	b2c9      	uxtb	r1, r1
 8006db2:	4402      	add	r2, r0
 8006db4:	4293      	cmp	r3, r2
 8006db6:	4618      	mov	r0, r3
 8006db8:	d101      	bne.n	8006dbe <memchr+0x12>
 8006dba:	2000      	movs	r0, #0
 8006dbc:	e003      	b.n	8006dc6 <memchr+0x1a>
 8006dbe:	7804      	ldrb	r4, [r0, #0]
 8006dc0:	3301      	adds	r3, #1
 8006dc2:	428c      	cmp	r4, r1
 8006dc4:	d1f6      	bne.n	8006db4 <memchr+0x8>
 8006dc6:	bd10      	pop	{r4, pc}

08006dc8 <_Balloc>:
 8006dc8:	b570      	push	{r4, r5, r6, lr}
 8006dca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006dcc:	4604      	mov	r4, r0
 8006dce:	460d      	mov	r5, r1
 8006dd0:	b976      	cbnz	r6, 8006df0 <_Balloc+0x28>
 8006dd2:	2010      	movs	r0, #16
 8006dd4:	f7ff ffd0 	bl	8006d78 <malloc>
 8006dd8:	4602      	mov	r2, r0
 8006dda:	6260      	str	r0, [r4, #36]	; 0x24
 8006ddc:	b920      	cbnz	r0, 8006de8 <_Balloc+0x20>
 8006dde:	2166      	movs	r1, #102	; 0x66
 8006de0:	4b17      	ldr	r3, [pc, #92]	; (8006e40 <_Balloc+0x78>)
 8006de2:	4818      	ldr	r0, [pc, #96]	; (8006e44 <_Balloc+0x7c>)
 8006de4:	f000 ff2c 	bl	8007c40 <__assert_func>
 8006de8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006dec:	6006      	str	r6, [r0, #0]
 8006dee:	60c6      	str	r6, [r0, #12]
 8006df0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006df2:	68f3      	ldr	r3, [r6, #12]
 8006df4:	b183      	cbz	r3, 8006e18 <_Balloc+0x50>
 8006df6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006df8:	68db      	ldr	r3, [r3, #12]
 8006dfa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006dfe:	b9b8      	cbnz	r0, 8006e30 <_Balloc+0x68>
 8006e00:	2101      	movs	r1, #1
 8006e02:	fa01 f605 	lsl.w	r6, r1, r5
 8006e06:	1d72      	adds	r2, r6, #5
 8006e08:	4620      	mov	r0, r4
 8006e0a:	0092      	lsls	r2, r2, #2
 8006e0c:	f000 fc94 	bl	8007738 <_calloc_r>
 8006e10:	b160      	cbz	r0, 8006e2c <_Balloc+0x64>
 8006e12:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006e16:	e00e      	b.n	8006e36 <_Balloc+0x6e>
 8006e18:	2221      	movs	r2, #33	; 0x21
 8006e1a:	2104      	movs	r1, #4
 8006e1c:	4620      	mov	r0, r4
 8006e1e:	f000 fc8b 	bl	8007738 <_calloc_r>
 8006e22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e24:	60f0      	str	r0, [r6, #12]
 8006e26:	68db      	ldr	r3, [r3, #12]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d1e4      	bne.n	8006df6 <_Balloc+0x2e>
 8006e2c:	2000      	movs	r0, #0
 8006e2e:	bd70      	pop	{r4, r5, r6, pc}
 8006e30:	6802      	ldr	r2, [r0, #0]
 8006e32:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006e36:	2300      	movs	r3, #0
 8006e38:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006e3c:	e7f7      	b.n	8006e2e <_Balloc+0x66>
 8006e3e:	bf00      	nop
 8006e40:	08009f66 	.word	0x08009f66
 8006e44:	0800a064 	.word	0x0800a064

08006e48 <_Bfree>:
 8006e48:	b570      	push	{r4, r5, r6, lr}
 8006e4a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006e4c:	4605      	mov	r5, r0
 8006e4e:	460c      	mov	r4, r1
 8006e50:	b976      	cbnz	r6, 8006e70 <_Bfree+0x28>
 8006e52:	2010      	movs	r0, #16
 8006e54:	f7ff ff90 	bl	8006d78 <malloc>
 8006e58:	4602      	mov	r2, r0
 8006e5a:	6268      	str	r0, [r5, #36]	; 0x24
 8006e5c:	b920      	cbnz	r0, 8006e68 <_Bfree+0x20>
 8006e5e:	218a      	movs	r1, #138	; 0x8a
 8006e60:	4b08      	ldr	r3, [pc, #32]	; (8006e84 <_Bfree+0x3c>)
 8006e62:	4809      	ldr	r0, [pc, #36]	; (8006e88 <_Bfree+0x40>)
 8006e64:	f000 feec 	bl	8007c40 <__assert_func>
 8006e68:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006e6c:	6006      	str	r6, [r0, #0]
 8006e6e:	60c6      	str	r6, [r0, #12]
 8006e70:	b13c      	cbz	r4, 8006e82 <_Bfree+0x3a>
 8006e72:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006e74:	6862      	ldr	r2, [r4, #4]
 8006e76:	68db      	ldr	r3, [r3, #12]
 8006e78:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006e7c:	6021      	str	r1, [r4, #0]
 8006e7e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006e82:	bd70      	pop	{r4, r5, r6, pc}
 8006e84:	08009f66 	.word	0x08009f66
 8006e88:	0800a064 	.word	0x0800a064

08006e8c <__multadd>:
 8006e8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e90:	4607      	mov	r7, r0
 8006e92:	460c      	mov	r4, r1
 8006e94:	461e      	mov	r6, r3
 8006e96:	2000      	movs	r0, #0
 8006e98:	690d      	ldr	r5, [r1, #16]
 8006e9a:	f101 0c14 	add.w	ip, r1, #20
 8006e9e:	f8dc 3000 	ldr.w	r3, [ip]
 8006ea2:	3001      	adds	r0, #1
 8006ea4:	b299      	uxth	r1, r3
 8006ea6:	fb02 6101 	mla	r1, r2, r1, r6
 8006eaa:	0c1e      	lsrs	r6, r3, #16
 8006eac:	0c0b      	lsrs	r3, r1, #16
 8006eae:	fb02 3306 	mla	r3, r2, r6, r3
 8006eb2:	b289      	uxth	r1, r1
 8006eb4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006eb8:	4285      	cmp	r5, r0
 8006eba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006ebe:	f84c 1b04 	str.w	r1, [ip], #4
 8006ec2:	dcec      	bgt.n	8006e9e <__multadd+0x12>
 8006ec4:	b30e      	cbz	r6, 8006f0a <__multadd+0x7e>
 8006ec6:	68a3      	ldr	r3, [r4, #8]
 8006ec8:	42ab      	cmp	r3, r5
 8006eca:	dc19      	bgt.n	8006f00 <__multadd+0x74>
 8006ecc:	6861      	ldr	r1, [r4, #4]
 8006ece:	4638      	mov	r0, r7
 8006ed0:	3101      	adds	r1, #1
 8006ed2:	f7ff ff79 	bl	8006dc8 <_Balloc>
 8006ed6:	4680      	mov	r8, r0
 8006ed8:	b928      	cbnz	r0, 8006ee6 <__multadd+0x5a>
 8006eda:	4602      	mov	r2, r0
 8006edc:	21b5      	movs	r1, #181	; 0xb5
 8006ede:	4b0c      	ldr	r3, [pc, #48]	; (8006f10 <__multadd+0x84>)
 8006ee0:	480c      	ldr	r0, [pc, #48]	; (8006f14 <__multadd+0x88>)
 8006ee2:	f000 fead 	bl	8007c40 <__assert_func>
 8006ee6:	6922      	ldr	r2, [r4, #16]
 8006ee8:	f104 010c 	add.w	r1, r4, #12
 8006eec:	3202      	adds	r2, #2
 8006eee:	0092      	lsls	r2, r2, #2
 8006ef0:	300c      	adds	r0, #12
 8006ef2:	f7fd f80d 	bl	8003f10 <memcpy>
 8006ef6:	4621      	mov	r1, r4
 8006ef8:	4638      	mov	r0, r7
 8006efa:	f7ff ffa5 	bl	8006e48 <_Bfree>
 8006efe:	4644      	mov	r4, r8
 8006f00:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006f04:	3501      	adds	r5, #1
 8006f06:	615e      	str	r6, [r3, #20]
 8006f08:	6125      	str	r5, [r4, #16]
 8006f0a:	4620      	mov	r0, r4
 8006f0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f10:	08009fd8 	.word	0x08009fd8
 8006f14:	0800a064 	.word	0x0800a064

08006f18 <__s2b>:
 8006f18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f1c:	4615      	mov	r5, r2
 8006f1e:	2209      	movs	r2, #9
 8006f20:	461f      	mov	r7, r3
 8006f22:	3308      	adds	r3, #8
 8006f24:	460c      	mov	r4, r1
 8006f26:	fb93 f3f2 	sdiv	r3, r3, r2
 8006f2a:	4606      	mov	r6, r0
 8006f2c:	2201      	movs	r2, #1
 8006f2e:	2100      	movs	r1, #0
 8006f30:	429a      	cmp	r2, r3
 8006f32:	db09      	blt.n	8006f48 <__s2b+0x30>
 8006f34:	4630      	mov	r0, r6
 8006f36:	f7ff ff47 	bl	8006dc8 <_Balloc>
 8006f3a:	b940      	cbnz	r0, 8006f4e <__s2b+0x36>
 8006f3c:	4602      	mov	r2, r0
 8006f3e:	21ce      	movs	r1, #206	; 0xce
 8006f40:	4b18      	ldr	r3, [pc, #96]	; (8006fa4 <__s2b+0x8c>)
 8006f42:	4819      	ldr	r0, [pc, #100]	; (8006fa8 <__s2b+0x90>)
 8006f44:	f000 fe7c 	bl	8007c40 <__assert_func>
 8006f48:	0052      	lsls	r2, r2, #1
 8006f4a:	3101      	adds	r1, #1
 8006f4c:	e7f0      	b.n	8006f30 <__s2b+0x18>
 8006f4e:	9b08      	ldr	r3, [sp, #32]
 8006f50:	2d09      	cmp	r5, #9
 8006f52:	6143      	str	r3, [r0, #20]
 8006f54:	f04f 0301 	mov.w	r3, #1
 8006f58:	6103      	str	r3, [r0, #16]
 8006f5a:	dd16      	ble.n	8006f8a <__s2b+0x72>
 8006f5c:	f104 0909 	add.w	r9, r4, #9
 8006f60:	46c8      	mov	r8, r9
 8006f62:	442c      	add	r4, r5
 8006f64:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006f68:	4601      	mov	r1, r0
 8006f6a:	220a      	movs	r2, #10
 8006f6c:	4630      	mov	r0, r6
 8006f6e:	3b30      	subs	r3, #48	; 0x30
 8006f70:	f7ff ff8c 	bl	8006e8c <__multadd>
 8006f74:	45a0      	cmp	r8, r4
 8006f76:	d1f5      	bne.n	8006f64 <__s2b+0x4c>
 8006f78:	f1a5 0408 	sub.w	r4, r5, #8
 8006f7c:	444c      	add	r4, r9
 8006f7e:	1b2d      	subs	r5, r5, r4
 8006f80:	1963      	adds	r3, r4, r5
 8006f82:	42bb      	cmp	r3, r7
 8006f84:	db04      	blt.n	8006f90 <__s2b+0x78>
 8006f86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f8a:	2509      	movs	r5, #9
 8006f8c:	340a      	adds	r4, #10
 8006f8e:	e7f6      	b.n	8006f7e <__s2b+0x66>
 8006f90:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006f94:	4601      	mov	r1, r0
 8006f96:	220a      	movs	r2, #10
 8006f98:	4630      	mov	r0, r6
 8006f9a:	3b30      	subs	r3, #48	; 0x30
 8006f9c:	f7ff ff76 	bl	8006e8c <__multadd>
 8006fa0:	e7ee      	b.n	8006f80 <__s2b+0x68>
 8006fa2:	bf00      	nop
 8006fa4:	08009fd8 	.word	0x08009fd8
 8006fa8:	0800a064 	.word	0x0800a064

08006fac <__hi0bits>:
 8006fac:	0c02      	lsrs	r2, r0, #16
 8006fae:	0412      	lsls	r2, r2, #16
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	b9ca      	cbnz	r2, 8006fe8 <__hi0bits+0x3c>
 8006fb4:	0403      	lsls	r3, r0, #16
 8006fb6:	2010      	movs	r0, #16
 8006fb8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006fbc:	bf04      	itt	eq
 8006fbe:	021b      	lsleq	r3, r3, #8
 8006fc0:	3008      	addeq	r0, #8
 8006fc2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006fc6:	bf04      	itt	eq
 8006fc8:	011b      	lsleq	r3, r3, #4
 8006fca:	3004      	addeq	r0, #4
 8006fcc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006fd0:	bf04      	itt	eq
 8006fd2:	009b      	lsleq	r3, r3, #2
 8006fd4:	3002      	addeq	r0, #2
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	db05      	blt.n	8006fe6 <__hi0bits+0x3a>
 8006fda:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8006fde:	f100 0001 	add.w	r0, r0, #1
 8006fe2:	bf08      	it	eq
 8006fe4:	2020      	moveq	r0, #32
 8006fe6:	4770      	bx	lr
 8006fe8:	2000      	movs	r0, #0
 8006fea:	e7e5      	b.n	8006fb8 <__hi0bits+0xc>

08006fec <__lo0bits>:
 8006fec:	6803      	ldr	r3, [r0, #0]
 8006fee:	4602      	mov	r2, r0
 8006ff0:	f013 0007 	ands.w	r0, r3, #7
 8006ff4:	d00b      	beq.n	800700e <__lo0bits+0x22>
 8006ff6:	07d9      	lsls	r1, r3, #31
 8006ff8:	d421      	bmi.n	800703e <__lo0bits+0x52>
 8006ffa:	0798      	lsls	r0, r3, #30
 8006ffc:	bf49      	itett	mi
 8006ffe:	085b      	lsrmi	r3, r3, #1
 8007000:	089b      	lsrpl	r3, r3, #2
 8007002:	2001      	movmi	r0, #1
 8007004:	6013      	strmi	r3, [r2, #0]
 8007006:	bf5c      	itt	pl
 8007008:	2002      	movpl	r0, #2
 800700a:	6013      	strpl	r3, [r2, #0]
 800700c:	4770      	bx	lr
 800700e:	b299      	uxth	r1, r3
 8007010:	b909      	cbnz	r1, 8007016 <__lo0bits+0x2a>
 8007012:	2010      	movs	r0, #16
 8007014:	0c1b      	lsrs	r3, r3, #16
 8007016:	b2d9      	uxtb	r1, r3
 8007018:	b909      	cbnz	r1, 800701e <__lo0bits+0x32>
 800701a:	3008      	adds	r0, #8
 800701c:	0a1b      	lsrs	r3, r3, #8
 800701e:	0719      	lsls	r1, r3, #28
 8007020:	bf04      	itt	eq
 8007022:	091b      	lsreq	r3, r3, #4
 8007024:	3004      	addeq	r0, #4
 8007026:	0799      	lsls	r1, r3, #30
 8007028:	bf04      	itt	eq
 800702a:	089b      	lsreq	r3, r3, #2
 800702c:	3002      	addeq	r0, #2
 800702e:	07d9      	lsls	r1, r3, #31
 8007030:	d403      	bmi.n	800703a <__lo0bits+0x4e>
 8007032:	085b      	lsrs	r3, r3, #1
 8007034:	f100 0001 	add.w	r0, r0, #1
 8007038:	d003      	beq.n	8007042 <__lo0bits+0x56>
 800703a:	6013      	str	r3, [r2, #0]
 800703c:	4770      	bx	lr
 800703e:	2000      	movs	r0, #0
 8007040:	4770      	bx	lr
 8007042:	2020      	movs	r0, #32
 8007044:	4770      	bx	lr
	...

08007048 <__i2b>:
 8007048:	b510      	push	{r4, lr}
 800704a:	460c      	mov	r4, r1
 800704c:	2101      	movs	r1, #1
 800704e:	f7ff febb 	bl	8006dc8 <_Balloc>
 8007052:	4602      	mov	r2, r0
 8007054:	b928      	cbnz	r0, 8007062 <__i2b+0x1a>
 8007056:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800705a:	4b04      	ldr	r3, [pc, #16]	; (800706c <__i2b+0x24>)
 800705c:	4804      	ldr	r0, [pc, #16]	; (8007070 <__i2b+0x28>)
 800705e:	f000 fdef 	bl	8007c40 <__assert_func>
 8007062:	2301      	movs	r3, #1
 8007064:	6144      	str	r4, [r0, #20]
 8007066:	6103      	str	r3, [r0, #16]
 8007068:	bd10      	pop	{r4, pc}
 800706a:	bf00      	nop
 800706c:	08009fd8 	.word	0x08009fd8
 8007070:	0800a064 	.word	0x0800a064

08007074 <__multiply>:
 8007074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007078:	4691      	mov	r9, r2
 800707a:	690a      	ldr	r2, [r1, #16]
 800707c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007080:	460c      	mov	r4, r1
 8007082:	429a      	cmp	r2, r3
 8007084:	bfbe      	ittt	lt
 8007086:	460b      	movlt	r3, r1
 8007088:	464c      	movlt	r4, r9
 800708a:	4699      	movlt	r9, r3
 800708c:	6927      	ldr	r7, [r4, #16]
 800708e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007092:	68a3      	ldr	r3, [r4, #8]
 8007094:	6861      	ldr	r1, [r4, #4]
 8007096:	eb07 060a 	add.w	r6, r7, sl
 800709a:	42b3      	cmp	r3, r6
 800709c:	b085      	sub	sp, #20
 800709e:	bfb8      	it	lt
 80070a0:	3101      	addlt	r1, #1
 80070a2:	f7ff fe91 	bl	8006dc8 <_Balloc>
 80070a6:	b930      	cbnz	r0, 80070b6 <__multiply+0x42>
 80070a8:	4602      	mov	r2, r0
 80070aa:	f240 115d 	movw	r1, #349	; 0x15d
 80070ae:	4b43      	ldr	r3, [pc, #268]	; (80071bc <__multiply+0x148>)
 80070b0:	4843      	ldr	r0, [pc, #268]	; (80071c0 <__multiply+0x14c>)
 80070b2:	f000 fdc5 	bl	8007c40 <__assert_func>
 80070b6:	f100 0514 	add.w	r5, r0, #20
 80070ba:	462b      	mov	r3, r5
 80070bc:	2200      	movs	r2, #0
 80070be:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80070c2:	4543      	cmp	r3, r8
 80070c4:	d321      	bcc.n	800710a <__multiply+0x96>
 80070c6:	f104 0314 	add.w	r3, r4, #20
 80070ca:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80070ce:	f109 0314 	add.w	r3, r9, #20
 80070d2:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80070d6:	9202      	str	r2, [sp, #8]
 80070d8:	1b3a      	subs	r2, r7, r4
 80070da:	3a15      	subs	r2, #21
 80070dc:	f022 0203 	bic.w	r2, r2, #3
 80070e0:	3204      	adds	r2, #4
 80070e2:	f104 0115 	add.w	r1, r4, #21
 80070e6:	428f      	cmp	r7, r1
 80070e8:	bf38      	it	cc
 80070ea:	2204      	movcc	r2, #4
 80070ec:	9201      	str	r2, [sp, #4]
 80070ee:	9a02      	ldr	r2, [sp, #8]
 80070f0:	9303      	str	r3, [sp, #12]
 80070f2:	429a      	cmp	r2, r3
 80070f4:	d80c      	bhi.n	8007110 <__multiply+0x9c>
 80070f6:	2e00      	cmp	r6, #0
 80070f8:	dd03      	ble.n	8007102 <__multiply+0x8e>
 80070fa:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d059      	beq.n	80071b6 <__multiply+0x142>
 8007102:	6106      	str	r6, [r0, #16]
 8007104:	b005      	add	sp, #20
 8007106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800710a:	f843 2b04 	str.w	r2, [r3], #4
 800710e:	e7d8      	b.n	80070c2 <__multiply+0x4e>
 8007110:	f8b3 a000 	ldrh.w	sl, [r3]
 8007114:	f1ba 0f00 	cmp.w	sl, #0
 8007118:	d023      	beq.n	8007162 <__multiply+0xee>
 800711a:	46a9      	mov	r9, r5
 800711c:	f04f 0c00 	mov.w	ip, #0
 8007120:	f104 0e14 	add.w	lr, r4, #20
 8007124:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007128:	f8d9 1000 	ldr.w	r1, [r9]
 800712c:	fa1f fb82 	uxth.w	fp, r2
 8007130:	b289      	uxth	r1, r1
 8007132:	fb0a 110b 	mla	r1, sl, fp, r1
 8007136:	4461      	add	r1, ip
 8007138:	f8d9 c000 	ldr.w	ip, [r9]
 800713c:	0c12      	lsrs	r2, r2, #16
 800713e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007142:	fb0a c202 	mla	r2, sl, r2, ip
 8007146:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800714a:	b289      	uxth	r1, r1
 800714c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007150:	4577      	cmp	r7, lr
 8007152:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007156:	f849 1b04 	str.w	r1, [r9], #4
 800715a:	d8e3      	bhi.n	8007124 <__multiply+0xb0>
 800715c:	9a01      	ldr	r2, [sp, #4]
 800715e:	f845 c002 	str.w	ip, [r5, r2]
 8007162:	9a03      	ldr	r2, [sp, #12]
 8007164:	3304      	adds	r3, #4
 8007166:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800716a:	f1b9 0f00 	cmp.w	r9, #0
 800716e:	d020      	beq.n	80071b2 <__multiply+0x13e>
 8007170:	46ae      	mov	lr, r5
 8007172:	f04f 0a00 	mov.w	sl, #0
 8007176:	6829      	ldr	r1, [r5, #0]
 8007178:	f104 0c14 	add.w	ip, r4, #20
 800717c:	f8bc b000 	ldrh.w	fp, [ip]
 8007180:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007184:	b289      	uxth	r1, r1
 8007186:	fb09 220b 	mla	r2, r9, fp, r2
 800718a:	4492      	add	sl, r2
 800718c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007190:	f84e 1b04 	str.w	r1, [lr], #4
 8007194:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007198:	f8be 1000 	ldrh.w	r1, [lr]
 800719c:	0c12      	lsrs	r2, r2, #16
 800719e:	fb09 1102 	mla	r1, r9, r2, r1
 80071a2:	4567      	cmp	r7, ip
 80071a4:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80071a8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80071ac:	d8e6      	bhi.n	800717c <__multiply+0x108>
 80071ae:	9a01      	ldr	r2, [sp, #4]
 80071b0:	50a9      	str	r1, [r5, r2]
 80071b2:	3504      	adds	r5, #4
 80071b4:	e79b      	b.n	80070ee <__multiply+0x7a>
 80071b6:	3e01      	subs	r6, #1
 80071b8:	e79d      	b.n	80070f6 <__multiply+0x82>
 80071ba:	bf00      	nop
 80071bc:	08009fd8 	.word	0x08009fd8
 80071c0:	0800a064 	.word	0x0800a064

080071c4 <__pow5mult>:
 80071c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071c8:	4615      	mov	r5, r2
 80071ca:	f012 0203 	ands.w	r2, r2, #3
 80071ce:	4606      	mov	r6, r0
 80071d0:	460f      	mov	r7, r1
 80071d2:	d007      	beq.n	80071e4 <__pow5mult+0x20>
 80071d4:	4c25      	ldr	r4, [pc, #148]	; (800726c <__pow5mult+0xa8>)
 80071d6:	3a01      	subs	r2, #1
 80071d8:	2300      	movs	r3, #0
 80071da:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80071de:	f7ff fe55 	bl	8006e8c <__multadd>
 80071e2:	4607      	mov	r7, r0
 80071e4:	10ad      	asrs	r5, r5, #2
 80071e6:	d03d      	beq.n	8007264 <__pow5mult+0xa0>
 80071e8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80071ea:	b97c      	cbnz	r4, 800720c <__pow5mult+0x48>
 80071ec:	2010      	movs	r0, #16
 80071ee:	f7ff fdc3 	bl	8006d78 <malloc>
 80071f2:	4602      	mov	r2, r0
 80071f4:	6270      	str	r0, [r6, #36]	; 0x24
 80071f6:	b928      	cbnz	r0, 8007204 <__pow5mult+0x40>
 80071f8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80071fc:	4b1c      	ldr	r3, [pc, #112]	; (8007270 <__pow5mult+0xac>)
 80071fe:	481d      	ldr	r0, [pc, #116]	; (8007274 <__pow5mult+0xb0>)
 8007200:	f000 fd1e 	bl	8007c40 <__assert_func>
 8007204:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007208:	6004      	str	r4, [r0, #0]
 800720a:	60c4      	str	r4, [r0, #12]
 800720c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007210:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007214:	b94c      	cbnz	r4, 800722a <__pow5mult+0x66>
 8007216:	f240 2171 	movw	r1, #625	; 0x271
 800721a:	4630      	mov	r0, r6
 800721c:	f7ff ff14 	bl	8007048 <__i2b>
 8007220:	2300      	movs	r3, #0
 8007222:	4604      	mov	r4, r0
 8007224:	f8c8 0008 	str.w	r0, [r8, #8]
 8007228:	6003      	str	r3, [r0, #0]
 800722a:	f04f 0900 	mov.w	r9, #0
 800722e:	07eb      	lsls	r3, r5, #31
 8007230:	d50a      	bpl.n	8007248 <__pow5mult+0x84>
 8007232:	4639      	mov	r1, r7
 8007234:	4622      	mov	r2, r4
 8007236:	4630      	mov	r0, r6
 8007238:	f7ff ff1c 	bl	8007074 <__multiply>
 800723c:	4680      	mov	r8, r0
 800723e:	4639      	mov	r1, r7
 8007240:	4630      	mov	r0, r6
 8007242:	f7ff fe01 	bl	8006e48 <_Bfree>
 8007246:	4647      	mov	r7, r8
 8007248:	106d      	asrs	r5, r5, #1
 800724a:	d00b      	beq.n	8007264 <__pow5mult+0xa0>
 800724c:	6820      	ldr	r0, [r4, #0]
 800724e:	b938      	cbnz	r0, 8007260 <__pow5mult+0x9c>
 8007250:	4622      	mov	r2, r4
 8007252:	4621      	mov	r1, r4
 8007254:	4630      	mov	r0, r6
 8007256:	f7ff ff0d 	bl	8007074 <__multiply>
 800725a:	6020      	str	r0, [r4, #0]
 800725c:	f8c0 9000 	str.w	r9, [r0]
 8007260:	4604      	mov	r4, r0
 8007262:	e7e4      	b.n	800722e <__pow5mult+0x6a>
 8007264:	4638      	mov	r0, r7
 8007266:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800726a:	bf00      	nop
 800726c:	0800a1b0 	.word	0x0800a1b0
 8007270:	08009f66 	.word	0x08009f66
 8007274:	0800a064 	.word	0x0800a064

08007278 <__lshift>:
 8007278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800727c:	460c      	mov	r4, r1
 800727e:	4607      	mov	r7, r0
 8007280:	4691      	mov	r9, r2
 8007282:	6923      	ldr	r3, [r4, #16]
 8007284:	6849      	ldr	r1, [r1, #4]
 8007286:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800728a:	68a3      	ldr	r3, [r4, #8]
 800728c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007290:	f108 0601 	add.w	r6, r8, #1
 8007294:	42b3      	cmp	r3, r6
 8007296:	db0b      	blt.n	80072b0 <__lshift+0x38>
 8007298:	4638      	mov	r0, r7
 800729a:	f7ff fd95 	bl	8006dc8 <_Balloc>
 800729e:	4605      	mov	r5, r0
 80072a0:	b948      	cbnz	r0, 80072b6 <__lshift+0x3e>
 80072a2:	4602      	mov	r2, r0
 80072a4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80072a8:	4b29      	ldr	r3, [pc, #164]	; (8007350 <__lshift+0xd8>)
 80072aa:	482a      	ldr	r0, [pc, #168]	; (8007354 <__lshift+0xdc>)
 80072ac:	f000 fcc8 	bl	8007c40 <__assert_func>
 80072b0:	3101      	adds	r1, #1
 80072b2:	005b      	lsls	r3, r3, #1
 80072b4:	e7ee      	b.n	8007294 <__lshift+0x1c>
 80072b6:	2300      	movs	r3, #0
 80072b8:	f100 0114 	add.w	r1, r0, #20
 80072bc:	f100 0210 	add.w	r2, r0, #16
 80072c0:	4618      	mov	r0, r3
 80072c2:	4553      	cmp	r3, sl
 80072c4:	db37      	blt.n	8007336 <__lshift+0xbe>
 80072c6:	6920      	ldr	r0, [r4, #16]
 80072c8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80072cc:	f104 0314 	add.w	r3, r4, #20
 80072d0:	f019 091f 	ands.w	r9, r9, #31
 80072d4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80072d8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80072dc:	d02f      	beq.n	800733e <__lshift+0xc6>
 80072de:	468a      	mov	sl, r1
 80072e0:	f04f 0c00 	mov.w	ip, #0
 80072e4:	f1c9 0e20 	rsb	lr, r9, #32
 80072e8:	681a      	ldr	r2, [r3, #0]
 80072ea:	fa02 f209 	lsl.w	r2, r2, r9
 80072ee:	ea42 020c 	orr.w	r2, r2, ip
 80072f2:	f84a 2b04 	str.w	r2, [sl], #4
 80072f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80072fa:	4298      	cmp	r0, r3
 80072fc:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007300:	d8f2      	bhi.n	80072e8 <__lshift+0x70>
 8007302:	1b03      	subs	r3, r0, r4
 8007304:	3b15      	subs	r3, #21
 8007306:	f023 0303 	bic.w	r3, r3, #3
 800730a:	3304      	adds	r3, #4
 800730c:	f104 0215 	add.w	r2, r4, #21
 8007310:	4290      	cmp	r0, r2
 8007312:	bf38      	it	cc
 8007314:	2304      	movcc	r3, #4
 8007316:	f841 c003 	str.w	ip, [r1, r3]
 800731a:	f1bc 0f00 	cmp.w	ip, #0
 800731e:	d001      	beq.n	8007324 <__lshift+0xac>
 8007320:	f108 0602 	add.w	r6, r8, #2
 8007324:	3e01      	subs	r6, #1
 8007326:	4638      	mov	r0, r7
 8007328:	4621      	mov	r1, r4
 800732a:	612e      	str	r6, [r5, #16]
 800732c:	f7ff fd8c 	bl	8006e48 <_Bfree>
 8007330:	4628      	mov	r0, r5
 8007332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007336:	f842 0f04 	str.w	r0, [r2, #4]!
 800733a:	3301      	adds	r3, #1
 800733c:	e7c1      	b.n	80072c2 <__lshift+0x4a>
 800733e:	3904      	subs	r1, #4
 8007340:	f853 2b04 	ldr.w	r2, [r3], #4
 8007344:	4298      	cmp	r0, r3
 8007346:	f841 2f04 	str.w	r2, [r1, #4]!
 800734a:	d8f9      	bhi.n	8007340 <__lshift+0xc8>
 800734c:	e7ea      	b.n	8007324 <__lshift+0xac>
 800734e:	bf00      	nop
 8007350:	08009fd8 	.word	0x08009fd8
 8007354:	0800a064 	.word	0x0800a064

08007358 <__mcmp>:
 8007358:	4603      	mov	r3, r0
 800735a:	690a      	ldr	r2, [r1, #16]
 800735c:	6900      	ldr	r0, [r0, #16]
 800735e:	b530      	push	{r4, r5, lr}
 8007360:	1a80      	subs	r0, r0, r2
 8007362:	d10d      	bne.n	8007380 <__mcmp+0x28>
 8007364:	3314      	adds	r3, #20
 8007366:	3114      	adds	r1, #20
 8007368:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800736c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007370:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007374:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007378:	4295      	cmp	r5, r2
 800737a:	d002      	beq.n	8007382 <__mcmp+0x2a>
 800737c:	d304      	bcc.n	8007388 <__mcmp+0x30>
 800737e:	2001      	movs	r0, #1
 8007380:	bd30      	pop	{r4, r5, pc}
 8007382:	42a3      	cmp	r3, r4
 8007384:	d3f4      	bcc.n	8007370 <__mcmp+0x18>
 8007386:	e7fb      	b.n	8007380 <__mcmp+0x28>
 8007388:	f04f 30ff 	mov.w	r0, #4294967295
 800738c:	e7f8      	b.n	8007380 <__mcmp+0x28>
	...

08007390 <__mdiff>:
 8007390:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007394:	460d      	mov	r5, r1
 8007396:	4607      	mov	r7, r0
 8007398:	4611      	mov	r1, r2
 800739a:	4628      	mov	r0, r5
 800739c:	4614      	mov	r4, r2
 800739e:	f7ff ffdb 	bl	8007358 <__mcmp>
 80073a2:	1e06      	subs	r6, r0, #0
 80073a4:	d111      	bne.n	80073ca <__mdiff+0x3a>
 80073a6:	4631      	mov	r1, r6
 80073a8:	4638      	mov	r0, r7
 80073aa:	f7ff fd0d 	bl	8006dc8 <_Balloc>
 80073ae:	4602      	mov	r2, r0
 80073b0:	b928      	cbnz	r0, 80073be <__mdiff+0x2e>
 80073b2:	f240 2132 	movw	r1, #562	; 0x232
 80073b6:	4b3a      	ldr	r3, [pc, #232]	; (80074a0 <__mdiff+0x110>)
 80073b8:	483a      	ldr	r0, [pc, #232]	; (80074a4 <__mdiff+0x114>)
 80073ba:	f000 fc41 	bl	8007c40 <__assert_func>
 80073be:	2301      	movs	r3, #1
 80073c0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80073c4:	4610      	mov	r0, r2
 80073c6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073ca:	bfa4      	itt	ge
 80073cc:	4623      	movge	r3, r4
 80073ce:	462c      	movge	r4, r5
 80073d0:	4638      	mov	r0, r7
 80073d2:	6861      	ldr	r1, [r4, #4]
 80073d4:	bfa6      	itte	ge
 80073d6:	461d      	movge	r5, r3
 80073d8:	2600      	movge	r6, #0
 80073da:	2601      	movlt	r6, #1
 80073dc:	f7ff fcf4 	bl	8006dc8 <_Balloc>
 80073e0:	4602      	mov	r2, r0
 80073e2:	b918      	cbnz	r0, 80073ec <__mdiff+0x5c>
 80073e4:	f44f 7110 	mov.w	r1, #576	; 0x240
 80073e8:	4b2d      	ldr	r3, [pc, #180]	; (80074a0 <__mdiff+0x110>)
 80073ea:	e7e5      	b.n	80073b8 <__mdiff+0x28>
 80073ec:	f102 0814 	add.w	r8, r2, #20
 80073f0:	46c2      	mov	sl, r8
 80073f2:	f04f 0c00 	mov.w	ip, #0
 80073f6:	6927      	ldr	r7, [r4, #16]
 80073f8:	60c6      	str	r6, [r0, #12]
 80073fa:	692e      	ldr	r6, [r5, #16]
 80073fc:	f104 0014 	add.w	r0, r4, #20
 8007400:	f105 0914 	add.w	r9, r5, #20
 8007404:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8007408:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800740c:	3410      	adds	r4, #16
 800740e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8007412:	f859 3b04 	ldr.w	r3, [r9], #4
 8007416:	fa1f f18b 	uxth.w	r1, fp
 800741a:	448c      	add	ip, r1
 800741c:	b299      	uxth	r1, r3
 800741e:	0c1b      	lsrs	r3, r3, #16
 8007420:	ebac 0101 	sub.w	r1, ip, r1
 8007424:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007428:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800742c:	b289      	uxth	r1, r1
 800742e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8007432:	454e      	cmp	r6, r9
 8007434:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007438:	f84a 3b04 	str.w	r3, [sl], #4
 800743c:	d8e7      	bhi.n	800740e <__mdiff+0x7e>
 800743e:	1b73      	subs	r3, r6, r5
 8007440:	3b15      	subs	r3, #21
 8007442:	f023 0303 	bic.w	r3, r3, #3
 8007446:	3515      	adds	r5, #21
 8007448:	3304      	adds	r3, #4
 800744a:	42ae      	cmp	r6, r5
 800744c:	bf38      	it	cc
 800744e:	2304      	movcc	r3, #4
 8007450:	4418      	add	r0, r3
 8007452:	4443      	add	r3, r8
 8007454:	461e      	mov	r6, r3
 8007456:	4605      	mov	r5, r0
 8007458:	4575      	cmp	r5, lr
 800745a:	d30e      	bcc.n	800747a <__mdiff+0xea>
 800745c:	f10e 0103 	add.w	r1, lr, #3
 8007460:	1a09      	subs	r1, r1, r0
 8007462:	f021 0103 	bic.w	r1, r1, #3
 8007466:	3803      	subs	r0, #3
 8007468:	4586      	cmp	lr, r0
 800746a:	bf38      	it	cc
 800746c:	2100      	movcc	r1, #0
 800746e:	4419      	add	r1, r3
 8007470:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8007474:	b18b      	cbz	r3, 800749a <__mdiff+0x10a>
 8007476:	6117      	str	r7, [r2, #16]
 8007478:	e7a4      	b.n	80073c4 <__mdiff+0x34>
 800747a:	f855 8b04 	ldr.w	r8, [r5], #4
 800747e:	fa1f f188 	uxth.w	r1, r8
 8007482:	4461      	add	r1, ip
 8007484:	140c      	asrs	r4, r1, #16
 8007486:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800748a:	b289      	uxth	r1, r1
 800748c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007490:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8007494:	f846 1b04 	str.w	r1, [r6], #4
 8007498:	e7de      	b.n	8007458 <__mdiff+0xc8>
 800749a:	3f01      	subs	r7, #1
 800749c:	e7e8      	b.n	8007470 <__mdiff+0xe0>
 800749e:	bf00      	nop
 80074a0:	08009fd8 	.word	0x08009fd8
 80074a4:	0800a064 	.word	0x0800a064

080074a8 <__ulp>:
 80074a8:	4b11      	ldr	r3, [pc, #68]	; (80074f0 <__ulp+0x48>)
 80074aa:	400b      	ands	r3, r1
 80074ac:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	dd02      	ble.n	80074ba <__ulp+0x12>
 80074b4:	2000      	movs	r0, #0
 80074b6:	4619      	mov	r1, r3
 80074b8:	4770      	bx	lr
 80074ba:	425b      	negs	r3, r3
 80074bc:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80074c0:	f04f 0000 	mov.w	r0, #0
 80074c4:	f04f 0100 	mov.w	r1, #0
 80074c8:	ea4f 5223 	mov.w	r2, r3, asr #20
 80074cc:	da04      	bge.n	80074d8 <__ulp+0x30>
 80074ce:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80074d2:	fa43 f102 	asr.w	r1, r3, r2
 80074d6:	4770      	bx	lr
 80074d8:	f1a2 0314 	sub.w	r3, r2, #20
 80074dc:	2b1e      	cmp	r3, #30
 80074de:	bfd6      	itet	le
 80074e0:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80074e4:	2301      	movgt	r3, #1
 80074e6:	fa22 f303 	lsrle.w	r3, r2, r3
 80074ea:	4618      	mov	r0, r3
 80074ec:	4770      	bx	lr
 80074ee:	bf00      	nop
 80074f0:	7ff00000 	.word	0x7ff00000

080074f4 <__b2d>:
 80074f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074f8:	6907      	ldr	r7, [r0, #16]
 80074fa:	f100 0914 	add.w	r9, r0, #20
 80074fe:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8007502:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8007506:	f1a7 0804 	sub.w	r8, r7, #4
 800750a:	4630      	mov	r0, r6
 800750c:	f7ff fd4e 	bl	8006fac <__hi0bits>
 8007510:	f1c0 0320 	rsb	r3, r0, #32
 8007514:	280a      	cmp	r0, #10
 8007516:	600b      	str	r3, [r1, #0]
 8007518:	491f      	ldr	r1, [pc, #124]	; (8007598 <__b2d+0xa4>)
 800751a:	dc17      	bgt.n	800754c <__b2d+0x58>
 800751c:	45c1      	cmp	r9, r8
 800751e:	bf28      	it	cs
 8007520:	2200      	movcs	r2, #0
 8007522:	f1c0 0c0b 	rsb	ip, r0, #11
 8007526:	fa26 f30c 	lsr.w	r3, r6, ip
 800752a:	bf38      	it	cc
 800752c:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8007530:	ea43 0501 	orr.w	r5, r3, r1
 8007534:	f100 0315 	add.w	r3, r0, #21
 8007538:	fa06 f303 	lsl.w	r3, r6, r3
 800753c:	fa22 f20c 	lsr.w	r2, r2, ip
 8007540:	ea43 0402 	orr.w	r4, r3, r2
 8007544:	4620      	mov	r0, r4
 8007546:	4629      	mov	r1, r5
 8007548:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800754c:	45c1      	cmp	r9, r8
 800754e:	bf2e      	itee	cs
 8007550:	2200      	movcs	r2, #0
 8007552:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8007556:	f1a7 0808 	subcc.w	r8, r7, #8
 800755a:	f1b0 030b 	subs.w	r3, r0, #11
 800755e:	d016      	beq.n	800758e <__b2d+0x9a>
 8007560:	f1c3 0720 	rsb	r7, r3, #32
 8007564:	fa22 f107 	lsr.w	r1, r2, r7
 8007568:	45c8      	cmp	r8, r9
 800756a:	fa06 f603 	lsl.w	r6, r6, r3
 800756e:	ea46 0601 	orr.w	r6, r6, r1
 8007572:	bf94      	ite	ls
 8007574:	2100      	movls	r1, #0
 8007576:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800757a:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800757e:	fa02 f003 	lsl.w	r0, r2, r3
 8007582:	40f9      	lsrs	r1, r7
 8007584:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007588:	ea40 0401 	orr.w	r4, r0, r1
 800758c:	e7da      	b.n	8007544 <__b2d+0x50>
 800758e:	4614      	mov	r4, r2
 8007590:	ea46 0501 	orr.w	r5, r6, r1
 8007594:	e7d6      	b.n	8007544 <__b2d+0x50>
 8007596:	bf00      	nop
 8007598:	3ff00000 	.word	0x3ff00000

0800759c <__d2b>:
 800759c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80075a0:	2101      	movs	r1, #1
 80075a2:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80075a6:	4690      	mov	r8, r2
 80075a8:	461d      	mov	r5, r3
 80075aa:	f7ff fc0d 	bl	8006dc8 <_Balloc>
 80075ae:	4604      	mov	r4, r0
 80075b0:	b930      	cbnz	r0, 80075c0 <__d2b+0x24>
 80075b2:	4602      	mov	r2, r0
 80075b4:	f240 310a 	movw	r1, #778	; 0x30a
 80075b8:	4b24      	ldr	r3, [pc, #144]	; (800764c <__d2b+0xb0>)
 80075ba:	4825      	ldr	r0, [pc, #148]	; (8007650 <__d2b+0xb4>)
 80075bc:	f000 fb40 	bl	8007c40 <__assert_func>
 80075c0:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80075c4:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80075c8:	bb2d      	cbnz	r5, 8007616 <__d2b+0x7a>
 80075ca:	9301      	str	r3, [sp, #4]
 80075cc:	f1b8 0300 	subs.w	r3, r8, #0
 80075d0:	d026      	beq.n	8007620 <__d2b+0x84>
 80075d2:	4668      	mov	r0, sp
 80075d4:	9300      	str	r3, [sp, #0]
 80075d6:	f7ff fd09 	bl	8006fec <__lo0bits>
 80075da:	9900      	ldr	r1, [sp, #0]
 80075dc:	b1f0      	cbz	r0, 800761c <__d2b+0x80>
 80075de:	9a01      	ldr	r2, [sp, #4]
 80075e0:	f1c0 0320 	rsb	r3, r0, #32
 80075e4:	fa02 f303 	lsl.w	r3, r2, r3
 80075e8:	430b      	orrs	r3, r1
 80075ea:	40c2      	lsrs	r2, r0
 80075ec:	6163      	str	r3, [r4, #20]
 80075ee:	9201      	str	r2, [sp, #4]
 80075f0:	9b01      	ldr	r3, [sp, #4]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	bf14      	ite	ne
 80075f6:	2102      	movne	r1, #2
 80075f8:	2101      	moveq	r1, #1
 80075fa:	61a3      	str	r3, [r4, #24]
 80075fc:	6121      	str	r1, [r4, #16]
 80075fe:	b1c5      	cbz	r5, 8007632 <__d2b+0x96>
 8007600:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007604:	4405      	add	r5, r0
 8007606:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800760a:	603d      	str	r5, [r7, #0]
 800760c:	6030      	str	r0, [r6, #0]
 800760e:	4620      	mov	r0, r4
 8007610:	b002      	add	sp, #8
 8007612:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007616:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800761a:	e7d6      	b.n	80075ca <__d2b+0x2e>
 800761c:	6161      	str	r1, [r4, #20]
 800761e:	e7e7      	b.n	80075f0 <__d2b+0x54>
 8007620:	a801      	add	r0, sp, #4
 8007622:	f7ff fce3 	bl	8006fec <__lo0bits>
 8007626:	2101      	movs	r1, #1
 8007628:	9b01      	ldr	r3, [sp, #4]
 800762a:	6121      	str	r1, [r4, #16]
 800762c:	6163      	str	r3, [r4, #20]
 800762e:	3020      	adds	r0, #32
 8007630:	e7e5      	b.n	80075fe <__d2b+0x62>
 8007632:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8007636:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800763a:	6038      	str	r0, [r7, #0]
 800763c:	6918      	ldr	r0, [r3, #16]
 800763e:	f7ff fcb5 	bl	8006fac <__hi0bits>
 8007642:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8007646:	6031      	str	r1, [r6, #0]
 8007648:	e7e1      	b.n	800760e <__d2b+0x72>
 800764a:	bf00      	nop
 800764c:	08009fd8 	.word	0x08009fd8
 8007650:	0800a064 	.word	0x0800a064

08007654 <__ratio>:
 8007654:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007658:	4688      	mov	r8, r1
 800765a:	4669      	mov	r1, sp
 800765c:	4681      	mov	r9, r0
 800765e:	f7ff ff49 	bl	80074f4 <__b2d>
 8007662:	460f      	mov	r7, r1
 8007664:	4604      	mov	r4, r0
 8007666:	460d      	mov	r5, r1
 8007668:	4640      	mov	r0, r8
 800766a:	a901      	add	r1, sp, #4
 800766c:	f7ff ff42 	bl	80074f4 <__b2d>
 8007670:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007674:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007678:	468b      	mov	fp, r1
 800767a:	eba3 0c02 	sub.w	ip, r3, r2
 800767e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007682:	1a9b      	subs	r3, r3, r2
 8007684:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007688:	2b00      	cmp	r3, #0
 800768a:	bfd5      	itete	le
 800768c:	460a      	movle	r2, r1
 800768e:	462a      	movgt	r2, r5
 8007690:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007694:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007698:	bfd8      	it	le
 800769a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800769e:	465b      	mov	r3, fp
 80076a0:	4602      	mov	r2, r0
 80076a2:	4639      	mov	r1, r7
 80076a4:	4620      	mov	r0, r4
 80076a6:	f7f9 f841 	bl	800072c <__aeabi_ddiv>
 80076aa:	b003      	add	sp, #12
 80076ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080076b0 <__copybits>:
 80076b0:	3901      	subs	r1, #1
 80076b2:	b570      	push	{r4, r5, r6, lr}
 80076b4:	1149      	asrs	r1, r1, #5
 80076b6:	6914      	ldr	r4, [r2, #16]
 80076b8:	3101      	adds	r1, #1
 80076ba:	f102 0314 	add.w	r3, r2, #20
 80076be:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80076c2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80076c6:	1f05      	subs	r5, r0, #4
 80076c8:	42a3      	cmp	r3, r4
 80076ca:	d30c      	bcc.n	80076e6 <__copybits+0x36>
 80076cc:	1aa3      	subs	r3, r4, r2
 80076ce:	3b11      	subs	r3, #17
 80076d0:	f023 0303 	bic.w	r3, r3, #3
 80076d4:	3211      	adds	r2, #17
 80076d6:	42a2      	cmp	r2, r4
 80076d8:	bf88      	it	hi
 80076da:	2300      	movhi	r3, #0
 80076dc:	4418      	add	r0, r3
 80076de:	2300      	movs	r3, #0
 80076e0:	4288      	cmp	r0, r1
 80076e2:	d305      	bcc.n	80076f0 <__copybits+0x40>
 80076e4:	bd70      	pop	{r4, r5, r6, pc}
 80076e6:	f853 6b04 	ldr.w	r6, [r3], #4
 80076ea:	f845 6f04 	str.w	r6, [r5, #4]!
 80076ee:	e7eb      	b.n	80076c8 <__copybits+0x18>
 80076f0:	f840 3b04 	str.w	r3, [r0], #4
 80076f4:	e7f4      	b.n	80076e0 <__copybits+0x30>

080076f6 <__any_on>:
 80076f6:	f100 0214 	add.w	r2, r0, #20
 80076fa:	6900      	ldr	r0, [r0, #16]
 80076fc:	114b      	asrs	r3, r1, #5
 80076fe:	4298      	cmp	r0, r3
 8007700:	b510      	push	{r4, lr}
 8007702:	db11      	blt.n	8007728 <__any_on+0x32>
 8007704:	dd0a      	ble.n	800771c <__any_on+0x26>
 8007706:	f011 011f 	ands.w	r1, r1, #31
 800770a:	d007      	beq.n	800771c <__any_on+0x26>
 800770c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007710:	fa24 f001 	lsr.w	r0, r4, r1
 8007714:	fa00 f101 	lsl.w	r1, r0, r1
 8007718:	428c      	cmp	r4, r1
 800771a:	d10b      	bne.n	8007734 <__any_on+0x3e>
 800771c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007720:	4293      	cmp	r3, r2
 8007722:	d803      	bhi.n	800772c <__any_on+0x36>
 8007724:	2000      	movs	r0, #0
 8007726:	bd10      	pop	{r4, pc}
 8007728:	4603      	mov	r3, r0
 800772a:	e7f7      	b.n	800771c <__any_on+0x26>
 800772c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007730:	2900      	cmp	r1, #0
 8007732:	d0f5      	beq.n	8007720 <__any_on+0x2a>
 8007734:	2001      	movs	r0, #1
 8007736:	e7f6      	b.n	8007726 <__any_on+0x30>

08007738 <_calloc_r>:
 8007738:	b570      	push	{r4, r5, r6, lr}
 800773a:	fba1 5402 	umull	r5, r4, r1, r2
 800773e:	b934      	cbnz	r4, 800774e <_calloc_r+0x16>
 8007740:	4629      	mov	r1, r5
 8007742:	f000 f875 	bl	8007830 <_malloc_r>
 8007746:	4606      	mov	r6, r0
 8007748:	b928      	cbnz	r0, 8007756 <_calloc_r+0x1e>
 800774a:	4630      	mov	r0, r6
 800774c:	bd70      	pop	{r4, r5, r6, pc}
 800774e:	220c      	movs	r2, #12
 8007750:	2600      	movs	r6, #0
 8007752:	6002      	str	r2, [r0, #0]
 8007754:	e7f9      	b.n	800774a <_calloc_r+0x12>
 8007756:	462a      	mov	r2, r5
 8007758:	4621      	mov	r1, r4
 800775a:	f7fc fc01 	bl	8003f60 <memset>
 800775e:	e7f4      	b.n	800774a <_calloc_r+0x12>

08007760 <_free_r>:
 8007760:	b538      	push	{r3, r4, r5, lr}
 8007762:	4605      	mov	r5, r0
 8007764:	2900      	cmp	r1, #0
 8007766:	d040      	beq.n	80077ea <_free_r+0x8a>
 8007768:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800776c:	1f0c      	subs	r4, r1, #4
 800776e:	2b00      	cmp	r3, #0
 8007770:	bfb8      	it	lt
 8007772:	18e4      	addlt	r4, r4, r3
 8007774:	f000 fa94 	bl	8007ca0 <__malloc_lock>
 8007778:	4a1c      	ldr	r2, [pc, #112]	; (80077ec <_free_r+0x8c>)
 800777a:	6813      	ldr	r3, [r2, #0]
 800777c:	b933      	cbnz	r3, 800778c <_free_r+0x2c>
 800777e:	6063      	str	r3, [r4, #4]
 8007780:	6014      	str	r4, [r2, #0]
 8007782:	4628      	mov	r0, r5
 8007784:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007788:	f000 ba90 	b.w	8007cac <__malloc_unlock>
 800778c:	42a3      	cmp	r3, r4
 800778e:	d908      	bls.n	80077a2 <_free_r+0x42>
 8007790:	6820      	ldr	r0, [r4, #0]
 8007792:	1821      	adds	r1, r4, r0
 8007794:	428b      	cmp	r3, r1
 8007796:	bf01      	itttt	eq
 8007798:	6819      	ldreq	r1, [r3, #0]
 800779a:	685b      	ldreq	r3, [r3, #4]
 800779c:	1809      	addeq	r1, r1, r0
 800779e:	6021      	streq	r1, [r4, #0]
 80077a0:	e7ed      	b.n	800777e <_free_r+0x1e>
 80077a2:	461a      	mov	r2, r3
 80077a4:	685b      	ldr	r3, [r3, #4]
 80077a6:	b10b      	cbz	r3, 80077ac <_free_r+0x4c>
 80077a8:	42a3      	cmp	r3, r4
 80077aa:	d9fa      	bls.n	80077a2 <_free_r+0x42>
 80077ac:	6811      	ldr	r1, [r2, #0]
 80077ae:	1850      	adds	r0, r2, r1
 80077b0:	42a0      	cmp	r0, r4
 80077b2:	d10b      	bne.n	80077cc <_free_r+0x6c>
 80077b4:	6820      	ldr	r0, [r4, #0]
 80077b6:	4401      	add	r1, r0
 80077b8:	1850      	adds	r0, r2, r1
 80077ba:	4283      	cmp	r3, r0
 80077bc:	6011      	str	r1, [r2, #0]
 80077be:	d1e0      	bne.n	8007782 <_free_r+0x22>
 80077c0:	6818      	ldr	r0, [r3, #0]
 80077c2:	685b      	ldr	r3, [r3, #4]
 80077c4:	4401      	add	r1, r0
 80077c6:	6011      	str	r1, [r2, #0]
 80077c8:	6053      	str	r3, [r2, #4]
 80077ca:	e7da      	b.n	8007782 <_free_r+0x22>
 80077cc:	d902      	bls.n	80077d4 <_free_r+0x74>
 80077ce:	230c      	movs	r3, #12
 80077d0:	602b      	str	r3, [r5, #0]
 80077d2:	e7d6      	b.n	8007782 <_free_r+0x22>
 80077d4:	6820      	ldr	r0, [r4, #0]
 80077d6:	1821      	adds	r1, r4, r0
 80077d8:	428b      	cmp	r3, r1
 80077da:	bf01      	itttt	eq
 80077dc:	6819      	ldreq	r1, [r3, #0]
 80077de:	685b      	ldreq	r3, [r3, #4]
 80077e0:	1809      	addeq	r1, r1, r0
 80077e2:	6021      	streq	r1, [r4, #0]
 80077e4:	6063      	str	r3, [r4, #4]
 80077e6:	6054      	str	r4, [r2, #4]
 80077e8:	e7cb      	b.n	8007782 <_free_r+0x22>
 80077ea:	bd38      	pop	{r3, r4, r5, pc}
 80077ec:	20000738 	.word	0x20000738

080077f0 <sbrk_aligned>:
 80077f0:	b570      	push	{r4, r5, r6, lr}
 80077f2:	4e0e      	ldr	r6, [pc, #56]	; (800782c <sbrk_aligned+0x3c>)
 80077f4:	460c      	mov	r4, r1
 80077f6:	6831      	ldr	r1, [r6, #0]
 80077f8:	4605      	mov	r5, r0
 80077fa:	b911      	cbnz	r1, 8007802 <sbrk_aligned+0x12>
 80077fc:	f000 f9ee 	bl	8007bdc <_sbrk_r>
 8007800:	6030      	str	r0, [r6, #0]
 8007802:	4621      	mov	r1, r4
 8007804:	4628      	mov	r0, r5
 8007806:	f000 f9e9 	bl	8007bdc <_sbrk_r>
 800780a:	1c43      	adds	r3, r0, #1
 800780c:	d00a      	beq.n	8007824 <sbrk_aligned+0x34>
 800780e:	1cc4      	adds	r4, r0, #3
 8007810:	f024 0403 	bic.w	r4, r4, #3
 8007814:	42a0      	cmp	r0, r4
 8007816:	d007      	beq.n	8007828 <sbrk_aligned+0x38>
 8007818:	1a21      	subs	r1, r4, r0
 800781a:	4628      	mov	r0, r5
 800781c:	f000 f9de 	bl	8007bdc <_sbrk_r>
 8007820:	3001      	adds	r0, #1
 8007822:	d101      	bne.n	8007828 <sbrk_aligned+0x38>
 8007824:	f04f 34ff 	mov.w	r4, #4294967295
 8007828:	4620      	mov	r0, r4
 800782a:	bd70      	pop	{r4, r5, r6, pc}
 800782c:	2000073c 	.word	0x2000073c

08007830 <_malloc_r>:
 8007830:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007834:	1ccd      	adds	r5, r1, #3
 8007836:	f025 0503 	bic.w	r5, r5, #3
 800783a:	3508      	adds	r5, #8
 800783c:	2d0c      	cmp	r5, #12
 800783e:	bf38      	it	cc
 8007840:	250c      	movcc	r5, #12
 8007842:	2d00      	cmp	r5, #0
 8007844:	4607      	mov	r7, r0
 8007846:	db01      	blt.n	800784c <_malloc_r+0x1c>
 8007848:	42a9      	cmp	r1, r5
 800784a:	d905      	bls.n	8007858 <_malloc_r+0x28>
 800784c:	230c      	movs	r3, #12
 800784e:	2600      	movs	r6, #0
 8007850:	603b      	str	r3, [r7, #0]
 8007852:	4630      	mov	r0, r6
 8007854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007858:	4e2e      	ldr	r6, [pc, #184]	; (8007914 <_malloc_r+0xe4>)
 800785a:	f000 fa21 	bl	8007ca0 <__malloc_lock>
 800785e:	6833      	ldr	r3, [r6, #0]
 8007860:	461c      	mov	r4, r3
 8007862:	bb34      	cbnz	r4, 80078b2 <_malloc_r+0x82>
 8007864:	4629      	mov	r1, r5
 8007866:	4638      	mov	r0, r7
 8007868:	f7ff ffc2 	bl	80077f0 <sbrk_aligned>
 800786c:	1c43      	adds	r3, r0, #1
 800786e:	4604      	mov	r4, r0
 8007870:	d14d      	bne.n	800790e <_malloc_r+0xde>
 8007872:	6834      	ldr	r4, [r6, #0]
 8007874:	4626      	mov	r6, r4
 8007876:	2e00      	cmp	r6, #0
 8007878:	d140      	bne.n	80078fc <_malloc_r+0xcc>
 800787a:	6823      	ldr	r3, [r4, #0]
 800787c:	4631      	mov	r1, r6
 800787e:	4638      	mov	r0, r7
 8007880:	eb04 0803 	add.w	r8, r4, r3
 8007884:	f000 f9aa 	bl	8007bdc <_sbrk_r>
 8007888:	4580      	cmp	r8, r0
 800788a:	d13a      	bne.n	8007902 <_malloc_r+0xd2>
 800788c:	6821      	ldr	r1, [r4, #0]
 800788e:	3503      	adds	r5, #3
 8007890:	1a6d      	subs	r5, r5, r1
 8007892:	f025 0503 	bic.w	r5, r5, #3
 8007896:	3508      	adds	r5, #8
 8007898:	2d0c      	cmp	r5, #12
 800789a:	bf38      	it	cc
 800789c:	250c      	movcc	r5, #12
 800789e:	4638      	mov	r0, r7
 80078a0:	4629      	mov	r1, r5
 80078a2:	f7ff ffa5 	bl	80077f0 <sbrk_aligned>
 80078a6:	3001      	adds	r0, #1
 80078a8:	d02b      	beq.n	8007902 <_malloc_r+0xd2>
 80078aa:	6823      	ldr	r3, [r4, #0]
 80078ac:	442b      	add	r3, r5
 80078ae:	6023      	str	r3, [r4, #0]
 80078b0:	e00e      	b.n	80078d0 <_malloc_r+0xa0>
 80078b2:	6822      	ldr	r2, [r4, #0]
 80078b4:	1b52      	subs	r2, r2, r5
 80078b6:	d41e      	bmi.n	80078f6 <_malloc_r+0xc6>
 80078b8:	2a0b      	cmp	r2, #11
 80078ba:	d916      	bls.n	80078ea <_malloc_r+0xba>
 80078bc:	1961      	adds	r1, r4, r5
 80078be:	42a3      	cmp	r3, r4
 80078c0:	6025      	str	r5, [r4, #0]
 80078c2:	bf18      	it	ne
 80078c4:	6059      	strne	r1, [r3, #4]
 80078c6:	6863      	ldr	r3, [r4, #4]
 80078c8:	bf08      	it	eq
 80078ca:	6031      	streq	r1, [r6, #0]
 80078cc:	5162      	str	r2, [r4, r5]
 80078ce:	604b      	str	r3, [r1, #4]
 80078d0:	4638      	mov	r0, r7
 80078d2:	f104 060b 	add.w	r6, r4, #11
 80078d6:	f000 f9e9 	bl	8007cac <__malloc_unlock>
 80078da:	f026 0607 	bic.w	r6, r6, #7
 80078de:	1d23      	adds	r3, r4, #4
 80078e0:	1af2      	subs	r2, r6, r3
 80078e2:	d0b6      	beq.n	8007852 <_malloc_r+0x22>
 80078e4:	1b9b      	subs	r3, r3, r6
 80078e6:	50a3      	str	r3, [r4, r2]
 80078e8:	e7b3      	b.n	8007852 <_malloc_r+0x22>
 80078ea:	6862      	ldr	r2, [r4, #4]
 80078ec:	42a3      	cmp	r3, r4
 80078ee:	bf0c      	ite	eq
 80078f0:	6032      	streq	r2, [r6, #0]
 80078f2:	605a      	strne	r2, [r3, #4]
 80078f4:	e7ec      	b.n	80078d0 <_malloc_r+0xa0>
 80078f6:	4623      	mov	r3, r4
 80078f8:	6864      	ldr	r4, [r4, #4]
 80078fa:	e7b2      	b.n	8007862 <_malloc_r+0x32>
 80078fc:	4634      	mov	r4, r6
 80078fe:	6876      	ldr	r6, [r6, #4]
 8007900:	e7b9      	b.n	8007876 <_malloc_r+0x46>
 8007902:	230c      	movs	r3, #12
 8007904:	4638      	mov	r0, r7
 8007906:	603b      	str	r3, [r7, #0]
 8007908:	f000 f9d0 	bl	8007cac <__malloc_unlock>
 800790c:	e7a1      	b.n	8007852 <_malloc_r+0x22>
 800790e:	6025      	str	r5, [r4, #0]
 8007910:	e7de      	b.n	80078d0 <_malloc_r+0xa0>
 8007912:	bf00      	nop
 8007914:	20000738 	.word	0x20000738

08007918 <__ssputs_r>:
 8007918:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800791c:	688e      	ldr	r6, [r1, #8]
 800791e:	4682      	mov	sl, r0
 8007920:	429e      	cmp	r6, r3
 8007922:	460c      	mov	r4, r1
 8007924:	4690      	mov	r8, r2
 8007926:	461f      	mov	r7, r3
 8007928:	d838      	bhi.n	800799c <__ssputs_r+0x84>
 800792a:	898a      	ldrh	r2, [r1, #12]
 800792c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007930:	d032      	beq.n	8007998 <__ssputs_r+0x80>
 8007932:	6825      	ldr	r5, [r4, #0]
 8007934:	6909      	ldr	r1, [r1, #16]
 8007936:	3301      	adds	r3, #1
 8007938:	eba5 0901 	sub.w	r9, r5, r1
 800793c:	6965      	ldr	r5, [r4, #20]
 800793e:	444b      	add	r3, r9
 8007940:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007944:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007948:	106d      	asrs	r5, r5, #1
 800794a:	429d      	cmp	r5, r3
 800794c:	bf38      	it	cc
 800794e:	461d      	movcc	r5, r3
 8007950:	0553      	lsls	r3, r2, #21
 8007952:	d531      	bpl.n	80079b8 <__ssputs_r+0xa0>
 8007954:	4629      	mov	r1, r5
 8007956:	f7ff ff6b 	bl	8007830 <_malloc_r>
 800795a:	4606      	mov	r6, r0
 800795c:	b950      	cbnz	r0, 8007974 <__ssputs_r+0x5c>
 800795e:	230c      	movs	r3, #12
 8007960:	f04f 30ff 	mov.w	r0, #4294967295
 8007964:	f8ca 3000 	str.w	r3, [sl]
 8007968:	89a3      	ldrh	r3, [r4, #12]
 800796a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800796e:	81a3      	strh	r3, [r4, #12]
 8007970:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007974:	464a      	mov	r2, r9
 8007976:	6921      	ldr	r1, [r4, #16]
 8007978:	f7fc faca 	bl	8003f10 <memcpy>
 800797c:	89a3      	ldrh	r3, [r4, #12]
 800797e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007982:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007986:	81a3      	strh	r3, [r4, #12]
 8007988:	6126      	str	r6, [r4, #16]
 800798a:	444e      	add	r6, r9
 800798c:	6026      	str	r6, [r4, #0]
 800798e:	463e      	mov	r6, r7
 8007990:	6165      	str	r5, [r4, #20]
 8007992:	eba5 0509 	sub.w	r5, r5, r9
 8007996:	60a5      	str	r5, [r4, #8]
 8007998:	42be      	cmp	r6, r7
 800799a:	d900      	bls.n	800799e <__ssputs_r+0x86>
 800799c:	463e      	mov	r6, r7
 800799e:	4632      	mov	r2, r6
 80079a0:	4641      	mov	r1, r8
 80079a2:	6820      	ldr	r0, [r4, #0]
 80079a4:	f7fc fac2 	bl	8003f2c <memmove>
 80079a8:	68a3      	ldr	r3, [r4, #8]
 80079aa:	2000      	movs	r0, #0
 80079ac:	1b9b      	subs	r3, r3, r6
 80079ae:	60a3      	str	r3, [r4, #8]
 80079b0:	6823      	ldr	r3, [r4, #0]
 80079b2:	4433      	add	r3, r6
 80079b4:	6023      	str	r3, [r4, #0]
 80079b6:	e7db      	b.n	8007970 <__ssputs_r+0x58>
 80079b8:	462a      	mov	r2, r5
 80079ba:	f000 f97d 	bl	8007cb8 <_realloc_r>
 80079be:	4606      	mov	r6, r0
 80079c0:	2800      	cmp	r0, #0
 80079c2:	d1e1      	bne.n	8007988 <__ssputs_r+0x70>
 80079c4:	4650      	mov	r0, sl
 80079c6:	6921      	ldr	r1, [r4, #16]
 80079c8:	f7ff feca 	bl	8007760 <_free_r>
 80079cc:	e7c7      	b.n	800795e <__ssputs_r+0x46>
	...

080079d0 <_svfiprintf_r>:
 80079d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079d4:	4698      	mov	r8, r3
 80079d6:	898b      	ldrh	r3, [r1, #12]
 80079d8:	4607      	mov	r7, r0
 80079da:	061b      	lsls	r3, r3, #24
 80079dc:	460d      	mov	r5, r1
 80079de:	4614      	mov	r4, r2
 80079e0:	b09d      	sub	sp, #116	; 0x74
 80079e2:	d50e      	bpl.n	8007a02 <_svfiprintf_r+0x32>
 80079e4:	690b      	ldr	r3, [r1, #16]
 80079e6:	b963      	cbnz	r3, 8007a02 <_svfiprintf_r+0x32>
 80079e8:	2140      	movs	r1, #64	; 0x40
 80079ea:	f7ff ff21 	bl	8007830 <_malloc_r>
 80079ee:	6028      	str	r0, [r5, #0]
 80079f0:	6128      	str	r0, [r5, #16]
 80079f2:	b920      	cbnz	r0, 80079fe <_svfiprintf_r+0x2e>
 80079f4:	230c      	movs	r3, #12
 80079f6:	603b      	str	r3, [r7, #0]
 80079f8:	f04f 30ff 	mov.w	r0, #4294967295
 80079fc:	e0d1      	b.n	8007ba2 <_svfiprintf_r+0x1d2>
 80079fe:	2340      	movs	r3, #64	; 0x40
 8007a00:	616b      	str	r3, [r5, #20]
 8007a02:	2300      	movs	r3, #0
 8007a04:	9309      	str	r3, [sp, #36]	; 0x24
 8007a06:	2320      	movs	r3, #32
 8007a08:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007a0c:	2330      	movs	r3, #48	; 0x30
 8007a0e:	f04f 0901 	mov.w	r9, #1
 8007a12:	f8cd 800c 	str.w	r8, [sp, #12]
 8007a16:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007bbc <_svfiprintf_r+0x1ec>
 8007a1a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007a1e:	4623      	mov	r3, r4
 8007a20:	469a      	mov	sl, r3
 8007a22:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a26:	b10a      	cbz	r2, 8007a2c <_svfiprintf_r+0x5c>
 8007a28:	2a25      	cmp	r2, #37	; 0x25
 8007a2a:	d1f9      	bne.n	8007a20 <_svfiprintf_r+0x50>
 8007a2c:	ebba 0b04 	subs.w	fp, sl, r4
 8007a30:	d00b      	beq.n	8007a4a <_svfiprintf_r+0x7a>
 8007a32:	465b      	mov	r3, fp
 8007a34:	4622      	mov	r2, r4
 8007a36:	4629      	mov	r1, r5
 8007a38:	4638      	mov	r0, r7
 8007a3a:	f7ff ff6d 	bl	8007918 <__ssputs_r>
 8007a3e:	3001      	adds	r0, #1
 8007a40:	f000 80aa 	beq.w	8007b98 <_svfiprintf_r+0x1c8>
 8007a44:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a46:	445a      	add	r2, fp
 8007a48:	9209      	str	r2, [sp, #36]	; 0x24
 8007a4a:	f89a 3000 	ldrb.w	r3, [sl]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	f000 80a2 	beq.w	8007b98 <_svfiprintf_r+0x1c8>
 8007a54:	2300      	movs	r3, #0
 8007a56:	f04f 32ff 	mov.w	r2, #4294967295
 8007a5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a5e:	f10a 0a01 	add.w	sl, sl, #1
 8007a62:	9304      	str	r3, [sp, #16]
 8007a64:	9307      	str	r3, [sp, #28]
 8007a66:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007a6a:	931a      	str	r3, [sp, #104]	; 0x68
 8007a6c:	4654      	mov	r4, sl
 8007a6e:	2205      	movs	r2, #5
 8007a70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a74:	4851      	ldr	r0, [pc, #324]	; (8007bbc <_svfiprintf_r+0x1ec>)
 8007a76:	f7ff f999 	bl	8006dac <memchr>
 8007a7a:	9a04      	ldr	r2, [sp, #16]
 8007a7c:	b9d8      	cbnz	r0, 8007ab6 <_svfiprintf_r+0xe6>
 8007a7e:	06d0      	lsls	r0, r2, #27
 8007a80:	bf44      	itt	mi
 8007a82:	2320      	movmi	r3, #32
 8007a84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a88:	0711      	lsls	r1, r2, #28
 8007a8a:	bf44      	itt	mi
 8007a8c:	232b      	movmi	r3, #43	; 0x2b
 8007a8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a92:	f89a 3000 	ldrb.w	r3, [sl]
 8007a96:	2b2a      	cmp	r3, #42	; 0x2a
 8007a98:	d015      	beq.n	8007ac6 <_svfiprintf_r+0xf6>
 8007a9a:	4654      	mov	r4, sl
 8007a9c:	2000      	movs	r0, #0
 8007a9e:	f04f 0c0a 	mov.w	ip, #10
 8007aa2:	9a07      	ldr	r2, [sp, #28]
 8007aa4:	4621      	mov	r1, r4
 8007aa6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007aaa:	3b30      	subs	r3, #48	; 0x30
 8007aac:	2b09      	cmp	r3, #9
 8007aae:	d94e      	bls.n	8007b4e <_svfiprintf_r+0x17e>
 8007ab0:	b1b0      	cbz	r0, 8007ae0 <_svfiprintf_r+0x110>
 8007ab2:	9207      	str	r2, [sp, #28]
 8007ab4:	e014      	b.n	8007ae0 <_svfiprintf_r+0x110>
 8007ab6:	eba0 0308 	sub.w	r3, r0, r8
 8007aba:	fa09 f303 	lsl.w	r3, r9, r3
 8007abe:	4313      	orrs	r3, r2
 8007ac0:	46a2      	mov	sl, r4
 8007ac2:	9304      	str	r3, [sp, #16]
 8007ac4:	e7d2      	b.n	8007a6c <_svfiprintf_r+0x9c>
 8007ac6:	9b03      	ldr	r3, [sp, #12]
 8007ac8:	1d19      	adds	r1, r3, #4
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	9103      	str	r1, [sp, #12]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	bfbb      	ittet	lt
 8007ad2:	425b      	neglt	r3, r3
 8007ad4:	f042 0202 	orrlt.w	r2, r2, #2
 8007ad8:	9307      	strge	r3, [sp, #28]
 8007ada:	9307      	strlt	r3, [sp, #28]
 8007adc:	bfb8      	it	lt
 8007ade:	9204      	strlt	r2, [sp, #16]
 8007ae0:	7823      	ldrb	r3, [r4, #0]
 8007ae2:	2b2e      	cmp	r3, #46	; 0x2e
 8007ae4:	d10c      	bne.n	8007b00 <_svfiprintf_r+0x130>
 8007ae6:	7863      	ldrb	r3, [r4, #1]
 8007ae8:	2b2a      	cmp	r3, #42	; 0x2a
 8007aea:	d135      	bne.n	8007b58 <_svfiprintf_r+0x188>
 8007aec:	9b03      	ldr	r3, [sp, #12]
 8007aee:	3402      	adds	r4, #2
 8007af0:	1d1a      	adds	r2, r3, #4
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	9203      	str	r2, [sp, #12]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	bfb8      	it	lt
 8007afa:	f04f 33ff 	movlt.w	r3, #4294967295
 8007afe:	9305      	str	r3, [sp, #20]
 8007b00:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8007bc0 <_svfiprintf_r+0x1f0>
 8007b04:	2203      	movs	r2, #3
 8007b06:	4650      	mov	r0, sl
 8007b08:	7821      	ldrb	r1, [r4, #0]
 8007b0a:	f7ff f94f 	bl	8006dac <memchr>
 8007b0e:	b140      	cbz	r0, 8007b22 <_svfiprintf_r+0x152>
 8007b10:	2340      	movs	r3, #64	; 0x40
 8007b12:	eba0 000a 	sub.w	r0, r0, sl
 8007b16:	fa03 f000 	lsl.w	r0, r3, r0
 8007b1a:	9b04      	ldr	r3, [sp, #16]
 8007b1c:	3401      	adds	r4, #1
 8007b1e:	4303      	orrs	r3, r0
 8007b20:	9304      	str	r3, [sp, #16]
 8007b22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b26:	2206      	movs	r2, #6
 8007b28:	4826      	ldr	r0, [pc, #152]	; (8007bc4 <_svfiprintf_r+0x1f4>)
 8007b2a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007b2e:	f7ff f93d 	bl	8006dac <memchr>
 8007b32:	2800      	cmp	r0, #0
 8007b34:	d038      	beq.n	8007ba8 <_svfiprintf_r+0x1d8>
 8007b36:	4b24      	ldr	r3, [pc, #144]	; (8007bc8 <_svfiprintf_r+0x1f8>)
 8007b38:	bb1b      	cbnz	r3, 8007b82 <_svfiprintf_r+0x1b2>
 8007b3a:	9b03      	ldr	r3, [sp, #12]
 8007b3c:	3307      	adds	r3, #7
 8007b3e:	f023 0307 	bic.w	r3, r3, #7
 8007b42:	3308      	adds	r3, #8
 8007b44:	9303      	str	r3, [sp, #12]
 8007b46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b48:	4433      	add	r3, r6
 8007b4a:	9309      	str	r3, [sp, #36]	; 0x24
 8007b4c:	e767      	b.n	8007a1e <_svfiprintf_r+0x4e>
 8007b4e:	460c      	mov	r4, r1
 8007b50:	2001      	movs	r0, #1
 8007b52:	fb0c 3202 	mla	r2, ip, r2, r3
 8007b56:	e7a5      	b.n	8007aa4 <_svfiprintf_r+0xd4>
 8007b58:	2300      	movs	r3, #0
 8007b5a:	f04f 0c0a 	mov.w	ip, #10
 8007b5e:	4619      	mov	r1, r3
 8007b60:	3401      	adds	r4, #1
 8007b62:	9305      	str	r3, [sp, #20]
 8007b64:	4620      	mov	r0, r4
 8007b66:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b6a:	3a30      	subs	r2, #48	; 0x30
 8007b6c:	2a09      	cmp	r2, #9
 8007b6e:	d903      	bls.n	8007b78 <_svfiprintf_r+0x1a8>
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d0c5      	beq.n	8007b00 <_svfiprintf_r+0x130>
 8007b74:	9105      	str	r1, [sp, #20]
 8007b76:	e7c3      	b.n	8007b00 <_svfiprintf_r+0x130>
 8007b78:	4604      	mov	r4, r0
 8007b7a:	2301      	movs	r3, #1
 8007b7c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007b80:	e7f0      	b.n	8007b64 <_svfiprintf_r+0x194>
 8007b82:	ab03      	add	r3, sp, #12
 8007b84:	9300      	str	r3, [sp, #0]
 8007b86:	462a      	mov	r2, r5
 8007b88:	4638      	mov	r0, r7
 8007b8a:	4b10      	ldr	r3, [pc, #64]	; (8007bcc <_svfiprintf_r+0x1fc>)
 8007b8c:	a904      	add	r1, sp, #16
 8007b8e:	f7fc fa8d 	bl	80040ac <_printf_float>
 8007b92:	1c42      	adds	r2, r0, #1
 8007b94:	4606      	mov	r6, r0
 8007b96:	d1d6      	bne.n	8007b46 <_svfiprintf_r+0x176>
 8007b98:	89ab      	ldrh	r3, [r5, #12]
 8007b9a:	065b      	lsls	r3, r3, #25
 8007b9c:	f53f af2c 	bmi.w	80079f8 <_svfiprintf_r+0x28>
 8007ba0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007ba2:	b01d      	add	sp, #116	; 0x74
 8007ba4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ba8:	ab03      	add	r3, sp, #12
 8007baa:	9300      	str	r3, [sp, #0]
 8007bac:	462a      	mov	r2, r5
 8007bae:	4638      	mov	r0, r7
 8007bb0:	4b06      	ldr	r3, [pc, #24]	; (8007bcc <_svfiprintf_r+0x1fc>)
 8007bb2:	a904      	add	r1, sp, #16
 8007bb4:	f7fc fd16 	bl	80045e4 <_printf_i>
 8007bb8:	e7eb      	b.n	8007b92 <_svfiprintf_r+0x1c2>
 8007bba:	bf00      	nop
 8007bbc:	0800a1bc 	.word	0x0800a1bc
 8007bc0:	0800a1c2 	.word	0x0800a1c2
 8007bc4:	0800a1c6 	.word	0x0800a1c6
 8007bc8:	080040ad 	.word	0x080040ad
 8007bcc:	08007919 	.word	0x08007919

08007bd0 <nan>:
 8007bd0:	2000      	movs	r0, #0
 8007bd2:	4901      	ldr	r1, [pc, #4]	; (8007bd8 <nan+0x8>)
 8007bd4:	4770      	bx	lr
 8007bd6:	bf00      	nop
 8007bd8:	7ff80000 	.word	0x7ff80000

08007bdc <_sbrk_r>:
 8007bdc:	b538      	push	{r3, r4, r5, lr}
 8007bde:	2300      	movs	r3, #0
 8007be0:	4d05      	ldr	r5, [pc, #20]	; (8007bf8 <_sbrk_r+0x1c>)
 8007be2:	4604      	mov	r4, r0
 8007be4:	4608      	mov	r0, r1
 8007be6:	602b      	str	r3, [r5, #0]
 8007be8:	f7f9 fc74 	bl	80014d4 <_sbrk>
 8007bec:	1c43      	adds	r3, r0, #1
 8007bee:	d102      	bne.n	8007bf6 <_sbrk_r+0x1a>
 8007bf0:	682b      	ldr	r3, [r5, #0]
 8007bf2:	b103      	cbz	r3, 8007bf6 <_sbrk_r+0x1a>
 8007bf4:	6023      	str	r3, [r4, #0]
 8007bf6:	bd38      	pop	{r3, r4, r5, pc}
 8007bf8:	20000740 	.word	0x20000740

08007bfc <strncmp>:
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	b510      	push	{r4, lr}
 8007c00:	b172      	cbz	r2, 8007c20 <strncmp+0x24>
 8007c02:	3901      	subs	r1, #1
 8007c04:	1884      	adds	r4, r0, r2
 8007c06:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007c0a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007c0e:	4290      	cmp	r0, r2
 8007c10:	d101      	bne.n	8007c16 <strncmp+0x1a>
 8007c12:	42a3      	cmp	r3, r4
 8007c14:	d101      	bne.n	8007c1a <strncmp+0x1e>
 8007c16:	1a80      	subs	r0, r0, r2
 8007c18:	bd10      	pop	{r4, pc}
 8007c1a:	2800      	cmp	r0, #0
 8007c1c:	d1f3      	bne.n	8007c06 <strncmp+0xa>
 8007c1e:	e7fa      	b.n	8007c16 <strncmp+0x1a>
 8007c20:	4610      	mov	r0, r2
 8007c22:	e7f9      	b.n	8007c18 <strncmp+0x1c>

08007c24 <__ascii_wctomb>:
 8007c24:	4603      	mov	r3, r0
 8007c26:	4608      	mov	r0, r1
 8007c28:	b141      	cbz	r1, 8007c3c <__ascii_wctomb+0x18>
 8007c2a:	2aff      	cmp	r2, #255	; 0xff
 8007c2c:	d904      	bls.n	8007c38 <__ascii_wctomb+0x14>
 8007c2e:	228a      	movs	r2, #138	; 0x8a
 8007c30:	f04f 30ff 	mov.w	r0, #4294967295
 8007c34:	601a      	str	r2, [r3, #0]
 8007c36:	4770      	bx	lr
 8007c38:	2001      	movs	r0, #1
 8007c3a:	700a      	strb	r2, [r1, #0]
 8007c3c:	4770      	bx	lr
	...

08007c40 <__assert_func>:
 8007c40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007c42:	4614      	mov	r4, r2
 8007c44:	461a      	mov	r2, r3
 8007c46:	4b09      	ldr	r3, [pc, #36]	; (8007c6c <__assert_func+0x2c>)
 8007c48:	4605      	mov	r5, r0
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	68d8      	ldr	r0, [r3, #12]
 8007c4e:	b14c      	cbz	r4, 8007c64 <__assert_func+0x24>
 8007c50:	4b07      	ldr	r3, [pc, #28]	; (8007c70 <__assert_func+0x30>)
 8007c52:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007c56:	9100      	str	r1, [sp, #0]
 8007c58:	462b      	mov	r3, r5
 8007c5a:	4906      	ldr	r1, [pc, #24]	; (8007c74 <__assert_func+0x34>)
 8007c5c:	f000 f80e 	bl	8007c7c <fiprintf>
 8007c60:	f000 fa70 	bl	8008144 <abort>
 8007c64:	4b04      	ldr	r3, [pc, #16]	; (8007c78 <__assert_func+0x38>)
 8007c66:	461c      	mov	r4, r3
 8007c68:	e7f3      	b.n	8007c52 <__assert_func+0x12>
 8007c6a:	bf00      	nop
 8007c6c:	2000001c 	.word	0x2000001c
 8007c70:	0800a1cd 	.word	0x0800a1cd
 8007c74:	0800a1da 	.word	0x0800a1da
 8007c78:	0800a208 	.word	0x0800a208

08007c7c <fiprintf>:
 8007c7c:	b40e      	push	{r1, r2, r3}
 8007c7e:	b503      	push	{r0, r1, lr}
 8007c80:	4601      	mov	r1, r0
 8007c82:	ab03      	add	r3, sp, #12
 8007c84:	4805      	ldr	r0, [pc, #20]	; (8007c9c <fiprintf+0x20>)
 8007c86:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c8a:	6800      	ldr	r0, [r0, #0]
 8007c8c:	9301      	str	r3, [sp, #4]
 8007c8e:	f000 f869 	bl	8007d64 <_vfiprintf_r>
 8007c92:	b002      	add	sp, #8
 8007c94:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c98:	b003      	add	sp, #12
 8007c9a:	4770      	bx	lr
 8007c9c:	2000001c 	.word	0x2000001c

08007ca0 <__malloc_lock>:
 8007ca0:	4801      	ldr	r0, [pc, #4]	; (8007ca8 <__malloc_lock+0x8>)
 8007ca2:	f000 bc0b 	b.w	80084bc <__retarget_lock_acquire_recursive>
 8007ca6:	bf00      	nop
 8007ca8:	20000744 	.word	0x20000744

08007cac <__malloc_unlock>:
 8007cac:	4801      	ldr	r0, [pc, #4]	; (8007cb4 <__malloc_unlock+0x8>)
 8007cae:	f000 bc06 	b.w	80084be <__retarget_lock_release_recursive>
 8007cb2:	bf00      	nop
 8007cb4:	20000744 	.word	0x20000744

08007cb8 <_realloc_r>:
 8007cb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cbc:	4680      	mov	r8, r0
 8007cbe:	4614      	mov	r4, r2
 8007cc0:	460e      	mov	r6, r1
 8007cc2:	b921      	cbnz	r1, 8007cce <_realloc_r+0x16>
 8007cc4:	4611      	mov	r1, r2
 8007cc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007cca:	f7ff bdb1 	b.w	8007830 <_malloc_r>
 8007cce:	b92a      	cbnz	r2, 8007cdc <_realloc_r+0x24>
 8007cd0:	f7ff fd46 	bl	8007760 <_free_r>
 8007cd4:	4625      	mov	r5, r4
 8007cd6:	4628      	mov	r0, r5
 8007cd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cdc:	f000 fc56 	bl	800858c <_malloc_usable_size_r>
 8007ce0:	4284      	cmp	r4, r0
 8007ce2:	4607      	mov	r7, r0
 8007ce4:	d802      	bhi.n	8007cec <_realloc_r+0x34>
 8007ce6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007cea:	d812      	bhi.n	8007d12 <_realloc_r+0x5a>
 8007cec:	4621      	mov	r1, r4
 8007cee:	4640      	mov	r0, r8
 8007cf0:	f7ff fd9e 	bl	8007830 <_malloc_r>
 8007cf4:	4605      	mov	r5, r0
 8007cf6:	2800      	cmp	r0, #0
 8007cf8:	d0ed      	beq.n	8007cd6 <_realloc_r+0x1e>
 8007cfa:	42bc      	cmp	r4, r7
 8007cfc:	4622      	mov	r2, r4
 8007cfe:	4631      	mov	r1, r6
 8007d00:	bf28      	it	cs
 8007d02:	463a      	movcs	r2, r7
 8007d04:	f7fc f904 	bl	8003f10 <memcpy>
 8007d08:	4631      	mov	r1, r6
 8007d0a:	4640      	mov	r0, r8
 8007d0c:	f7ff fd28 	bl	8007760 <_free_r>
 8007d10:	e7e1      	b.n	8007cd6 <_realloc_r+0x1e>
 8007d12:	4635      	mov	r5, r6
 8007d14:	e7df      	b.n	8007cd6 <_realloc_r+0x1e>

08007d16 <__sfputc_r>:
 8007d16:	6893      	ldr	r3, [r2, #8]
 8007d18:	b410      	push	{r4}
 8007d1a:	3b01      	subs	r3, #1
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	6093      	str	r3, [r2, #8]
 8007d20:	da07      	bge.n	8007d32 <__sfputc_r+0x1c>
 8007d22:	6994      	ldr	r4, [r2, #24]
 8007d24:	42a3      	cmp	r3, r4
 8007d26:	db01      	blt.n	8007d2c <__sfputc_r+0x16>
 8007d28:	290a      	cmp	r1, #10
 8007d2a:	d102      	bne.n	8007d32 <__sfputc_r+0x1c>
 8007d2c:	bc10      	pop	{r4}
 8007d2e:	f000 b949 	b.w	8007fc4 <__swbuf_r>
 8007d32:	6813      	ldr	r3, [r2, #0]
 8007d34:	1c58      	adds	r0, r3, #1
 8007d36:	6010      	str	r0, [r2, #0]
 8007d38:	7019      	strb	r1, [r3, #0]
 8007d3a:	4608      	mov	r0, r1
 8007d3c:	bc10      	pop	{r4}
 8007d3e:	4770      	bx	lr

08007d40 <__sfputs_r>:
 8007d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d42:	4606      	mov	r6, r0
 8007d44:	460f      	mov	r7, r1
 8007d46:	4614      	mov	r4, r2
 8007d48:	18d5      	adds	r5, r2, r3
 8007d4a:	42ac      	cmp	r4, r5
 8007d4c:	d101      	bne.n	8007d52 <__sfputs_r+0x12>
 8007d4e:	2000      	movs	r0, #0
 8007d50:	e007      	b.n	8007d62 <__sfputs_r+0x22>
 8007d52:	463a      	mov	r2, r7
 8007d54:	4630      	mov	r0, r6
 8007d56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d5a:	f7ff ffdc 	bl	8007d16 <__sfputc_r>
 8007d5e:	1c43      	adds	r3, r0, #1
 8007d60:	d1f3      	bne.n	8007d4a <__sfputs_r+0xa>
 8007d62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007d64 <_vfiprintf_r>:
 8007d64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d68:	460d      	mov	r5, r1
 8007d6a:	4614      	mov	r4, r2
 8007d6c:	4698      	mov	r8, r3
 8007d6e:	4606      	mov	r6, r0
 8007d70:	b09d      	sub	sp, #116	; 0x74
 8007d72:	b118      	cbz	r0, 8007d7c <_vfiprintf_r+0x18>
 8007d74:	6983      	ldr	r3, [r0, #24]
 8007d76:	b90b      	cbnz	r3, 8007d7c <_vfiprintf_r+0x18>
 8007d78:	f000 fb02 	bl	8008380 <__sinit>
 8007d7c:	4b89      	ldr	r3, [pc, #548]	; (8007fa4 <_vfiprintf_r+0x240>)
 8007d7e:	429d      	cmp	r5, r3
 8007d80:	d11b      	bne.n	8007dba <_vfiprintf_r+0x56>
 8007d82:	6875      	ldr	r5, [r6, #4]
 8007d84:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007d86:	07d9      	lsls	r1, r3, #31
 8007d88:	d405      	bmi.n	8007d96 <_vfiprintf_r+0x32>
 8007d8a:	89ab      	ldrh	r3, [r5, #12]
 8007d8c:	059a      	lsls	r2, r3, #22
 8007d8e:	d402      	bmi.n	8007d96 <_vfiprintf_r+0x32>
 8007d90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007d92:	f000 fb93 	bl	80084bc <__retarget_lock_acquire_recursive>
 8007d96:	89ab      	ldrh	r3, [r5, #12]
 8007d98:	071b      	lsls	r3, r3, #28
 8007d9a:	d501      	bpl.n	8007da0 <_vfiprintf_r+0x3c>
 8007d9c:	692b      	ldr	r3, [r5, #16]
 8007d9e:	b9eb      	cbnz	r3, 8007ddc <_vfiprintf_r+0x78>
 8007da0:	4629      	mov	r1, r5
 8007da2:	4630      	mov	r0, r6
 8007da4:	f000 f960 	bl	8008068 <__swsetup_r>
 8007da8:	b1c0      	cbz	r0, 8007ddc <_vfiprintf_r+0x78>
 8007daa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007dac:	07dc      	lsls	r4, r3, #31
 8007dae:	d50e      	bpl.n	8007dce <_vfiprintf_r+0x6a>
 8007db0:	f04f 30ff 	mov.w	r0, #4294967295
 8007db4:	b01d      	add	sp, #116	; 0x74
 8007db6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dba:	4b7b      	ldr	r3, [pc, #492]	; (8007fa8 <_vfiprintf_r+0x244>)
 8007dbc:	429d      	cmp	r5, r3
 8007dbe:	d101      	bne.n	8007dc4 <_vfiprintf_r+0x60>
 8007dc0:	68b5      	ldr	r5, [r6, #8]
 8007dc2:	e7df      	b.n	8007d84 <_vfiprintf_r+0x20>
 8007dc4:	4b79      	ldr	r3, [pc, #484]	; (8007fac <_vfiprintf_r+0x248>)
 8007dc6:	429d      	cmp	r5, r3
 8007dc8:	bf08      	it	eq
 8007dca:	68f5      	ldreq	r5, [r6, #12]
 8007dcc:	e7da      	b.n	8007d84 <_vfiprintf_r+0x20>
 8007dce:	89ab      	ldrh	r3, [r5, #12]
 8007dd0:	0598      	lsls	r0, r3, #22
 8007dd2:	d4ed      	bmi.n	8007db0 <_vfiprintf_r+0x4c>
 8007dd4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007dd6:	f000 fb72 	bl	80084be <__retarget_lock_release_recursive>
 8007dda:	e7e9      	b.n	8007db0 <_vfiprintf_r+0x4c>
 8007ddc:	2300      	movs	r3, #0
 8007dde:	9309      	str	r3, [sp, #36]	; 0x24
 8007de0:	2320      	movs	r3, #32
 8007de2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007de6:	2330      	movs	r3, #48	; 0x30
 8007de8:	f04f 0901 	mov.w	r9, #1
 8007dec:	f8cd 800c 	str.w	r8, [sp, #12]
 8007df0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8007fb0 <_vfiprintf_r+0x24c>
 8007df4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007df8:	4623      	mov	r3, r4
 8007dfa:	469a      	mov	sl, r3
 8007dfc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e00:	b10a      	cbz	r2, 8007e06 <_vfiprintf_r+0xa2>
 8007e02:	2a25      	cmp	r2, #37	; 0x25
 8007e04:	d1f9      	bne.n	8007dfa <_vfiprintf_r+0x96>
 8007e06:	ebba 0b04 	subs.w	fp, sl, r4
 8007e0a:	d00b      	beq.n	8007e24 <_vfiprintf_r+0xc0>
 8007e0c:	465b      	mov	r3, fp
 8007e0e:	4622      	mov	r2, r4
 8007e10:	4629      	mov	r1, r5
 8007e12:	4630      	mov	r0, r6
 8007e14:	f7ff ff94 	bl	8007d40 <__sfputs_r>
 8007e18:	3001      	adds	r0, #1
 8007e1a:	f000 80aa 	beq.w	8007f72 <_vfiprintf_r+0x20e>
 8007e1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e20:	445a      	add	r2, fp
 8007e22:	9209      	str	r2, [sp, #36]	; 0x24
 8007e24:	f89a 3000 	ldrb.w	r3, [sl]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	f000 80a2 	beq.w	8007f72 <_vfiprintf_r+0x20e>
 8007e2e:	2300      	movs	r3, #0
 8007e30:	f04f 32ff 	mov.w	r2, #4294967295
 8007e34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e38:	f10a 0a01 	add.w	sl, sl, #1
 8007e3c:	9304      	str	r3, [sp, #16]
 8007e3e:	9307      	str	r3, [sp, #28]
 8007e40:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007e44:	931a      	str	r3, [sp, #104]	; 0x68
 8007e46:	4654      	mov	r4, sl
 8007e48:	2205      	movs	r2, #5
 8007e4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e4e:	4858      	ldr	r0, [pc, #352]	; (8007fb0 <_vfiprintf_r+0x24c>)
 8007e50:	f7fe ffac 	bl	8006dac <memchr>
 8007e54:	9a04      	ldr	r2, [sp, #16]
 8007e56:	b9d8      	cbnz	r0, 8007e90 <_vfiprintf_r+0x12c>
 8007e58:	06d1      	lsls	r1, r2, #27
 8007e5a:	bf44      	itt	mi
 8007e5c:	2320      	movmi	r3, #32
 8007e5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e62:	0713      	lsls	r3, r2, #28
 8007e64:	bf44      	itt	mi
 8007e66:	232b      	movmi	r3, #43	; 0x2b
 8007e68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e6c:	f89a 3000 	ldrb.w	r3, [sl]
 8007e70:	2b2a      	cmp	r3, #42	; 0x2a
 8007e72:	d015      	beq.n	8007ea0 <_vfiprintf_r+0x13c>
 8007e74:	4654      	mov	r4, sl
 8007e76:	2000      	movs	r0, #0
 8007e78:	f04f 0c0a 	mov.w	ip, #10
 8007e7c:	9a07      	ldr	r2, [sp, #28]
 8007e7e:	4621      	mov	r1, r4
 8007e80:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e84:	3b30      	subs	r3, #48	; 0x30
 8007e86:	2b09      	cmp	r3, #9
 8007e88:	d94e      	bls.n	8007f28 <_vfiprintf_r+0x1c4>
 8007e8a:	b1b0      	cbz	r0, 8007eba <_vfiprintf_r+0x156>
 8007e8c:	9207      	str	r2, [sp, #28]
 8007e8e:	e014      	b.n	8007eba <_vfiprintf_r+0x156>
 8007e90:	eba0 0308 	sub.w	r3, r0, r8
 8007e94:	fa09 f303 	lsl.w	r3, r9, r3
 8007e98:	4313      	orrs	r3, r2
 8007e9a:	46a2      	mov	sl, r4
 8007e9c:	9304      	str	r3, [sp, #16]
 8007e9e:	e7d2      	b.n	8007e46 <_vfiprintf_r+0xe2>
 8007ea0:	9b03      	ldr	r3, [sp, #12]
 8007ea2:	1d19      	adds	r1, r3, #4
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	9103      	str	r1, [sp, #12]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	bfbb      	ittet	lt
 8007eac:	425b      	neglt	r3, r3
 8007eae:	f042 0202 	orrlt.w	r2, r2, #2
 8007eb2:	9307      	strge	r3, [sp, #28]
 8007eb4:	9307      	strlt	r3, [sp, #28]
 8007eb6:	bfb8      	it	lt
 8007eb8:	9204      	strlt	r2, [sp, #16]
 8007eba:	7823      	ldrb	r3, [r4, #0]
 8007ebc:	2b2e      	cmp	r3, #46	; 0x2e
 8007ebe:	d10c      	bne.n	8007eda <_vfiprintf_r+0x176>
 8007ec0:	7863      	ldrb	r3, [r4, #1]
 8007ec2:	2b2a      	cmp	r3, #42	; 0x2a
 8007ec4:	d135      	bne.n	8007f32 <_vfiprintf_r+0x1ce>
 8007ec6:	9b03      	ldr	r3, [sp, #12]
 8007ec8:	3402      	adds	r4, #2
 8007eca:	1d1a      	adds	r2, r3, #4
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	9203      	str	r2, [sp, #12]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	bfb8      	it	lt
 8007ed4:	f04f 33ff 	movlt.w	r3, #4294967295
 8007ed8:	9305      	str	r3, [sp, #20]
 8007eda:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8007fb4 <_vfiprintf_r+0x250>
 8007ede:	2203      	movs	r2, #3
 8007ee0:	4650      	mov	r0, sl
 8007ee2:	7821      	ldrb	r1, [r4, #0]
 8007ee4:	f7fe ff62 	bl	8006dac <memchr>
 8007ee8:	b140      	cbz	r0, 8007efc <_vfiprintf_r+0x198>
 8007eea:	2340      	movs	r3, #64	; 0x40
 8007eec:	eba0 000a 	sub.w	r0, r0, sl
 8007ef0:	fa03 f000 	lsl.w	r0, r3, r0
 8007ef4:	9b04      	ldr	r3, [sp, #16]
 8007ef6:	3401      	adds	r4, #1
 8007ef8:	4303      	orrs	r3, r0
 8007efa:	9304      	str	r3, [sp, #16]
 8007efc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f00:	2206      	movs	r2, #6
 8007f02:	482d      	ldr	r0, [pc, #180]	; (8007fb8 <_vfiprintf_r+0x254>)
 8007f04:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007f08:	f7fe ff50 	bl	8006dac <memchr>
 8007f0c:	2800      	cmp	r0, #0
 8007f0e:	d03f      	beq.n	8007f90 <_vfiprintf_r+0x22c>
 8007f10:	4b2a      	ldr	r3, [pc, #168]	; (8007fbc <_vfiprintf_r+0x258>)
 8007f12:	bb1b      	cbnz	r3, 8007f5c <_vfiprintf_r+0x1f8>
 8007f14:	9b03      	ldr	r3, [sp, #12]
 8007f16:	3307      	adds	r3, #7
 8007f18:	f023 0307 	bic.w	r3, r3, #7
 8007f1c:	3308      	adds	r3, #8
 8007f1e:	9303      	str	r3, [sp, #12]
 8007f20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f22:	443b      	add	r3, r7
 8007f24:	9309      	str	r3, [sp, #36]	; 0x24
 8007f26:	e767      	b.n	8007df8 <_vfiprintf_r+0x94>
 8007f28:	460c      	mov	r4, r1
 8007f2a:	2001      	movs	r0, #1
 8007f2c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007f30:	e7a5      	b.n	8007e7e <_vfiprintf_r+0x11a>
 8007f32:	2300      	movs	r3, #0
 8007f34:	f04f 0c0a 	mov.w	ip, #10
 8007f38:	4619      	mov	r1, r3
 8007f3a:	3401      	adds	r4, #1
 8007f3c:	9305      	str	r3, [sp, #20]
 8007f3e:	4620      	mov	r0, r4
 8007f40:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f44:	3a30      	subs	r2, #48	; 0x30
 8007f46:	2a09      	cmp	r2, #9
 8007f48:	d903      	bls.n	8007f52 <_vfiprintf_r+0x1ee>
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d0c5      	beq.n	8007eda <_vfiprintf_r+0x176>
 8007f4e:	9105      	str	r1, [sp, #20]
 8007f50:	e7c3      	b.n	8007eda <_vfiprintf_r+0x176>
 8007f52:	4604      	mov	r4, r0
 8007f54:	2301      	movs	r3, #1
 8007f56:	fb0c 2101 	mla	r1, ip, r1, r2
 8007f5a:	e7f0      	b.n	8007f3e <_vfiprintf_r+0x1da>
 8007f5c:	ab03      	add	r3, sp, #12
 8007f5e:	9300      	str	r3, [sp, #0]
 8007f60:	462a      	mov	r2, r5
 8007f62:	4630      	mov	r0, r6
 8007f64:	4b16      	ldr	r3, [pc, #88]	; (8007fc0 <_vfiprintf_r+0x25c>)
 8007f66:	a904      	add	r1, sp, #16
 8007f68:	f7fc f8a0 	bl	80040ac <_printf_float>
 8007f6c:	4607      	mov	r7, r0
 8007f6e:	1c78      	adds	r0, r7, #1
 8007f70:	d1d6      	bne.n	8007f20 <_vfiprintf_r+0x1bc>
 8007f72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007f74:	07d9      	lsls	r1, r3, #31
 8007f76:	d405      	bmi.n	8007f84 <_vfiprintf_r+0x220>
 8007f78:	89ab      	ldrh	r3, [r5, #12]
 8007f7a:	059a      	lsls	r2, r3, #22
 8007f7c:	d402      	bmi.n	8007f84 <_vfiprintf_r+0x220>
 8007f7e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007f80:	f000 fa9d 	bl	80084be <__retarget_lock_release_recursive>
 8007f84:	89ab      	ldrh	r3, [r5, #12]
 8007f86:	065b      	lsls	r3, r3, #25
 8007f88:	f53f af12 	bmi.w	8007db0 <_vfiprintf_r+0x4c>
 8007f8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007f8e:	e711      	b.n	8007db4 <_vfiprintf_r+0x50>
 8007f90:	ab03      	add	r3, sp, #12
 8007f92:	9300      	str	r3, [sp, #0]
 8007f94:	462a      	mov	r2, r5
 8007f96:	4630      	mov	r0, r6
 8007f98:	4b09      	ldr	r3, [pc, #36]	; (8007fc0 <_vfiprintf_r+0x25c>)
 8007f9a:	a904      	add	r1, sp, #16
 8007f9c:	f7fc fb22 	bl	80045e4 <_printf_i>
 8007fa0:	e7e4      	b.n	8007f6c <_vfiprintf_r+0x208>
 8007fa2:	bf00      	nop
 8007fa4:	0800a22c 	.word	0x0800a22c
 8007fa8:	0800a24c 	.word	0x0800a24c
 8007fac:	0800a20c 	.word	0x0800a20c
 8007fb0:	0800a1bc 	.word	0x0800a1bc
 8007fb4:	0800a1c2 	.word	0x0800a1c2
 8007fb8:	0800a1c6 	.word	0x0800a1c6
 8007fbc:	080040ad 	.word	0x080040ad
 8007fc0:	08007d41 	.word	0x08007d41

08007fc4 <__swbuf_r>:
 8007fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fc6:	460e      	mov	r6, r1
 8007fc8:	4614      	mov	r4, r2
 8007fca:	4605      	mov	r5, r0
 8007fcc:	b118      	cbz	r0, 8007fd6 <__swbuf_r+0x12>
 8007fce:	6983      	ldr	r3, [r0, #24]
 8007fd0:	b90b      	cbnz	r3, 8007fd6 <__swbuf_r+0x12>
 8007fd2:	f000 f9d5 	bl	8008380 <__sinit>
 8007fd6:	4b21      	ldr	r3, [pc, #132]	; (800805c <__swbuf_r+0x98>)
 8007fd8:	429c      	cmp	r4, r3
 8007fda:	d12b      	bne.n	8008034 <__swbuf_r+0x70>
 8007fdc:	686c      	ldr	r4, [r5, #4]
 8007fde:	69a3      	ldr	r3, [r4, #24]
 8007fe0:	60a3      	str	r3, [r4, #8]
 8007fe2:	89a3      	ldrh	r3, [r4, #12]
 8007fe4:	071a      	lsls	r2, r3, #28
 8007fe6:	d52f      	bpl.n	8008048 <__swbuf_r+0x84>
 8007fe8:	6923      	ldr	r3, [r4, #16]
 8007fea:	b36b      	cbz	r3, 8008048 <__swbuf_r+0x84>
 8007fec:	6923      	ldr	r3, [r4, #16]
 8007fee:	6820      	ldr	r0, [r4, #0]
 8007ff0:	b2f6      	uxtb	r6, r6
 8007ff2:	1ac0      	subs	r0, r0, r3
 8007ff4:	6963      	ldr	r3, [r4, #20]
 8007ff6:	4637      	mov	r7, r6
 8007ff8:	4283      	cmp	r3, r0
 8007ffa:	dc04      	bgt.n	8008006 <__swbuf_r+0x42>
 8007ffc:	4621      	mov	r1, r4
 8007ffe:	4628      	mov	r0, r5
 8008000:	f000 f92a 	bl	8008258 <_fflush_r>
 8008004:	bb30      	cbnz	r0, 8008054 <__swbuf_r+0x90>
 8008006:	68a3      	ldr	r3, [r4, #8]
 8008008:	3001      	adds	r0, #1
 800800a:	3b01      	subs	r3, #1
 800800c:	60a3      	str	r3, [r4, #8]
 800800e:	6823      	ldr	r3, [r4, #0]
 8008010:	1c5a      	adds	r2, r3, #1
 8008012:	6022      	str	r2, [r4, #0]
 8008014:	701e      	strb	r6, [r3, #0]
 8008016:	6963      	ldr	r3, [r4, #20]
 8008018:	4283      	cmp	r3, r0
 800801a:	d004      	beq.n	8008026 <__swbuf_r+0x62>
 800801c:	89a3      	ldrh	r3, [r4, #12]
 800801e:	07db      	lsls	r3, r3, #31
 8008020:	d506      	bpl.n	8008030 <__swbuf_r+0x6c>
 8008022:	2e0a      	cmp	r6, #10
 8008024:	d104      	bne.n	8008030 <__swbuf_r+0x6c>
 8008026:	4621      	mov	r1, r4
 8008028:	4628      	mov	r0, r5
 800802a:	f000 f915 	bl	8008258 <_fflush_r>
 800802e:	b988      	cbnz	r0, 8008054 <__swbuf_r+0x90>
 8008030:	4638      	mov	r0, r7
 8008032:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008034:	4b0a      	ldr	r3, [pc, #40]	; (8008060 <__swbuf_r+0x9c>)
 8008036:	429c      	cmp	r4, r3
 8008038:	d101      	bne.n	800803e <__swbuf_r+0x7a>
 800803a:	68ac      	ldr	r4, [r5, #8]
 800803c:	e7cf      	b.n	8007fde <__swbuf_r+0x1a>
 800803e:	4b09      	ldr	r3, [pc, #36]	; (8008064 <__swbuf_r+0xa0>)
 8008040:	429c      	cmp	r4, r3
 8008042:	bf08      	it	eq
 8008044:	68ec      	ldreq	r4, [r5, #12]
 8008046:	e7ca      	b.n	8007fde <__swbuf_r+0x1a>
 8008048:	4621      	mov	r1, r4
 800804a:	4628      	mov	r0, r5
 800804c:	f000 f80c 	bl	8008068 <__swsetup_r>
 8008050:	2800      	cmp	r0, #0
 8008052:	d0cb      	beq.n	8007fec <__swbuf_r+0x28>
 8008054:	f04f 37ff 	mov.w	r7, #4294967295
 8008058:	e7ea      	b.n	8008030 <__swbuf_r+0x6c>
 800805a:	bf00      	nop
 800805c:	0800a22c 	.word	0x0800a22c
 8008060:	0800a24c 	.word	0x0800a24c
 8008064:	0800a20c 	.word	0x0800a20c

08008068 <__swsetup_r>:
 8008068:	4b32      	ldr	r3, [pc, #200]	; (8008134 <__swsetup_r+0xcc>)
 800806a:	b570      	push	{r4, r5, r6, lr}
 800806c:	681d      	ldr	r5, [r3, #0]
 800806e:	4606      	mov	r6, r0
 8008070:	460c      	mov	r4, r1
 8008072:	b125      	cbz	r5, 800807e <__swsetup_r+0x16>
 8008074:	69ab      	ldr	r3, [r5, #24]
 8008076:	b913      	cbnz	r3, 800807e <__swsetup_r+0x16>
 8008078:	4628      	mov	r0, r5
 800807a:	f000 f981 	bl	8008380 <__sinit>
 800807e:	4b2e      	ldr	r3, [pc, #184]	; (8008138 <__swsetup_r+0xd0>)
 8008080:	429c      	cmp	r4, r3
 8008082:	d10f      	bne.n	80080a4 <__swsetup_r+0x3c>
 8008084:	686c      	ldr	r4, [r5, #4]
 8008086:	89a3      	ldrh	r3, [r4, #12]
 8008088:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800808c:	0719      	lsls	r1, r3, #28
 800808e:	d42c      	bmi.n	80080ea <__swsetup_r+0x82>
 8008090:	06dd      	lsls	r5, r3, #27
 8008092:	d411      	bmi.n	80080b8 <__swsetup_r+0x50>
 8008094:	2309      	movs	r3, #9
 8008096:	6033      	str	r3, [r6, #0]
 8008098:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800809c:	f04f 30ff 	mov.w	r0, #4294967295
 80080a0:	81a3      	strh	r3, [r4, #12]
 80080a2:	e03e      	b.n	8008122 <__swsetup_r+0xba>
 80080a4:	4b25      	ldr	r3, [pc, #148]	; (800813c <__swsetup_r+0xd4>)
 80080a6:	429c      	cmp	r4, r3
 80080a8:	d101      	bne.n	80080ae <__swsetup_r+0x46>
 80080aa:	68ac      	ldr	r4, [r5, #8]
 80080ac:	e7eb      	b.n	8008086 <__swsetup_r+0x1e>
 80080ae:	4b24      	ldr	r3, [pc, #144]	; (8008140 <__swsetup_r+0xd8>)
 80080b0:	429c      	cmp	r4, r3
 80080b2:	bf08      	it	eq
 80080b4:	68ec      	ldreq	r4, [r5, #12]
 80080b6:	e7e6      	b.n	8008086 <__swsetup_r+0x1e>
 80080b8:	0758      	lsls	r0, r3, #29
 80080ba:	d512      	bpl.n	80080e2 <__swsetup_r+0x7a>
 80080bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80080be:	b141      	cbz	r1, 80080d2 <__swsetup_r+0x6a>
 80080c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80080c4:	4299      	cmp	r1, r3
 80080c6:	d002      	beq.n	80080ce <__swsetup_r+0x66>
 80080c8:	4630      	mov	r0, r6
 80080ca:	f7ff fb49 	bl	8007760 <_free_r>
 80080ce:	2300      	movs	r3, #0
 80080d0:	6363      	str	r3, [r4, #52]	; 0x34
 80080d2:	89a3      	ldrh	r3, [r4, #12]
 80080d4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80080d8:	81a3      	strh	r3, [r4, #12]
 80080da:	2300      	movs	r3, #0
 80080dc:	6063      	str	r3, [r4, #4]
 80080de:	6923      	ldr	r3, [r4, #16]
 80080e0:	6023      	str	r3, [r4, #0]
 80080e2:	89a3      	ldrh	r3, [r4, #12]
 80080e4:	f043 0308 	orr.w	r3, r3, #8
 80080e8:	81a3      	strh	r3, [r4, #12]
 80080ea:	6923      	ldr	r3, [r4, #16]
 80080ec:	b94b      	cbnz	r3, 8008102 <__swsetup_r+0x9a>
 80080ee:	89a3      	ldrh	r3, [r4, #12]
 80080f0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80080f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80080f8:	d003      	beq.n	8008102 <__swsetup_r+0x9a>
 80080fa:	4621      	mov	r1, r4
 80080fc:	4630      	mov	r0, r6
 80080fe:	f000 fa05 	bl	800850c <__smakebuf_r>
 8008102:	89a0      	ldrh	r0, [r4, #12]
 8008104:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008108:	f010 0301 	ands.w	r3, r0, #1
 800810c:	d00a      	beq.n	8008124 <__swsetup_r+0xbc>
 800810e:	2300      	movs	r3, #0
 8008110:	60a3      	str	r3, [r4, #8]
 8008112:	6963      	ldr	r3, [r4, #20]
 8008114:	425b      	negs	r3, r3
 8008116:	61a3      	str	r3, [r4, #24]
 8008118:	6923      	ldr	r3, [r4, #16]
 800811a:	b943      	cbnz	r3, 800812e <__swsetup_r+0xc6>
 800811c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008120:	d1ba      	bne.n	8008098 <__swsetup_r+0x30>
 8008122:	bd70      	pop	{r4, r5, r6, pc}
 8008124:	0781      	lsls	r1, r0, #30
 8008126:	bf58      	it	pl
 8008128:	6963      	ldrpl	r3, [r4, #20]
 800812a:	60a3      	str	r3, [r4, #8]
 800812c:	e7f4      	b.n	8008118 <__swsetup_r+0xb0>
 800812e:	2000      	movs	r0, #0
 8008130:	e7f7      	b.n	8008122 <__swsetup_r+0xba>
 8008132:	bf00      	nop
 8008134:	2000001c 	.word	0x2000001c
 8008138:	0800a22c 	.word	0x0800a22c
 800813c:	0800a24c 	.word	0x0800a24c
 8008140:	0800a20c 	.word	0x0800a20c

08008144 <abort>:
 8008144:	2006      	movs	r0, #6
 8008146:	b508      	push	{r3, lr}
 8008148:	f000 fa50 	bl	80085ec <raise>
 800814c:	2001      	movs	r0, #1
 800814e:	f7f9 f94e 	bl	80013ee <_exit>
	...

08008154 <__sflush_r>:
 8008154:	898a      	ldrh	r2, [r1, #12]
 8008156:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008158:	4605      	mov	r5, r0
 800815a:	0710      	lsls	r0, r2, #28
 800815c:	460c      	mov	r4, r1
 800815e:	d457      	bmi.n	8008210 <__sflush_r+0xbc>
 8008160:	684b      	ldr	r3, [r1, #4]
 8008162:	2b00      	cmp	r3, #0
 8008164:	dc04      	bgt.n	8008170 <__sflush_r+0x1c>
 8008166:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008168:	2b00      	cmp	r3, #0
 800816a:	dc01      	bgt.n	8008170 <__sflush_r+0x1c>
 800816c:	2000      	movs	r0, #0
 800816e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008170:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008172:	2e00      	cmp	r6, #0
 8008174:	d0fa      	beq.n	800816c <__sflush_r+0x18>
 8008176:	2300      	movs	r3, #0
 8008178:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800817c:	682f      	ldr	r7, [r5, #0]
 800817e:	602b      	str	r3, [r5, #0]
 8008180:	d032      	beq.n	80081e8 <__sflush_r+0x94>
 8008182:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008184:	89a3      	ldrh	r3, [r4, #12]
 8008186:	075a      	lsls	r2, r3, #29
 8008188:	d505      	bpl.n	8008196 <__sflush_r+0x42>
 800818a:	6863      	ldr	r3, [r4, #4]
 800818c:	1ac0      	subs	r0, r0, r3
 800818e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008190:	b10b      	cbz	r3, 8008196 <__sflush_r+0x42>
 8008192:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008194:	1ac0      	subs	r0, r0, r3
 8008196:	2300      	movs	r3, #0
 8008198:	4602      	mov	r2, r0
 800819a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800819c:	4628      	mov	r0, r5
 800819e:	6a21      	ldr	r1, [r4, #32]
 80081a0:	47b0      	blx	r6
 80081a2:	1c43      	adds	r3, r0, #1
 80081a4:	89a3      	ldrh	r3, [r4, #12]
 80081a6:	d106      	bne.n	80081b6 <__sflush_r+0x62>
 80081a8:	6829      	ldr	r1, [r5, #0]
 80081aa:	291d      	cmp	r1, #29
 80081ac:	d82c      	bhi.n	8008208 <__sflush_r+0xb4>
 80081ae:	4a29      	ldr	r2, [pc, #164]	; (8008254 <__sflush_r+0x100>)
 80081b0:	40ca      	lsrs	r2, r1
 80081b2:	07d6      	lsls	r6, r2, #31
 80081b4:	d528      	bpl.n	8008208 <__sflush_r+0xb4>
 80081b6:	2200      	movs	r2, #0
 80081b8:	6062      	str	r2, [r4, #4]
 80081ba:	6922      	ldr	r2, [r4, #16]
 80081bc:	04d9      	lsls	r1, r3, #19
 80081be:	6022      	str	r2, [r4, #0]
 80081c0:	d504      	bpl.n	80081cc <__sflush_r+0x78>
 80081c2:	1c42      	adds	r2, r0, #1
 80081c4:	d101      	bne.n	80081ca <__sflush_r+0x76>
 80081c6:	682b      	ldr	r3, [r5, #0]
 80081c8:	b903      	cbnz	r3, 80081cc <__sflush_r+0x78>
 80081ca:	6560      	str	r0, [r4, #84]	; 0x54
 80081cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80081ce:	602f      	str	r7, [r5, #0]
 80081d0:	2900      	cmp	r1, #0
 80081d2:	d0cb      	beq.n	800816c <__sflush_r+0x18>
 80081d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80081d8:	4299      	cmp	r1, r3
 80081da:	d002      	beq.n	80081e2 <__sflush_r+0x8e>
 80081dc:	4628      	mov	r0, r5
 80081de:	f7ff fabf 	bl	8007760 <_free_r>
 80081e2:	2000      	movs	r0, #0
 80081e4:	6360      	str	r0, [r4, #52]	; 0x34
 80081e6:	e7c2      	b.n	800816e <__sflush_r+0x1a>
 80081e8:	6a21      	ldr	r1, [r4, #32]
 80081ea:	2301      	movs	r3, #1
 80081ec:	4628      	mov	r0, r5
 80081ee:	47b0      	blx	r6
 80081f0:	1c41      	adds	r1, r0, #1
 80081f2:	d1c7      	bne.n	8008184 <__sflush_r+0x30>
 80081f4:	682b      	ldr	r3, [r5, #0]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d0c4      	beq.n	8008184 <__sflush_r+0x30>
 80081fa:	2b1d      	cmp	r3, #29
 80081fc:	d001      	beq.n	8008202 <__sflush_r+0xae>
 80081fe:	2b16      	cmp	r3, #22
 8008200:	d101      	bne.n	8008206 <__sflush_r+0xb2>
 8008202:	602f      	str	r7, [r5, #0]
 8008204:	e7b2      	b.n	800816c <__sflush_r+0x18>
 8008206:	89a3      	ldrh	r3, [r4, #12]
 8008208:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800820c:	81a3      	strh	r3, [r4, #12]
 800820e:	e7ae      	b.n	800816e <__sflush_r+0x1a>
 8008210:	690f      	ldr	r7, [r1, #16]
 8008212:	2f00      	cmp	r7, #0
 8008214:	d0aa      	beq.n	800816c <__sflush_r+0x18>
 8008216:	0793      	lsls	r3, r2, #30
 8008218:	bf18      	it	ne
 800821a:	2300      	movne	r3, #0
 800821c:	680e      	ldr	r6, [r1, #0]
 800821e:	bf08      	it	eq
 8008220:	694b      	ldreq	r3, [r1, #20]
 8008222:	1bf6      	subs	r6, r6, r7
 8008224:	600f      	str	r7, [r1, #0]
 8008226:	608b      	str	r3, [r1, #8]
 8008228:	2e00      	cmp	r6, #0
 800822a:	dd9f      	ble.n	800816c <__sflush_r+0x18>
 800822c:	4633      	mov	r3, r6
 800822e:	463a      	mov	r2, r7
 8008230:	4628      	mov	r0, r5
 8008232:	6a21      	ldr	r1, [r4, #32]
 8008234:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8008238:	47e0      	blx	ip
 800823a:	2800      	cmp	r0, #0
 800823c:	dc06      	bgt.n	800824c <__sflush_r+0xf8>
 800823e:	89a3      	ldrh	r3, [r4, #12]
 8008240:	f04f 30ff 	mov.w	r0, #4294967295
 8008244:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008248:	81a3      	strh	r3, [r4, #12]
 800824a:	e790      	b.n	800816e <__sflush_r+0x1a>
 800824c:	4407      	add	r7, r0
 800824e:	1a36      	subs	r6, r6, r0
 8008250:	e7ea      	b.n	8008228 <__sflush_r+0xd4>
 8008252:	bf00      	nop
 8008254:	20400001 	.word	0x20400001

08008258 <_fflush_r>:
 8008258:	b538      	push	{r3, r4, r5, lr}
 800825a:	690b      	ldr	r3, [r1, #16]
 800825c:	4605      	mov	r5, r0
 800825e:	460c      	mov	r4, r1
 8008260:	b913      	cbnz	r3, 8008268 <_fflush_r+0x10>
 8008262:	2500      	movs	r5, #0
 8008264:	4628      	mov	r0, r5
 8008266:	bd38      	pop	{r3, r4, r5, pc}
 8008268:	b118      	cbz	r0, 8008272 <_fflush_r+0x1a>
 800826a:	6983      	ldr	r3, [r0, #24]
 800826c:	b90b      	cbnz	r3, 8008272 <_fflush_r+0x1a>
 800826e:	f000 f887 	bl	8008380 <__sinit>
 8008272:	4b14      	ldr	r3, [pc, #80]	; (80082c4 <_fflush_r+0x6c>)
 8008274:	429c      	cmp	r4, r3
 8008276:	d11b      	bne.n	80082b0 <_fflush_r+0x58>
 8008278:	686c      	ldr	r4, [r5, #4]
 800827a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d0ef      	beq.n	8008262 <_fflush_r+0xa>
 8008282:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008284:	07d0      	lsls	r0, r2, #31
 8008286:	d404      	bmi.n	8008292 <_fflush_r+0x3a>
 8008288:	0599      	lsls	r1, r3, #22
 800828a:	d402      	bmi.n	8008292 <_fflush_r+0x3a>
 800828c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800828e:	f000 f915 	bl	80084bc <__retarget_lock_acquire_recursive>
 8008292:	4628      	mov	r0, r5
 8008294:	4621      	mov	r1, r4
 8008296:	f7ff ff5d 	bl	8008154 <__sflush_r>
 800829a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800829c:	4605      	mov	r5, r0
 800829e:	07da      	lsls	r2, r3, #31
 80082a0:	d4e0      	bmi.n	8008264 <_fflush_r+0xc>
 80082a2:	89a3      	ldrh	r3, [r4, #12]
 80082a4:	059b      	lsls	r3, r3, #22
 80082a6:	d4dd      	bmi.n	8008264 <_fflush_r+0xc>
 80082a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80082aa:	f000 f908 	bl	80084be <__retarget_lock_release_recursive>
 80082ae:	e7d9      	b.n	8008264 <_fflush_r+0xc>
 80082b0:	4b05      	ldr	r3, [pc, #20]	; (80082c8 <_fflush_r+0x70>)
 80082b2:	429c      	cmp	r4, r3
 80082b4:	d101      	bne.n	80082ba <_fflush_r+0x62>
 80082b6:	68ac      	ldr	r4, [r5, #8]
 80082b8:	e7df      	b.n	800827a <_fflush_r+0x22>
 80082ba:	4b04      	ldr	r3, [pc, #16]	; (80082cc <_fflush_r+0x74>)
 80082bc:	429c      	cmp	r4, r3
 80082be:	bf08      	it	eq
 80082c0:	68ec      	ldreq	r4, [r5, #12]
 80082c2:	e7da      	b.n	800827a <_fflush_r+0x22>
 80082c4:	0800a22c 	.word	0x0800a22c
 80082c8:	0800a24c 	.word	0x0800a24c
 80082cc:	0800a20c 	.word	0x0800a20c

080082d0 <std>:
 80082d0:	2300      	movs	r3, #0
 80082d2:	b510      	push	{r4, lr}
 80082d4:	4604      	mov	r4, r0
 80082d6:	e9c0 3300 	strd	r3, r3, [r0]
 80082da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80082de:	6083      	str	r3, [r0, #8]
 80082e0:	8181      	strh	r1, [r0, #12]
 80082e2:	6643      	str	r3, [r0, #100]	; 0x64
 80082e4:	81c2      	strh	r2, [r0, #14]
 80082e6:	6183      	str	r3, [r0, #24]
 80082e8:	4619      	mov	r1, r3
 80082ea:	2208      	movs	r2, #8
 80082ec:	305c      	adds	r0, #92	; 0x5c
 80082ee:	f7fb fe37 	bl	8003f60 <memset>
 80082f2:	4b05      	ldr	r3, [pc, #20]	; (8008308 <std+0x38>)
 80082f4:	6224      	str	r4, [r4, #32]
 80082f6:	6263      	str	r3, [r4, #36]	; 0x24
 80082f8:	4b04      	ldr	r3, [pc, #16]	; (800830c <std+0x3c>)
 80082fa:	62a3      	str	r3, [r4, #40]	; 0x28
 80082fc:	4b04      	ldr	r3, [pc, #16]	; (8008310 <std+0x40>)
 80082fe:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008300:	4b04      	ldr	r3, [pc, #16]	; (8008314 <std+0x44>)
 8008302:	6323      	str	r3, [r4, #48]	; 0x30
 8008304:	bd10      	pop	{r4, pc}
 8008306:	bf00      	nop
 8008308:	08008625 	.word	0x08008625
 800830c:	08008647 	.word	0x08008647
 8008310:	0800867f 	.word	0x0800867f
 8008314:	080086a3 	.word	0x080086a3

08008318 <_cleanup_r>:
 8008318:	4901      	ldr	r1, [pc, #4]	; (8008320 <_cleanup_r+0x8>)
 800831a:	f000 b8af 	b.w	800847c <_fwalk_reent>
 800831e:	bf00      	nop
 8008320:	08008259 	.word	0x08008259

08008324 <__sfmoreglue>:
 8008324:	2268      	movs	r2, #104	; 0x68
 8008326:	b570      	push	{r4, r5, r6, lr}
 8008328:	1e4d      	subs	r5, r1, #1
 800832a:	4355      	muls	r5, r2
 800832c:	460e      	mov	r6, r1
 800832e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008332:	f7ff fa7d 	bl	8007830 <_malloc_r>
 8008336:	4604      	mov	r4, r0
 8008338:	b140      	cbz	r0, 800834c <__sfmoreglue+0x28>
 800833a:	2100      	movs	r1, #0
 800833c:	e9c0 1600 	strd	r1, r6, [r0]
 8008340:	300c      	adds	r0, #12
 8008342:	60a0      	str	r0, [r4, #8]
 8008344:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008348:	f7fb fe0a 	bl	8003f60 <memset>
 800834c:	4620      	mov	r0, r4
 800834e:	bd70      	pop	{r4, r5, r6, pc}

08008350 <__sfp_lock_acquire>:
 8008350:	4801      	ldr	r0, [pc, #4]	; (8008358 <__sfp_lock_acquire+0x8>)
 8008352:	f000 b8b3 	b.w	80084bc <__retarget_lock_acquire_recursive>
 8008356:	bf00      	nop
 8008358:	20000745 	.word	0x20000745

0800835c <__sfp_lock_release>:
 800835c:	4801      	ldr	r0, [pc, #4]	; (8008364 <__sfp_lock_release+0x8>)
 800835e:	f000 b8ae 	b.w	80084be <__retarget_lock_release_recursive>
 8008362:	bf00      	nop
 8008364:	20000745 	.word	0x20000745

08008368 <__sinit_lock_acquire>:
 8008368:	4801      	ldr	r0, [pc, #4]	; (8008370 <__sinit_lock_acquire+0x8>)
 800836a:	f000 b8a7 	b.w	80084bc <__retarget_lock_acquire_recursive>
 800836e:	bf00      	nop
 8008370:	20000746 	.word	0x20000746

08008374 <__sinit_lock_release>:
 8008374:	4801      	ldr	r0, [pc, #4]	; (800837c <__sinit_lock_release+0x8>)
 8008376:	f000 b8a2 	b.w	80084be <__retarget_lock_release_recursive>
 800837a:	bf00      	nop
 800837c:	20000746 	.word	0x20000746

08008380 <__sinit>:
 8008380:	b510      	push	{r4, lr}
 8008382:	4604      	mov	r4, r0
 8008384:	f7ff fff0 	bl	8008368 <__sinit_lock_acquire>
 8008388:	69a3      	ldr	r3, [r4, #24]
 800838a:	b11b      	cbz	r3, 8008394 <__sinit+0x14>
 800838c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008390:	f7ff bff0 	b.w	8008374 <__sinit_lock_release>
 8008394:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008398:	6523      	str	r3, [r4, #80]	; 0x50
 800839a:	4b13      	ldr	r3, [pc, #76]	; (80083e8 <__sinit+0x68>)
 800839c:	4a13      	ldr	r2, [pc, #76]	; (80083ec <__sinit+0x6c>)
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	62a2      	str	r2, [r4, #40]	; 0x28
 80083a2:	42a3      	cmp	r3, r4
 80083a4:	bf08      	it	eq
 80083a6:	2301      	moveq	r3, #1
 80083a8:	4620      	mov	r0, r4
 80083aa:	bf08      	it	eq
 80083ac:	61a3      	streq	r3, [r4, #24]
 80083ae:	f000 f81f 	bl	80083f0 <__sfp>
 80083b2:	6060      	str	r0, [r4, #4]
 80083b4:	4620      	mov	r0, r4
 80083b6:	f000 f81b 	bl	80083f0 <__sfp>
 80083ba:	60a0      	str	r0, [r4, #8]
 80083bc:	4620      	mov	r0, r4
 80083be:	f000 f817 	bl	80083f0 <__sfp>
 80083c2:	2200      	movs	r2, #0
 80083c4:	2104      	movs	r1, #4
 80083c6:	60e0      	str	r0, [r4, #12]
 80083c8:	6860      	ldr	r0, [r4, #4]
 80083ca:	f7ff ff81 	bl	80082d0 <std>
 80083ce:	2201      	movs	r2, #1
 80083d0:	2109      	movs	r1, #9
 80083d2:	68a0      	ldr	r0, [r4, #8]
 80083d4:	f7ff ff7c 	bl	80082d0 <std>
 80083d8:	2202      	movs	r2, #2
 80083da:	2112      	movs	r1, #18
 80083dc:	68e0      	ldr	r0, [r4, #12]
 80083de:	f7ff ff77 	bl	80082d0 <std>
 80083e2:	2301      	movs	r3, #1
 80083e4:	61a3      	str	r3, [r4, #24]
 80083e6:	e7d1      	b.n	800838c <__sinit+0xc>
 80083e8:	08009dc4 	.word	0x08009dc4
 80083ec:	08008319 	.word	0x08008319

080083f0 <__sfp>:
 80083f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083f2:	4607      	mov	r7, r0
 80083f4:	f7ff ffac 	bl	8008350 <__sfp_lock_acquire>
 80083f8:	4b1e      	ldr	r3, [pc, #120]	; (8008474 <__sfp+0x84>)
 80083fa:	681e      	ldr	r6, [r3, #0]
 80083fc:	69b3      	ldr	r3, [r6, #24]
 80083fe:	b913      	cbnz	r3, 8008406 <__sfp+0x16>
 8008400:	4630      	mov	r0, r6
 8008402:	f7ff ffbd 	bl	8008380 <__sinit>
 8008406:	3648      	adds	r6, #72	; 0x48
 8008408:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800840c:	3b01      	subs	r3, #1
 800840e:	d503      	bpl.n	8008418 <__sfp+0x28>
 8008410:	6833      	ldr	r3, [r6, #0]
 8008412:	b30b      	cbz	r3, 8008458 <__sfp+0x68>
 8008414:	6836      	ldr	r6, [r6, #0]
 8008416:	e7f7      	b.n	8008408 <__sfp+0x18>
 8008418:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800841c:	b9d5      	cbnz	r5, 8008454 <__sfp+0x64>
 800841e:	4b16      	ldr	r3, [pc, #88]	; (8008478 <__sfp+0x88>)
 8008420:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008424:	60e3      	str	r3, [r4, #12]
 8008426:	6665      	str	r5, [r4, #100]	; 0x64
 8008428:	f000 f847 	bl	80084ba <__retarget_lock_init_recursive>
 800842c:	f7ff ff96 	bl	800835c <__sfp_lock_release>
 8008430:	2208      	movs	r2, #8
 8008432:	4629      	mov	r1, r5
 8008434:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008438:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800843c:	6025      	str	r5, [r4, #0]
 800843e:	61a5      	str	r5, [r4, #24]
 8008440:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008444:	f7fb fd8c 	bl	8003f60 <memset>
 8008448:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800844c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008450:	4620      	mov	r0, r4
 8008452:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008454:	3468      	adds	r4, #104	; 0x68
 8008456:	e7d9      	b.n	800840c <__sfp+0x1c>
 8008458:	2104      	movs	r1, #4
 800845a:	4638      	mov	r0, r7
 800845c:	f7ff ff62 	bl	8008324 <__sfmoreglue>
 8008460:	4604      	mov	r4, r0
 8008462:	6030      	str	r0, [r6, #0]
 8008464:	2800      	cmp	r0, #0
 8008466:	d1d5      	bne.n	8008414 <__sfp+0x24>
 8008468:	f7ff ff78 	bl	800835c <__sfp_lock_release>
 800846c:	230c      	movs	r3, #12
 800846e:	603b      	str	r3, [r7, #0]
 8008470:	e7ee      	b.n	8008450 <__sfp+0x60>
 8008472:	bf00      	nop
 8008474:	08009dc4 	.word	0x08009dc4
 8008478:	ffff0001 	.word	0xffff0001

0800847c <_fwalk_reent>:
 800847c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008480:	4606      	mov	r6, r0
 8008482:	4688      	mov	r8, r1
 8008484:	2700      	movs	r7, #0
 8008486:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800848a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800848e:	f1b9 0901 	subs.w	r9, r9, #1
 8008492:	d505      	bpl.n	80084a0 <_fwalk_reent+0x24>
 8008494:	6824      	ldr	r4, [r4, #0]
 8008496:	2c00      	cmp	r4, #0
 8008498:	d1f7      	bne.n	800848a <_fwalk_reent+0xe>
 800849a:	4638      	mov	r0, r7
 800849c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80084a0:	89ab      	ldrh	r3, [r5, #12]
 80084a2:	2b01      	cmp	r3, #1
 80084a4:	d907      	bls.n	80084b6 <_fwalk_reent+0x3a>
 80084a6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80084aa:	3301      	adds	r3, #1
 80084ac:	d003      	beq.n	80084b6 <_fwalk_reent+0x3a>
 80084ae:	4629      	mov	r1, r5
 80084b0:	4630      	mov	r0, r6
 80084b2:	47c0      	blx	r8
 80084b4:	4307      	orrs	r7, r0
 80084b6:	3568      	adds	r5, #104	; 0x68
 80084b8:	e7e9      	b.n	800848e <_fwalk_reent+0x12>

080084ba <__retarget_lock_init_recursive>:
 80084ba:	4770      	bx	lr

080084bc <__retarget_lock_acquire_recursive>:
 80084bc:	4770      	bx	lr

080084be <__retarget_lock_release_recursive>:
 80084be:	4770      	bx	lr

080084c0 <__swhatbuf_r>:
 80084c0:	b570      	push	{r4, r5, r6, lr}
 80084c2:	460e      	mov	r6, r1
 80084c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084c8:	4614      	mov	r4, r2
 80084ca:	2900      	cmp	r1, #0
 80084cc:	461d      	mov	r5, r3
 80084ce:	b096      	sub	sp, #88	; 0x58
 80084d0:	da08      	bge.n	80084e4 <__swhatbuf_r+0x24>
 80084d2:	2200      	movs	r2, #0
 80084d4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80084d8:	602a      	str	r2, [r5, #0]
 80084da:	061a      	lsls	r2, r3, #24
 80084dc:	d410      	bmi.n	8008500 <__swhatbuf_r+0x40>
 80084de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80084e2:	e00e      	b.n	8008502 <__swhatbuf_r+0x42>
 80084e4:	466a      	mov	r2, sp
 80084e6:	f000 f903 	bl	80086f0 <_fstat_r>
 80084ea:	2800      	cmp	r0, #0
 80084ec:	dbf1      	blt.n	80084d2 <__swhatbuf_r+0x12>
 80084ee:	9a01      	ldr	r2, [sp, #4]
 80084f0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80084f4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80084f8:	425a      	negs	r2, r3
 80084fa:	415a      	adcs	r2, r3
 80084fc:	602a      	str	r2, [r5, #0]
 80084fe:	e7ee      	b.n	80084de <__swhatbuf_r+0x1e>
 8008500:	2340      	movs	r3, #64	; 0x40
 8008502:	2000      	movs	r0, #0
 8008504:	6023      	str	r3, [r4, #0]
 8008506:	b016      	add	sp, #88	; 0x58
 8008508:	bd70      	pop	{r4, r5, r6, pc}
	...

0800850c <__smakebuf_r>:
 800850c:	898b      	ldrh	r3, [r1, #12]
 800850e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008510:	079d      	lsls	r5, r3, #30
 8008512:	4606      	mov	r6, r0
 8008514:	460c      	mov	r4, r1
 8008516:	d507      	bpl.n	8008528 <__smakebuf_r+0x1c>
 8008518:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800851c:	6023      	str	r3, [r4, #0]
 800851e:	6123      	str	r3, [r4, #16]
 8008520:	2301      	movs	r3, #1
 8008522:	6163      	str	r3, [r4, #20]
 8008524:	b002      	add	sp, #8
 8008526:	bd70      	pop	{r4, r5, r6, pc}
 8008528:	466a      	mov	r2, sp
 800852a:	ab01      	add	r3, sp, #4
 800852c:	f7ff ffc8 	bl	80084c0 <__swhatbuf_r>
 8008530:	9900      	ldr	r1, [sp, #0]
 8008532:	4605      	mov	r5, r0
 8008534:	4630      	mov	r0, r6
 8008536:	f7ff f97b 	bl	8007830 <_malloc_r>
 800853a:	b948      	cbnz	r0, 8008550 <__smakebuf_r+0x44>
 800853c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008540:	059a      	lsls	r2, r3, #22
 8008542:	d4ef      	bmi.n	8008524 <__smakebuf_r+0x18>
 8008544:	f023 0303 	bic.w	r3, r3, #3
 8008548:	f043 0302 	orr.w	r3, r3, #2
 800854c:	81a3      	strh	r3, [r4, #12]
 800854e:	e7e3      	b.n	8008518 <__smakebuf_r+0xc>
 8008550:	4b0d      	ldr	r3, [pc, #52]	; (8008588 <__smakebuf_r+0x7c>)
 8008552:	62b3      	str	r3, [r6, #40]	; 0x28
 8008554:	89a3      	ldrh	r3, [r4, #12]
 8008556:	6020      	str	r0, [r4, #0]
 8008558:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800855c:	81a3      	strh	r3, [r4, #12]
 800855e:	9b00      	ldr	r3, [sp, #0]
 8008560:	6120      	str	r0, [r4, #16]
 8008562:	6163      	str	r3, [r4, #20]
 8008564:	9b01      	ldr	r3, [sp, #4]
 8008566:	b15b      	cbz	r3, 8008580 <__smakebuf_r+0x74>
 8008568:	4630      	mov	r0, r6
 800856a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800856e:	f000 f8d1 	bl	8008714 <_isatty_r>
 8008572:	b128      	cbz	r0, 8008580 <__smakebuf_r+0x74>
 8008574:	89a3      	ldrh	r3, [r4, #12]
 8008576:	f023 0303 	bic.w	r3, r3, #3
 800857a:	f043 0301 	orr.w	r3, r3, #1
 800857e:	81a3      	strh	r3, [r4, #12]
 8008580:	89a0      	ldrh	r0, [r4, #12]
 8008582:	4305      	orrs	r5, r0
 8008584:	81a5      	strh	r5, [r4, #12]
 8008586:	e7cd      	b.n	8008524 <__smakebuf_r+0x18>
 8008588:	08008319 	.word	0x08008319

0800858c <_malloc_usable_size_r>:
 800858c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008590:	1f18      	subs	r0, r3, #4
 8008592:	2b00      	cmp	r3, #0
 8008594:	bfbc      	itt	lt
 8008596:	580b      	ldrlt	r3, [r1, r0]
 8008598:	18c0      	addlt	r0, r0, r3
 800859a:	4770      	bx	lr

0800859c <_raise_r>:
 800859c:	291f      	cmp	r1, #31
 800859e:	b538      	push	{r3, r4, r5, lr}
 80085a0:	4604      	mov	r4, r0
 80085a2:	460d      	mov	r5, r1
 80085a4:	d904      	bls.n	80085b0 <_raise_r+0x14>
 80085a6:	2316      	movs	r3, #22
 80085a8:	6003      	str	r3, [r0, #0]
 80085aa:	f04f 30ff 	mov.w	r0, #4294967295
 80085ae:	bd38      	pop	{r3, r4, r5, pc}
 80085b0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80085b2:	b112      	cbz	r2, 80085ba <_raise_r+0x1e>
 80085b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80085b8:	b94b      	cbnz	r3, 80085ce <_raise_r+0x32>
 80085ba:	4620      	mov	r0, r4
 80085bc:	f000 f830 	bl	8008620 <_getpid_r>
 80085c0:	462a      	mov	r2, r5
 80085c2:	4601      	mov	r1, r0
 80085c4:	4620      	mov	r0, r4
 80085c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80085ca:	f000 b817 	b.w	80085fc <_kill_r>
 80085ce:	2b01      	cmp	r3, #1
 80085d0:	d00a      	beq.n	80085e8 <_raise_r+0x4c>
 80085d2:	1c59      	adds	r1, r3, #1
 80085d4:	d103      	bne.n	80085de <_raise_r+0x42>
 80085d6:	2316      	movs	r3, #22
 80085d8:	6003      	str	r3, [r0, #0]
 80085da:	2001      	movs	r0, #1
 80085dc:	e7e7      	b.n	80085ae <_raise_r+0x12>
 80085de:	2400      	movs	r4, #0
 80085e0:	4628      	mov	r0, r5
 80085e2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80085e6:	4798      	blx	r3
 80085e8:	2000      	movs	r0, #0
 80085ea:	e7e0      	b.n	80085ae <_raise_r+0x12>

080085ec <raise>:
 80085ec:	4b02      	ldr	r3, [pc, #8]	; (80085f8 <raise+0xc>)
 80085ee:	4601      	mov	r1, r0
 80085f0:	6818      	ldr	r0, [r3, #0]
 80085f2:	f7ff bfd3 	b.w	800859c <_raise_r>
 80085f6:	bf00      	nop
 80085f8:	2000001c 	.word	0x2000001c

080085fc <_kill_r>:
 80085fc:	b538      	push	{r3, r4, r5, lr}
 80085fe:	2300      	movs	r3, #0
 8008600:	4d06      	ldr	r5, [pc, #24]	; (800861c <_kill_r+0x20>)
 8008602:	4604      	mov	r4, r0
 8008604:	4608      	mov	r0, r1
 8008606:	4611      	mov	r1, r2
 8008608:	602b      	str	r3, [r5, #0]
 800860a:	f7f8 fee0 	bl	80013ce <_kill>
 800860e:	1c43      	adds	r3, r0, #1
 8008610:	d102      	bne.n	8008618 <_kill_r+0x1c>
 8008612:	682b      	ldr	r3, [r5, #0]
 8008614:	b103      	cbz	r3, 8008618 <_kill_r+0x1c>
 8008616:	6023      	str	r3, [r4, #0]
 8008618:	bd38      	pop	{r3, r4, r5, pc}
 800861a:	bf00      	nop
 800861c:	20000740 	.word	0x20000740

08008620 <_getpid_r>:
 8008620:	f7f8 bece 	b.w	80013c0 <_getpid>

08008624 <__sread>:
 8008624:	b510      	push	{r4, lr}
 8008626:	460c      	mov	r4, r1
 8008628:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800862c:	f000 f894 	bl	8008758 <_read_r>
 8008630:	2800      	cmp	r0, #0
 8008632:	bfab      	itete	ge
 8008634:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008636:	89a3      	ldrhlt	r3, [r4, #12]
 8008638:	181b      	addge	r3, r3, r0
 800863a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800863e:	bfac      	ite	ge
 8008640:	6563      	strge	r3, [r4, #84]	; 0x54
 8008642:	81a3      	strhlt	r3, [r4, #12]
 8008644:	bd10      	pop	{r4, pc}

08008646 <__swrite>:
 8008646:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800864a:	461f      	mov	r7, r3
 800864c:	898b      	ldrh	r3, [r1, #12]
 800864e:	4605      	mov	r5, r0
 8008650:	05db      	lsls	r3, r3, #23
 8008652:	460c      	mov	r4, r1
 8008654:	4616      	mov	r6, r2
 8008656:	d505      	bpl.n	8008664 <__swrite+0x1e>
 8008658:	2302      	movs	r3, #2
 800865a:	2200      	movs	r2, #0
 800865c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008660:	f000 f868 	bl	8008734 <_lseek_r>
 8008664:	89a3      	ldrh	r3, [r4, #12]
 8008666:	4632      	mov	r2, r6
 8008668:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800866c:	81a3      	strh	r3, [r4, #12]
 800866e:	4628      	mov	r0, r5
 8008670:	463b      	mov	r3, r7
 8008672:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008676:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800867a:	f000 b817 	b.w	80086ac <_write_r>

0800867e <__sseek>:
 800867e:	b510      	push	{r4, lr}
 8008680:	460c      	mov	r4, r1
 8008682:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008686:	f000 f855 	bl	8008734 <_lseek_r>
 800868a:	1c43      	adds	r3, r0, #1
 800868c:	89a3      	ldrh	r3, [r4, #12]
 800868e:	bf15      	itete	ne
 8008690:	6560      	strne	r0, [r4, #84]	; 0x54
 8008692:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008696:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800869a:	81a3      	strheq	r3, [r4, #12]
 800869c:	bf18      	it	ne
 800869e:	81a3      	strhne	r3, [r4, #12]
 80086a0:	bd10      	pop	{r4, pc}

080086a2 <__sclose>:
 80086a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086a6:	f000 b813 	b.w	80086d0 <_close_r>
	...

080086ac <_write_r>:
 80086ac:	b538      	push	{r3, r4, r5, lr}
 80086ae:	4604      	mov	r4, r0
 80086b0:	4608      	mov	r0, r1
 80086b2:	4611      	mov	r1, r2
 80086b4:	2200      	movs	r2, #0
 80086b6:	4d05      	ldr	r5, [pc, #20]	; (80086cc <_write_r+0x20>)
 80086b8:	602a      	str	r2, [r5, #0]
 80086ba:	461a      	mov	r2, r3
 80086bc:	f7f8 febe 	bl	800143c <_write>
 80086c0:	1c43      	adds	r3, r0, #1
 80086c2:	d102      	bne.n	80086ca <_write_r+0x1e>
 80086c4:	682b      	ldr	r3, [r5, #0]
 80086c6:	b103      	cbz	r3, 80086ca <_write_r+0x1e>
 80086c8:	6023      	str	r3, [r4, #0]
 80086ca:	bd38      	pop	{r3, r4, r5, pc}
 80086cc:	20000740 	.word	0x20000740

080086d0 <_close_r>:
 80086d0:	b538      	push	{r3, r4, r5, lr}
 80086d2:	2300      	movs	r3, #0
 80086d4:	4d05      	ldr	r5, [pc, #20]	; (80086ec <_close_r+0x1c>)
 80086d6:	4604      	mov	r4, r0
 80086d8:	4608      	mov	r0, r1
 80086da:	602b      	str	r3, [r5, #0]
 80086dc:	f7f8 feca 	bl	8001474 <_close>
 80086e0:	1c43      	adds	r3, r0, #1
 80086e2:	d102      	bne.n	80086ea <_close_r+0x1a>
 80086e4:	682b      	ldr	r3, [r5, #0]
 80086e6:	b103      	cbz	r3, 80086ea <_close_r+0x1a>
 80086e8:	6023      	str	r3, [r4, #0]
 80086ea:	bd38      	pop	{r3, r4, r5, pc}
 80086ec:	20000740 	.word	0x20000740

080086f0 <_fstat_r>:
 80086f0:	b538      	push	{r3, r4, r5, lr}
 80086f2:	2300      	movs	r3, #0
 80086f4:	4d06      	ldr	r5, [pc, #24]	; (8008710 <_fstat_r+0x20>)
 80086f6:	4604      	mov	r4, r0
 80086f8:	4608      	mov	r0, r1
 80086fa:	4611      	mov	r1, r2
 80086fc:	602b      	str	r3, [r5, #0]
 80086fe:	f7f8 fec4 	bl	800148a <_fstat>
 8008702:	1c43      	adds	r3, r0, #1
 8008704:	d102      	bne.n	800870c <_fstat_r+0x1c>
 8008706:	682b      	ldr	r3, [r5, #0]
 8008708:	b103      	cbz	r3, 800870c <_fstat_r+0x1c>
 800870a:	6023      	str	r3, [r4, #0]
 800870c:	bd38      	pop	{r3, r4, r5, pc}
 800870e:	bf00      	nop
 8008710:	20000740 	.word	0x20000740

08008714 <_isatty_r>:
 8008714:	b538      	push	{r3, r4, r5, lr}
 8008716:	2300      	movs	r3, #0
 8008718:	4d05      	ldr	r5, [pc, #20]	; (8008730 <_isatty_r+0x1c>)
 800871a:	4604      	mov	r4, r0
 800871c:	4608      	mov	r0, r1
 800871e:	602b      	str	r3, [r5, #0]
 8008720:	f7f8 fec2 	bl	80014a8 <_isatty>
 8008724:	1c43      	adds	r3, r0, #1
 8008726:	d102      	bne.n	800872e <_isatty_r+0x1a>
 8008728:	682b      	ldr	r3, [r5, #0]
 800872a:	b103      	cbz	r3, 800872e <_isatty_r+0x1a>
 800872c:	6023      	str	r3, [r4, #0]
 800872e:	bd38      	pop	{r3, r4, r5, pc}
 8008730:	20000740 	.word	0x20000740

08008734 <_lseek_r>:
 8008734:	b538      	push	{r3, r4, r5, lr}
 8008736:	4604      	mov	r4, r0
 8008738:	4608      	mov	r0, r1
 800873a:	4611      	mov	r1, r2
 800873c:	2200      	movs	r2, #0
 800873e:	4d05      	ldr	r5, [pc, #20]	; (8008754 <_lseek_r+0x20>)
 8008740:	602a      	str	r2, [r5, #0]
 8008742:	461a      	mov	r2, r3
 8008744:	f7f8 feba 	bl	80014bc <_lseek>
 8008748:	1c43      	adds	r3, r0, #1
 800874a:	d102      	bne.n	8008752 <_lseek_r+0x1e>
 800874c:	682b      	ldr	r3, [r5, #0]
 800874e:	b103      	cbz	r3, 8008752 <_lseek_r+0x1e>
 8008750:	6023      	str	r3, [r4, #0]
 8008752:	bd38      	pop	{r3, r4, r5, pc}
 8008754:	20000740 	.word	0x20000740

08008758 <_read_r>:
 8008758:	b538      	push	{r3, r4, r5, lr}
 800875a:	4604      	mov	r4, r0
 800875c:	4608      	mov	r0, r1
 800875e:	4611      	mov	r1, r2
 8008760:	2200      	movs	r2, #0
 8008762:	4d05      	ldr	r5, [pc, #20]	; (8008778 <_read_r+0x20>)
 8008764:	602a      	str	r2, [r5, #0]
 8008766:	461a      	mov	r2, r3
 8008768:	f7f8 fe4b 	bl	8001402 <_read>
 800876c:	1c43      	adds	r3, r0, #1
 800876e:	d102      	bne.n	8008776 <_read_r+0x1e>
 8008770:	682b      	ldr	r3, [r5, #0]
 8008772:	b103      	cbz	r3, 8008776 <_read_r+0x1e>
 8008774:	6023      	str	r3, [r4, #0]
 8008776:	bd38      	pop	{r3, r4, r5, pc}
 8008778:	20000740 	.word	0x20000740

0800877c <_init>:
 800877c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800877e:	bf00      	nop
 8008780:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008782:	bc08      	pop	{r3}
 8008784:	469e      	mov	lr, r3
 8008786:	4770      	bx	lr

08008788 <_fini>:
 8008788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800878a:	bf00      	nop
 800878c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800878e:	bc08      	pop	{r3}
 8008790:	469e      	mov	lr, r3
 8008792:	4770      	bx	lr
